$GLOBALS
$_SERVER
$_GET
$_POST
$_COOKIE
$_FILES
$_ENV
$_REQUEST
$_SESSION
$php_errormsg
$http_response_header
$this
__autoload(string class_name) Attempt to load undefined class (null)
__construct([mixed ...]) Object constructor (null)
__destruct() Object destructor (null)
__call(string name, array arguments) Triggered when invoking inaccessible methods in an object context (mixed)
__callStatic(string name, array arguments) Triggered when invoking inaccessible methods in a static context (mixed)
__get(string name) Utilized for reading data from inaccessible properties (mixed)
__set(string name, mixed value) Run when writing data to inaccessible properties (null)
__isset(string name) Triggered by calling isset() or empty()  on inaccessible properties (bool)
__unset(string name) Invoked when unset() is used on inaccessible properties (null)
__sleep() Called by serialize() (array)
__wakeup() Called by unserialize() (null)
__toString() Decide how to react when object is converted to a string (string)
__invoke([mixed ...]) Called when a script tries to call an object as a function (mixed)
__set_state(array properties) Called by var_export() result (object)
__clone() Called after cloning (null)
PHP_SELF
argv
argc
GATEWAY_INTERFACE
SERVER_ADDR
SERVER_NAME
SERVER_SOFTWARE
SERVER_PROTOCOL
REQUEST_METHOD
REQUEST_TIME
QUERY_STRING
DOCUMENT_ROOT
HTTP_ACCEPT
HTTP_ACCEPT_CHARSET
HTTP_ACCEPT_ENCODING
HTTP_ACCEPT_LANGUAGE
HTTP_CONNECTION
HTTP_HOST
HTTP_REFERER
HTTP_USER_AGENT
HTTPS
REMOTE_ADDR
REMOTE_HOST
REMOTE_PORT
SCRIPT_FILENAME
SERVER_ADMIN
SERVER_PORT
SERVER_SIGNATURE
PATH_TRANSLATED
SCRIPT_NAME
REQUEST_URI
PHP_AUTH_DIGEST
PHP_AUTH_USER
PHP_AUTH_PW
AUTH_TYPE
include
include_once
require
require_once
return
__CLASS__
__DIR__
__FILE__
__FUNCTION__
__METHOD__
__NAMESPACE__
PHP_VERSION
PHP_MAJOR_VERSION
PHP_MINOR_VERSION
PHP_RELEASE_VERSION
PHP_VERSION_ID
PHP_EXTRA_VERSION
PHP_ZTS
PHP_DEBUG
PHP_MAXPATHLEN
PHP_OS
PHP_SAPI
PHP_EOL
PHP_INT_MAX
PHP_INT_SIZE
DEFAULT_INCLUDE_PATH
PEAR_INSTALL_DIR
PEAR_EXTENSION_DIR
PHP_EXTENSION_DIR
PHP_PREFIX
PHP_BINDIR
PHP_LIBDIR
PHP_DATADIR
PHP_SYSCONFDIR
PHP_LOCALSTATEDIR
PHP_CONFIG_FILE_PATH
PHP_CONFIG_FILE_SCAN_DIR
PHP_SHLIB_SUFFIX
PHP_OUTPUT_HANDLER_START
PHP_OUTPUT_HANDLER_CONT
PHP_OUTPUT_HANDLER_END
PHP_WINDOWS_VERSION_MAJOR
PHP_WINDOWS_VERSION_MINOR
PHP_WINDOWS_VERSION_BUILD
PHP_WINDOWS_VERSION_PLATFORM
PHP_WINDOWS_VERSION_SP_MAJOR
PHP_WINDOWS_VERSION_SP_MINOR
PHP_WINDOWS_VERSION_SUITEMASK
PHP_WINDOWS_VERSION_PRODUCTTYPE
PHP_WINDOWS_NT_DOMAIN_CONTROLLER
PHP_WINDOWS_NT_SERVER
PHP_WINDOWS_NT_WORKSTATION
E_ERROR
E_WARNING
E_PARSE
E_NOTICE
E_CORE_ERROR
E_CORE_WARNING
E_COMPILE_ERROR
E_COMPILE_WARNING
E_USER_ERROR
E_USER_WARNING
E_USER_NOTICE
E_DEPRECATED
E_USER_DEPRECATED
E_ALL
E_STRICT
__COMPILER_HALT_OFFSET__
EXTR_OVERWRITE
EXTR_SKIP
EXTR_PREFIX_SAME
EXTR_PREFIX_ALL
EXTR_PREFIX_INVALID
EXTR_PREFIX_IF_EXISTS
EXTR_IF_EXISTS
SORT_ASC
SORT_DESC
SORT_REGULAR
SORT_NUMERIC
SORT_STRING
CASE_LOWER
CASE_UPPER
COUNT_NORMAL
COUNT_RECURSIVE
ASSERT_ACTIVE
ASSERT_CALLBACK
ASSERT_BAIL
ASSERT_WARNING
ASSERT_QUIET_EVAL
CONNECTION_ABORTED
CONNECTION_NORMAL
CONNECTION_TIMEOUT
INI_USER
INI_PERDIR
INI_SYSTEM
INI_ALL
M_E
M_LOG2E
M_LOG10E
M_LN2
M_LN10
M_PI
M_PI_2
M_PI_4
M_1_PI
M_2_PI
M_2_SQRTPI
M_SQRT2
M_SQRT1_2
DIRECTORY_SEPARATOR
SEEK_SET
SEEK_CUR
SEEK_END
LOCK_SH
LOCK_EX
LOCK_UN
LOCK_NB
HTML_SPECIALCHARS
HTML_ENTITIES
ENT_COMPAT
ENT_QUOTES
ENT_NOQUOTES
INFO_GENERAL
INFO_CREDITS
INFO_CONFIGURATION
INFO_MODULES
INFO_ENVIRONMENT
INFO_VARIABLES
INFO_LICENSE
INFO_ALL
CREDITS_GROUP
CREDITS_GENERAL
CREDITS_SAPI
CREDITS_MODULES
CREDITS_DOCS
CREDITS_FULLPAGE
CREDITS_QA
CREDITS_ALL
STR_PAD_LEFT
STR_PAD_RIGHT
STR_PAD_BOTH
GLOB_BRACE
GLOB_ONLYDIR
GLOB_MARK
GLOB_NOSORT
GLOB_NOCHECK
GLOB_NOESCAPE
GLOB_AVAILABLE_FLAGS
PATHINFO_DIRNAME
PATHINFO_BASENAME
PATHINFO_EXTENSION
PATHINFO_FILENAME
FILE_USE_INCLUDE_PATH
FILE_NO_DEFAULT_CONTEXT
FILE_APPEND
FILE_IGNORE_NEW_LINES
FILE_SKIP_EMPTY_LINES
FILE_BINARY
FILE_TEXT
INI_SCANNER_NORMAL
INI_SCANNER_RAW
PATH_SEPARATOR
CHAR_MAX
LC_CTYPE
LC_NUMERIC
LC_TIME
LC_COLLATE
LC_MONETARY
LC_ALL
LC_MESSAGES
PREG_PATTERN_ORDER
PREG_SET_ORDER
PREG_OFFSET_CAPTURE
PREG_SPLIT_NO_EMPTY
PREG_SPLIT_DELIM_CAPTURE
PREG_SPLIT_OFFSET_CAPTURE
PREG_NO_ERROR
PREG_INTERNAL_ERROR
PREG_BACKTRACK_LIMIT_ERROR
PREG_RECURSION_LIMIT_ERROR
PREG_BAD_UTF8_ERROR
PREG_BAD_UTF8_OFFSET_ERROR
PCRE_VERSION
UPLOAD_ERR_OK
UPLOAD_ERR_INI_SIZE
UPLOAD_ERR_FORM_SIZE
UPLOAD_ERR_PARTIAL
UPLOAD_ERR_NO_FILE
UPLOAD_ERR_NO_TMP_DIR
UPLOAD_ERR_CANT_WRITE
UPLOAD_ERR_EXTENSION
apache_child_terminate() Terminate apache process after this request (bool)
apache_get_modules() Get a list of loaded Apache modules (array)
apache_get_version() Fetch Apache version (string)
apache_getenv(string variable, [bool walk_to_top]) Get an Apache subprocess_env variable (string)
apache_lookup_uri(string filename) Perform a partial request for the specified URI and return all info about it (object)
apache_note(string note_name, [string note_value]) Get and set apache request notes (string)
apache_request_headers() Fetch all HTTP request headers (array)
apache_reset_timeout() Reset the Apache write timer (bool)
apache_response_headers() Fetch all HTTP response headers (array)
apache_setenv(string variable, string value, [bool walk_to_top]) Set an Apache subprocess_env variable (bool)
ascii2ebcdic(string ascii_str) Translate string from ASCII to EBCDIC (int)
ebcdic2ascii(string ebcdic_str) Translate string from EBCDIC to ASCII (int)
getallheaders() Fetch all HTTP request headers (array)
virtual(string filename) Perform an Apache sub-request (bool)
apc_add(string key, mixed var, [int ttl]) Cache a variable in the data store (bool)
apc_cache_info([string cache_type, [bool limited]]) Retrieves cached information from APC's data store (array)
apc_clear_cache([string cache_type]) Clears the APC cache (bool)
apc_compile_file(string filename) Stores a file in the bytecode cache, bypassing all filters. (bool)
apc_define_constants(string key, array constants, [bool case_sensitive]) Defines a set of constants for retrieval and mass-definition (bool)
apc_delete(string key) Removes a stored variable from the cache (bool)
apc_fetch(string key, [bool &success]) Fetch a stored variable from the cache (mixed)
apc_load_constants(string key, [bool case_sensitive]) Loads a set of constants from the cache (bool)
apc_sma_info([bool limited]) Retrieves APC's Shared Memory Allocation information (array)
apc_store(string key, mixed var, [int ttl]) Cache a variable in the data store (bool)
apd_breakpoint(int debug_level) Stops the interpreter and waits on a CR from the socket (bool)
apd_callstack() Returns the current call stack as an array (array)
apd_clunk(string warning, [string delimiter]) Throw a warning and a callstack (null)
apd_continue(int debug_level) Restarts the interpreter (bool)
apd_croak(string warning, [string delimiter]) Throw an error, a callstack and then exit (null)
apd_dump_function_table() Outputs the current function table (null)
apd_dump_persistent_resources() Return all persistent resources as an array (array)
apd_dump_regular_resources() Return all current regular resources as an array (array)
apd_echo(string output) Echo to the debugging socket (bool)
apd_get_active_symbols() Get an array of the current variables names in the local scope (array)
apd_set_pprof_trace([string dump_directory, [string fragment]]) Starts the session debugging (string)
apd_set_session_trace_socket(string tcp_server, int socket_type, int port, int debug_level) Starts the remote session debugging (bool)
apd_set_session_trace(int debug_level, [string dump_directory]) Starts the session debugging (null)
apd_set_session(int debug_level) Changes or sets the current debugging level (null)
override_function(string function_name, string function_args, string function_code) Overrides built-in functions (bool)
rename_function(string original_name, string new_name) Renames orig_name to new_name in the global function table (bool)
array_change_key_case(array input, [int case]) Changes all keys in an array (array)
array_chunk(array input, int size, [bool preserve_keys]) Split an array into chunks (array)
array_combine(array keys, array values) Creates an array by using one array for keys and another for its values (array)
array_count_values(array input) Counts all the values of an array (array)
array_diff_assoc(array array1, array array2, [array ...]) Computes the difference of arrays with additional index check (array)
array_diff_key(array array1, array array2, [array ...]) Computes the difference of arrays using keys for comparison (array)
array_diff_uassoc(array array1, array array2, [array ...], callback key_compare_func) Computes the difference of arrays with additional index check which is performed by a user supplied callback function (array)
array_diff_ukey(array array1, array array2, [array  ...], callback key_compare_func) Computes the difference of arrays using a callback function on the keys for comparison (array)
array_diff(array array1, array array2, [array  ...]) Computes the difference of arrays (array)
array_fill_keys(array keys, mixed value) Fill an array with values, specifying keys (array)
array_fill(int start_index, int num, mixed value) Fill an array with values (array)
array_filter(array input, [callback callback]) Filters elements of an array using a callback function (array)
array_flip(array trans) Exchanges all keys with their associated values in an array (array)
array_intersect_assoc(array array1, array array2, [array  ...]) Computes the intersection of arrays with additional index check (array)
array_intersect_key(array array1, array array2, [array  ...]) Computes the intersection of arrays using keys for comparison (array)
array_intersect_uassoc(array array1, array array2, [array  ...], callback key_compare_func) Computes the intersection of arrays with additional index check, compares indexes by a callback function (array)
array_intersect_ukey(array array1, array array2, [array ...], callback key_compare_func) Computes the intersection of arrays using a callback function on the keys for comparison (array)
array_intersect(array array1, array array2, [array  ...]) Computes the intersection of arrays (array)
array_key_exists(mixed key, array search) Checks if the given key or index exists in the array (bool)
array_keys(array input, [mixed search_value, [bool strict]]) Return all the keys of an array (array)
array_map(callback callback, array arr1, [array ...]) Applies the callback to the elements of the given arrays (array)
array_merge_recursive(array array1, [array ...]) Merge two or more arrays recursively (array)
array_merge(array array1, [array array2, [array ...]]) Merge one or more arrays (array)
array_multisort(array &arr, [mixed arg, [mixed arg, [mixed ...]]]) Sort multiple or multi-dimensional arrays (bool)
array_pad(array input, int pad_size, mixed pad_value) Pad array to the specified length with a value (array)
array_pop(array &array) Pop the element off the end of array (mixed)
array_product(array array) Calculate the product of values in an array (number)
array_push(array &array, mixed var, [mixed ...]) Push one or more elements onto the end of array (int)
array_rand(array input, [int num_req]) Pick one or more random entries out of an array (mixed)
array_reduce(array input, callback function, [int initial]) Iteratively reduce the array to a single value using a callback function (mixed)
array_replace_recursive(array &array, array &array1, [array &array2, [array &...]]) Replaces elements from passed arrays into the first array recursively (array)
array_replace(array &array, array &array1, [array &array2, [array &...]]) Replaces elements from passed arrays into the first array (array)
array_reverse(array array, [bool preserve_keys]) Return an array with elements in reverse order (array)
array_search(mixed needle, array haystack, [bool strict]) Searches the array for a given value and returns the corresponding key if successful (mixed)
array_shift(array &array) Shift an element off the beginning of array (mixed)
array_slice(array array, int offset, [int length, [bool preserve_keys]]) Extract a slice of the array (array)
array_splice(array &input, int offset, [int length, [mixed replacement]]) Remove a portion of the array and replace it with something else (array)
array_sum(array array) Calculate the sum of values in an array (number)
array_udiff_assoc(array array1, array array2, [array  ...], callback data_compare_func) Computes the difference of arrays with additional index check, compares data by a callback function (array)
array_udiff_uassoc(array array1, array array2, [array  ...], callback data_compare_func, callback key_compare_func) Computes the difference of arrays with additional index check, compares data and indexes by a callback function (array)
array_udiff(array array1, array array2, [array  ...], callback data_compare_func) Computes the difference of arrays by using a callback function for data comparison (array)
array_uintersect_assoc(array array1, array array2, [array  ...], callback data_compare_func) Computes the intersection of arrays with additional index check, compares data by a callback function (array)
array_uintersect_uassoc(array array1, array array2, [array  ...], callback data_compare_func, callback key_compare_func) Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions (array)
array_uintersect(array array1, array array2, [array  ...], callback data_compare_func) Computes the intersection of arrays, compares data by a callback function (array)
array_unique(array array, [int sort_flags]) Removes duplicate values from an array (array)
array_unshift(array &array, mixed var, [mixed ...]) Prepend one or more elements to the beginning of an array (int)
array_values(array input) Return all the values of an array (array)
array_walk_recursive(array &input, callback funcname, [mixed userdata]) Apply a user function recursively to every member of an array (bool)
array_walk(array &array, callback funcname, [mixed userdata]) Apply a user function to every member of an array (bool)
array([mixed ...]) Create an array (array)
arsort(array &array, [int sort_flags]) Sort an array in reverse order and maintain index association (bool)
asort(array &array, [int sort_flags]) Sort an array and maintain index association (bool)
compact(mixed varname, [mixed ...]) Create array containing variables and their values (array)
count(mixed var, [int mode]) Count all elements in an array, or properties in an object (int)
current(array &array) Return the current element in an array (mixed)
each(array &array) Return the current key and value pair from an array and advance the array cursor (array)
end(array &array) Set the internal pointer of an array to its last element (mixed)
extract(array var_array, [int extract_type, [string prefix]]) Import variables into the current symbol table from an array (int)
in_array(mixed needle, array haystack, [bool strict]) Checks if a value exists in an array (bool)
key(array &array) Fetch a key from an array (mixed)
krsort(array &array, [int sort_flags]) Sort an array by key in reverse order (bool)
ksort(array &array, [int sort_flags]) Sort an array by key (bool)
list(mixed varname) Assign variables as if they were an array (null)
natcasesort(array &array) Sort an array using a case insensitive "natural order" algorithm (bool)
natsort(array &array) Sort an array using a "natural order" algorithm (bool)
next(array &array) Advance the internal array pointer of an array (mixed)
pos() Alias of current
prev(array &array) Rewind the internal array pointer (mixed)
range(mixed low, mixed high, [number step]) Create an array containing a range of elements (array)
reset(array &array) Set the internal pointer of an array to its first element (mixed)
rsort(array &array, [int sort_flags]) Sort an array in reverse order (bool)
shuffle(array &array) Shuffle an array (bool)
sizeof() Alias of count
sort(array &array, [int sort_flags]) Sort an array (bool)
uasort(array &array, callback cmp_function) Sort an array with a user-defined comparison function and maintain index association (bool)
uksort(array &array, callback cmp_function) Sort an array by keys using a user-defined comparison function (bool)
usort(array &array, callback cmp_function) Sort an array by values using a user-defined comparison function (bool)
bbcode_add_element(resource bbcode_container, string tag_name, array tag_rules) Adds a bbcode element (bool)
bbcode_add_smiley(resource bbcode_container, string smiley, string replace_by) Adds a smiley to the parser (bool)
bbcode_create([array bbcode_initial_tags]) Create a BBCode Resource (resource)
bbcode_destroy(resource bbcode_container) Close BBCode_container resource (bool)
bbcode_parse(resource bbcode_container, string to_parse) Parse a string following a given rule set (string)
bbcode_set_arg_parser(resource bbcode_container, resource bbcode_arg_parser) Attach another parser in order to use another rule set for argument parsing (bool)
bbcode_set_flags(resource bbcode_container, int flags, [int mode]) Set or alter parser options (bool)
bcadd(string left_operand, string right_operand, [int scale]) Add two arbitrary precision numbers (string)
bccomp(string left_operand, string right_operand, [int scale]) Compare two arbitrary precision numbers (int)
bcdiv(string left_operand, string right_operand, [int scale]) Divide two arbitrary precision numbers (string)
bcmod(string left_operand, string modulus) Get modulus of an arbitrary precision number (string)
bcmul(string left_operand, string right_operand, [int scale]) Multiply two arbitrary precision number (string)
bcpow(string left_operand, string right_operand, [int scale]) Raise an arbitrary precision number to another (string)
bcpowmod(string left_operand, string right_operand, string modulus, [int scale]) Raise an arbitrary precision number to another, reduced by a specified modulus (string)
bcscale(int scale) Set default scale parameter for all bc math functions (bool)
bcsqrt(string operand, [int scale]) Get the square root of an arbitrary precision number (string)
bcsub(string left_operand, string right_operand, [int scale]) Subtract one arbitrary precision number from another (string)
bcompiler_load_exe(string filename) Reads and creates classes from a bcompiler exe file (bool)
bcompiler_load(string filename) Reads and creates classes from a bz compressed file (bool)
bcompiler_parse_class(string class, string callback) Reads the bytecodes of a class and calls back to a user function (bool)
bcompiler_read(resource filehandle) Reads and creates classes from a filehandle (bool)
bcompiler_write_class(resource filehandle, string className, [string extends]) Writes an defined class as bytecodes (bool)
bcompiler_write_constant(resource filehandle, string constantName) Writes a defined constant as bytecodes (bool)
bcompiler_write_exe_footer(resource filehandle, int startpos) Writes the start pos, and sig to the end of a exe type file (bool)
bcompiler_write_file(resource filehandle, string filename) Writes a php source file as bytecodes (bool)
bcompiler_write_footer(resource filehandle) Writes the single character \x00 to indicate End of compiled data (bool)
bcompiler_write_function(resource filehandle, string functionName) Writes an defined function as bytecodes (bool)
bcompiler_write_functions_from_file(resource filehandle, string fileName) Writes all functions defined in a file as bytecodes (bool)
bcompiler_write_header(resource filehandle, [string write_ver]) Writes the bcompiler header (bool)
bcompiler_write_included_filename(resource filehandle, string filename) Writes an included file as bytecodes (bool)
bzclose(resource bz) Close a bzip2 file (int)
bzcompress(string source, [int blocksize, [int workfactor]]) Compress a string into bzip2 encoded data (mixed)
bzdecompress(string source, [int small]) Decompresses bzip2 encoded data (mixed)
bzerrno(resource bz) Returns a bzip2 error number (int)
bzerror(resource bz) Returns the bzip2 error number and error string in an array (array)
bzerrstr(resource bz) Returns a bzip2 error string (string)
bzflush(resource bz) Force a write of all buffered data (int)
bzopen(string filename, string mode) Opens a bzip2 compressed file (resource)
bzread(resource bz, [int length]) Binary safe bzip2 file read (string)
bzwrite(resource bz, string data, [int length]) Binary safe bzip2 file write (int)
cal_days_in_month(int calendar, int month, int year) Return the number of days in a month for a given year and calendar (int)
cal_from_jd(int jd, int calendar) Converts from Julian Day Count to a supported calendar (array)
cal_info([int calendar]) Returns information about a particular calendar (array)
cal_to_jd(int calendar, int month, int day, int year) Converts from a supported calendar to Julian Day Count (int)
easter_date([int year]) Get Unix timestamp for midnight on Easter of a given year (int)
easter_days([int year, [int method]]) Get number of days after March 21 on which Easter falls for a given year (int)
frenchtojd(int month, int day, int year) Converts a date from the French Republican Calendar to a Julian Day Count (int)
gregoriantojd(int month, int day, int year) Converts a Gregorian date to Julian Day Count (int)
jddayofweek(int julianday, [int mode]) Returns the day of the week (mixed)
jdmonthname(int julianday, int mode) Returns a month name (string)
jdtofrench(int juliandaycount) Converts a Julian Day Count to the French Republican Calendar (string)
jdtogregorian(int julianday) Converts Julian Day Count to Gregorian date (string)
jdtojewish(int juliandaycount, [bool hebrew, [int fl]]) Converts a Julian day count to a Jewish calendar date (string)
jdtojulian(int julianday) Converts a Julian Day Count to a Julian Calendar Date (string)
jdtounix(int jday) Convert Julian Day to Unix timestamp (int)
jewishtojd(int month, int day, int year) Converts a date in the Jewish Calendar to Julian Day Count (int)
juliantojd(int month, int day, int year) Converts a Julian Calendar date to Julian Day Count (int)
unixtojd([int timestamp]) Convert Unix timestamp to Julian Day (int)
classkit_import(string filename) Import new class method definitions from a file (array)
classkit_method_add(string classname, string methodname, string args, string code, [int flags]) Dynamically adds a new method to a given class (bool)
classkit_method_copy(string dClass, string dMethod, string sClass, [string sMethod]) Copies a method from class to another (bool)
classkit_method_redefine(string classname, string methodname, string args, string code, [int flags]) Dynamically changes the code of the given method (bool)
classkit_method_remove(string classname, string methodname) Dynamically removes the given method (bool)
classkit_method_rename(string classname, string methodname, string newname) Dynamically changes the name of the given method (bool)
call_user_method_array(string method_name, object &obj, array params) Call a user method given with an array of parameters [deprecated] (mixed)
call_user_method(string method_name, object &obj, [mixed parameter, [mixed ...]]) Call a user method on an specific object [deprecated] (mixed)
class_alias([string original, [string alias]]) Creates an alias for a class (boolean)
class_exists(string class_name, [bool autoload]) Checks if the class has been defined (bool)
get_called_class() the "Late Static Binding" class name (string)
get_class_methods(mixed class_name) Gets the class methods' names (array)
get_class_vars(string class_name) Get the default properties of the class (array)
get_class([object object]) Returns the name of the class of an object (string)
get_declared_classes() Returns an array with the name of the defined classes (array)
get_declared_interfaces() Returns an array of all declared interfaces (array)
get_object_vars(object object) Gets the properties of the given object (array)
get_parent_class([mixed object]) Retrieves the parent class name for object or class (string)
interface_exists(string interface_name, [bool autoload]) Checks if the interface has been defined (bool)
is_a(object object, string class_name) Checks if the object is of this class or has this class as one of its parents (bool)
is_subclass_of(mixed object, string class_name) Checks if the object has this class as one of its parents (bool)
method_exists(mixed object, string method_name) Checks if the class method exists (bool)
property_exists(mixed class, string property) Checks if the object or class has a property (bool)
com_addref() Increases the components reference counter [deprecated] (null)
com_create_guid() Generate a globally unique identifier (GUID) (string)
com_event_sink(variant comobject, object sinkobject, [mixed sinkinterface]) Connect events from a COM object to a PHP object (bool)
com_get_active_object(string progid, [int code_page]) Returns a handle to an already running instance of a COM object (variant)
com_get() Gets the value of a COM Component's property [deprecated]
com_isenum(variant com_module) Indicates if a COM object has an IEnumVariant interface for iteration [deprecated] (bool)
com_load_typelib(string typelib_name, [bool case_insensitive]) Loads a Typelib (bool)
com_load() Creates a new reference to a COM component [deprecated]
com_message_pump([int timeoutms]) Process COM messages, sleeping for up to timeoutms milliseconds (bool)
com_print_typeinfo(object comobject, [string dispinterface, [bool wantsink]]) Print out a PHP class definition for a dispatchable interface (bool)
com_propget() Alias of com_get
com_propput() Alias of com_set
com_propset() Alias of com_set
com_release() Decreases the components reference counter [deprecated] (null)
com_set() Assigns a value to a COM component's property
variant_abs(mixed val) Returns the absolute value of a variant (mixed)
variant_add(mixed left, mixed right) "Adds" two variant values together and returns the result (mixed)
variant_and(mixed left, mixed right) Performs a bitwise AND operation between two variants (mixed)
variant_cast(variant variant, int type) Convert a variant into a new variant object of another type (variant)
variant_cat(mixed left, mixed right) concatenates two variant values together and returns the result (mixed)
variant_cmp(mixed left, mixed right, [int lcid, [int flags]]) Compares two variants (int)
variant_date_from_timestamp(int timestamp) Returns a variant date representation of a Unix timestamp (variant)
variant_date_to_timestamp(variant variant) Converts a variant date/time value to Unix timestamp (int)
variant_div(mixed left, mixed right) Returns the result from dividing two variants (mixed)
variant_eqv(mixed left, mixed right) Performs a bitwise equivalence on two variants (mixed)
variant_fix(mixed variant) Returns the integer portion of a variant (mixed)
variant_get_type(variant variant) Returns the type of a variant object (int)
variant_idiv(mixed left, mixed right) Converts variants to integers and then returns the result from dividing them (mixed)
variant_imp(mixed left, mixed right) Performs a bitwise implication on two variants (mixed)
variant_int(mixed variant) Returns the integer portion of a variant (mixed)
variant_mod(mixed left, mixed right) Divides two variants and returns only the remainder (mixed)
variant_mul(mixed left, mixed right) Multiplies the values of the two variants (mixed)
variant_neg(mixed variant) Performs logical negation on a variant (mixed)
variant_not(mixed variant) Performs bitwise not negation on a variant (mixed)
variant_or(mixed left, mixed right) Performs a logical disjunction on two variants (mixed)
variant_pow(mixed left, mixed right) Returns the result of performing the power function with two variants (mixed)
variant_round(mixed variant, int decimals) Rounds a variant to the specified number of decimal places (mixed)
variant_set_type(variant variant, int type) Convert a variant into another type "in-place" (null)
variant_set(variant variant, mixed value) Assigns a new value for a variant object (null)
variant_sub(mixed left, mixed right) Subtracts the value of the right variant from the left variant value (mixed)
variant_xor(mixed left, mixed right) Performs a logical exclusion on two variants (mixed)
crack_check(resource dictionary, string password) Performs an obscure check with the given password (bool)
crack_check(string password) Performs an obscure check with the given password (bool)
crack_closedict([resource dictionary]) Closes an open CrackLib dictionary (bool)
crack_getlastmessage() Returns the message from the last obscure check (string)
crack_opendict(string dictionary) Opens a new CrackLib dictionary (resource)
ctype_alnum(string text) Check for alphanumeric character(s) (bool)
ctype_alpha(string text) Check for alphabetic character(s) (bool)
ctype_cntrl(string text) Check for control character(s) (bool)
ctype_digit(string text) Check for numeric character(s) (bool)
ctype_graph(string text) Check for any printable character(s) except space (bool)
ctype_lower(string text) Check for lowercase character(s) (bool)
ctype_print(string text) Check for printable character(s) (bool)
ctype_punct(string text) Check for any printable character which is not whitespace or an alphanumeric character (bool)
ctype_space(string text) Check for whitespace character(s) (bool)
ctype_upper(string text) Check for uppercase character(s) (bool)
ctype_xdigit(string text) Check for character(s) representing a hexadecimal digit (bool)
curl_close(resource ch) Close a cURL session (null)
curl_copy_handle(resource ch) Copy a cURL handle along with all of its preferences (resource)
curl_errno(resource ch) Return the last error number (int)
curl_error(resource ch) Return a string containing the last error for the current session (string)
curl_exec(resource ch) Perform a cURL session (mixed)
curl_getinfo(resource ch, [int opt]) Get information regarding a specific transfer (mixed)
curl_init([string url]) Initialize a cURL session (resource)
curl_multi_add_handle(resource mh, resource ch) Add a normal cURL handle to a cURL multi handle (int)
curl_multi_close(resource mh) Close a set of cURL handles (null)
curl_multi_exec(resource mh, int &still_running) Run the sub-connections of the current cURL handle (int)
curl_multi_getcontent(resource ch) Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set (string)
curl_multi_info_read(resource mh, [int &msgs_in_queue]) Get information about the current transfers (array)
curl_multi_init() Returns a new cURL multi handle (resource)
curl_multi_remove_handle(resource mh, resource ch) Remove a multi handle from a set of cURL handles (int)
curl_multi_select(resource mh, [float timeout]) Wait for activity on any curl_multi connection (int)
curl_setopt_array(resource ch, array options) Set multiple options for a cURL transfer (bool)
curl_setopt(resource ch, int option, mixed value) Set an option for a cURL transfer (bool)
curl_version([int age]) Gets cURL version information (array)
cyrus_authenticate(resource connection, [string mechlist, [string service, [string user, [int minssf, [int maxssf, [string authname, [string password]]]]]]]) Authenticate against a Cyrus IMAP server (null)
cyrus_bind(resource connection, array callbacks) Bind callbacks to a Cyrus IMAP connection (bool)
cyrus_close(resource connection) Close connection to a Cyrus IMAP server (bool)
cyrus_connect([string host, [string port, [int flags]]]) Connect to a Cyrus IMAP server (resource)
cyrus_query(resource connection, string query) Send a query to a Cyrus IMAP server (array)
cyrus_unbind(resource connection, string trigger_name) Unbind ... (bool)
DateInterval(string interval_spec) Creates new DateInterval object (new)
>createFromDateString(string time) Sets up a DateInterval from the relative parts of the string (DateInterval: DateInterval)
>format(string format) Formats the interval (DateInterval: string)
DatePeriod(DateTime start, DateInterval interval, int recurrences, [int options]) Creates new DatePeriod object (new)
DatePeriod(DateTime start, DateInterval interval, DateTime end, [int options]) Creates new DatePeriod object (new)
DatePeriod(string isostr, [int options]) Creates new DatePeriod object (new)
>add(string interval) Adds an amount of days, months, years, hours, minutes and seconds to a DateTime object (DateTime: DateTime)
date_add(DateTime object, DateInterval interval) Adds an amount of days, months, years, hours, minutes and seconds to a DateTime object (DateTime)
DateTime([string time, [DateTimeZone timezone]]) Returns new DateTime object (new)
>createFromFormat(string format, string time, [DateTimeZone timezone]) Returns new DateTime object formatted according to the specified format (DateTime: DateTime)
>diff(DateTime datetime, [bool absolute]) Returns the difference between two DateTime objects (DateTime: DateInterval)
>format(string format) Returns date formatted according to given format (DateTime: string)
date_format(DateTime object, string format) Returns date formatted according to given format (string)
>getLastErrors() Returns the warnings and errors (DateTime: array)
>getOffset() Returns the daylight saving time offset (DateTime: int)
date_offset_get(DateTime object) Returns the daylight saving time offset (int)
>getTimestamp() Gets the Unix timestamp (DateTime: int)
>getTimezone() Return time zone relative to given DateTime (DateTime: DateTimeZone)
date_timezone_get(DateTime object) Return time zone relative to given DateTime (DateTimeZone)
>modify(string modify) Alters the timestamp (DateTime: DateTime)
date_modify(DateTime object, string modify) Alters the timestamp (DateTime)
>__set_state(array array) The __set_state handler (DateTime: DateTime)
>setDate(int year, int month, int day) Sets the date (DateTime: DateTime)
date_date_set(DateTime object, int year, int month, int day) Sets the date (DateTime)
>setISODate(int year, int week, [int day]) Sets the ISO date (DateTime: DateTime)
date_isodate_set(DateTime object, int year, int week, [int day]) Sets the ISO date (DateTime)
>setTime(int hour, int minute, [int second]) Sets the time (DateTime: DateTime)
date_time_set(DateTime object, int hour, int minute, [int second]) Sets the time (DateTime)
>setTimestamp(int unixtimestamp) Sets the date and time based on an Unix timestamp (DateTime: DateTime)
>setTimezone(DateTimeZone timezone) Sets the time zone for the DateTime object (DateTime: DateTime)
date_timezone_set(DateTime object, DateTimeZone timezone) Sets the time zone for the DateTime object (DateTime)
>sub(DateInterval interval) Subtracts an amount of days, months, years, hours, minutes and seconds from a DateTime object (DateTime: DateTime)
date_sub(DateTime object, DateInterval interval) Subtracts an amount of days, months, years, hours, minutes and seconds from a DateTime object (DateTime)
>__wakeup() The __wakeup handler (DateTime: DateTime)
DateTimeZone(string timezone) Creates new DateTimeZone object (new)
>getLocation() Returns location information for a timezone (DateTimeZone: array)
>getName() Returns the name of the timezone (DateTimeZone: string)
>getOffset(DateTime datetime) Returns the timezone offset from GMT (DateTimeZone: int)
timezone_offset_get(DateTimeZone object, DateTime datetime) Returns the timezone offset from GMT (int)
>getTransitions([int timestamp_begin, [int timestamp_end]]) Returns all transitions for the timezone (DateTimeZone: array)
timezone_transitions_get(DateTimeZone object, [int timestamp_begin, [int timestamp_end]]) Returns all transitions for the timezone (array)
>listAbbreviations() Returns associative array containing dst, offset and the timezone name (DateTimeZone: array)
timezone_abbreviations_list() Returns associative array containing dst, offset and the timezone name (array)
>listIdentifiers([int what, [string country]]) Returns numerically index array with all timezone identifiers (DateTimeZone: array)
timezone_identifiers_list([int what, [string country]]) Returns numerically index array with all timezone identifiers (array)
checkdate(int month, int day, int year) Validate a Gregorian date (bool)
date_add() Alias of DateTime::add
date_create_from_format() Alias of DateTime::createFromFormat
date_create([string time, [DateTimeZone timezone]]) Returns new DateTime object (DateTime)
date_date_set() Alias of DateTime::setDate
date_default_timezone_get() Gets the default timezone used by all date/time functions in a script (string)
date_default_timezone_set(string timezone_identifier) Sets the default timezone used by all date/time functions in a script (bool)
date_diff() Alias of DateTime::diff
date_format() Alias of DateTime::format
date_get_last_errors() Alias of DateTime::getLastErrors
date_interval_create_from_date_string() Alias of DateInterval::createFromDateString
date_interval_format() Alias of DateInterval::format
date_isodate_set() Alias of DateTime::setISODate
date_modify() Alias of DateTime::modify
date_offset_get() Alias of DateTime::getOffset
date_parse_from_format(string format, string date) Get info about given date (array)
date_parse(string date) Returns associative array with detailed info about given date (array)
date_sub() Alias of DateTime::sub
date_sun_info(int time, float latitude, float longitude) Returns an array with information about sunset/sunrise and twilight begin/end (array)
date_sunrise(int timestamp, [int format, [float latitude, [float longitude, [float zenith, [float gmt_offset]]]]]) Returns time of sunrise for a given day and location (mixed)
date_sunset(int timestamp, [int format, [float latitude, [float longitude, [float zenith, [float gmt_offset]]]]]) Returns time of sunset for a given day and location (mixed)
date_time_set() Alias of DateTime::setTime
date_timestamp_get() Alias of DateTime::getTimestamp
date_timestamp_set() Alias of DateTime::setTimestamp
date_timezone_get() Alias of DateTime::getTimezone
date_timezone_set() Alias of DateTime::setTimezone
date(string format, [int timestamp]) Format a local time/date (string)
getdate([int timestamp]) Get date/time information (array)
gettimeofday([bool return_float]) Get current time (mixed)
gmdate(string format, [int timestamp]) Format a GMT/UTC date/time (string)
gmmktime([int hour, [int minute, [int second, [int month, [int day, [int year, [int is_dst]]]]]]]) Get Unix timestamp for a GMT date (int)
gmstrftime(string format, [int timestamp]) Format a GMT/UTC time/date according to locale settings (string)
idate(string format, [int timestamp]) Format a local time/date as integer (int)
localtime([int timestamp, [bool is_associative]]) Get the local time (array)
microtime([bool get_as_float]) Return current Unix timestamp with microseconds (mixed)
mktime([int hour, [int minute, [int second, [int month, [int day, [int year, [int is_dst]]]]]]]) Get Unix timestamp for a date (int)
strftime(string format, [int timestamp]) Format a local time/date according to locale settings (string)
strptime(string date, string format) Parse a time/date generated with strftime (array)
strtotime(string time, [int now]) Parse about any English textual datetime description into a Unix timestamp (int)
time() Return current Unix timestamp (int)
timezone_abbreviations_list() Alias of DateTimeZone::listAbbreviations
timezone_identifiers_list() Alias of DateTimeZone::listIdentifiers
timezone_location_get() Alias of DateTimeZone::getLocation
timezone_name_from_abbr(string abbr, [int gmtOffset, [int isdst]]) Returns the timezone name from abbreviation (string)
timezone_name_get() Alias of DateTimeZone::getName
timezone_offset_get() Alias of DateTimeZone::getOffset
timezone_open(string timezone) Returns new DateTimeZone object (DateTimeZone)
DateTimeZone(string timezone) Returns new DateTimeZone object (new)
timezone_transitions_get() Alias of DateTimeZone::getTransitions
timezone_version_get() Gets the version of the timezonedb (string)
dba_close(resource handle) Close a DBA database (null)
dba_delete(string key, resource handle) Delete DBA entry specified by key (bool)
dba_exists(string key, resource handle) Check whether key exists (bool)
dba_fetch(string key, resource handle) Fetch data specified by key (string)
dba_fetch(string key, int skip, resource handle) Fetch data specified by key (string)
dba_firstkey(resource handle) Fetch first key (string)
dba_handlers([bool full_info]) List all the handlers available (array)
dba_insert(string key, string value, resource handle) Insert entry (bool)
dba_key_split(mixed key) Splits a key in string representation into array representation (mixed)
dba_list() List all open database files (array)
dba_nextkey(resource handle) Fetch next key (string)
dba_open(string path, string mode, [string handler, [mixed ...]]) Open database (resource)
dba_optimize(resource handle) Optimize database (bool)
dba_popen(string path, string mode, [string handler, [mixed ...]]) Open database persistently (resource)
dba_replace(string key, string value, resource handle) Replace or insert entry (bool)
dba_sync(resource handle) Synchronize database (bool)
dbase_add_record(int dbase_identifier, array record) Adds a record to a database (bool)
dbase_close(int dbase_identifier) Closes a database (bool)
dbase_create(string filename, array fields) Creates a database (int)
dbase_delete_record(int dbase_identifier, int record_number) Deletes a record from a database (bool)
dbase_get_header_info(int dbase_identifier) Gets the header info of a database (array)
dbase_get_record_with_names(int dbase_identifier, int record_number) Gets a record from a database as an associative array (array)
dbase_get_record(int dbase_identifier, int record_number) Gets a record from a database as an indexed array (array)
dbase_numfields(int dbase_identifier) Gets the number of fields of a database (int)
dbase_numrecords(int dbase_identifier) Gets the number of records in a database (int)
dbase_open(string filename, int mode) Opens a database (int)
dbase_pack(int dbase_identifier) Packs a database (bool)
dbase_replace_record(int dbase_identifier, array record, int record_number) Replaces a record in a database (bool)
dbplus_add(resource relation, array tuple) Add a tuple to a relation (int)
dbplus_aql(string query, [string server, [string dbpath]]) Perform AQL query (resource)
dbplus_chdir([string newdir]) Get/Set database virtual current directory (string)
dbplus_close(resource relation) Close a relation (mixed)
dbplus_curr(resource relation, array &tuple) Get current tuple from relation (int)
dbplus_errcode([int errno]) Get error string for given errorcode or last error (string)
dbplus_errno() Get error code for last operation (int)
dbplus_find(resource relation, array constraints, mixed tuple) Set a constraint on a relation (int)
dbplus_first(resource relation, array &tuple) Get first tuple from relation (int)
dbplus_flush(resource relation) Flush all changes made on a relation (int)
dbplus_freealllocks() Free all locks held by this client (int)
dbplus_freelock(resource relation, string tuple) Release write lock on tuple (int)
dbplus_freerlocks(resource relation) Free all tuple locks on given relation (int)
dbplus_getlock(resource relation, string tuple) Get a write lock on a tuple (int)
dbplus_getunique(resource relation, int uniqueid) Get an id number unique to a relation (int)
dbplus_info(resource relation, string key, array &result) Get information about a relation (int)
dbplus_last(resource relation, array &tuple) Get last tuple from relation (int)
dbplus_lockrel(resource relation) Request write lock on relation (int)
dbplus_next(resource relation, array &tuple) Get next tuple from relation (int)
dbplus_open(string name) Open relation file (resource)
dbplus_prev(resource relation, array &tuple) Get previous tuple from relation (int)
dbplus_rchperm(resource relation, int mask, string user, string group) Change relation permissions (int)
dbplus_rcreate(string name, mixed domlist, [bool overwrite]) Creates a new DB++ relation (resource)
dbplus_rcrtexact(string name, resource relation, [bool overwrite]) Creates an exact but empty copy of a relation including indices (mixed)
dbplus_rcrtlike(string name, resource relation, [int overwrite]) Creates an empty copy of a relation with default indices (mixed)
dbplus_resolve(string relation_name) Resolve host information for relation (array)
dbplus_restorepos(resource relation, array tuple) Restore position (int)
dbplus_rkeys(resource relation, mixed domlist) Specify new primary key for a relation (mixed)
dbplus_ropen(string name) Open relation file local (resource)
dbplus_rquery(string query, [string dbpath]) Perform local (raw) AQL query (resource)
dbplus_rrename(resource relation, string name) Rename a relation (int)
dbplus_rsecindex(resource relation, mixed domlist, int type) Create a new secondary index for a relation (mixed)
dbplus_runlink(resource relation) Remove relation from filesystem (int)
dbplus_rzap(resource relation) Remove all tuples from relation (int)
dbplus_savepos(resource relation) Save position (int)
dbplus_setindex(resource relation, string idx_name) Set index (int)
dbplus_setindexbynumber(resource relation, int idx_number) Set index by number (int)
dbplus_sql(string query, [string server, [string dbpath]]) Perform SQL query (resource)
dbplus_tcl(int sid, string script) Execute TCL code on server side (string)
dbplus_tremove(resource relation, array tuple, [array &current]) Remove tuple and return new current tuple (int)
dbplus_undo(resource relation) Undo (int)
dbplus_undoprepare(resource relation) Prepare undo (int)
dbplus_unlockrel(resource relation) Give up write lock on relation (int)
dbplus_unselect(resource relation) Remove a constraint from relation (int)
dbplus_update(resource relation, array old, array new) Update specified tuple in relation (int)
dbplus_xlockrel(resource relation) Request exclusive lock on relation (int)
dbplus_xunlockrel(resource relation) Free exclusive lock on relation (int)
dbx_close(object link_identifier) Close an open connection/database (int)
dbx_compare(array row_a, array row_b, string column_key, [int flags]) Compare two rows for sorting purposes (int)
dbx_connect(mixed module, string host, string database, string username, string password, [int persistent]) Open a connection/database (object)
dbx_error(object link_identifier) Report the error message of the latest function call in the module (string)
dbx_escape_string(object link_identifier, string text) Escape a string so it can safely be used in an sql-statement (string)
dbx_fetch_row(object result_identifier) Fetches rows from a query-result that had the DBX_RESULT_UNBUFFERED flag set (mixed)
dbx_query(object link_identifier, string sql_statement, [int flags]) Send a query and fetch all results (if any) (mixed)
dbx_sort(object result, string user_compare_function) Sort a result from a dbx_query by a custom sort function (bool)
dio_close(resource fd) Closes the file descriptor given by fd (null)
dio_fcntl(resource fd, int cmd, [mixed args]) Performs a c library fcntl on fd (mixed)
dio_open(string filename, int flags, [int mode]) Opens a new filename with specified permissions of flags and creation permissions of mode (resource)
dio_read(resource fd, [int len]) Reads bytes from a file descriptor (string)
dio_seek(resource fd, int pos, [int whence]) Seeks to pos on fd from whence (int)
dio_stat(resource fd) Gets stat information about the file descriptor fd (array)
dio_tcsetattr(resource fd, array options) Sets terminal attributes and baud rate for a serial port (bool)
dio_truncate(resource fd, int offset) Truncates file descriptor fd to offset bytes (bool)
dio_write(resource fd, string data, [int len]) Writes data to fd with optional truncation at length (int)
chdir(string directory) Change directory (bool)
chroot(string directory) Change the root directory (bool)
>read() Return an instance of the Directory class (Directory: string)
>rewind() Return an instance of the Directory class (Directory: null)
>close() Return an instance of the Directory class (Directory: null)
>path
>handle
closedir([resource dir_handle]) Close directory handle (null)
getcwd() Gets the current working directory (string)
opendir(string path, [resource context]) Open directory handle (resource)
readdir([resource dir_handle]) Read entry from directory handle (string)
rewinddir([resource dir_handle]) Rewind directory handle (null)
scandir(string directory, [int sorting_order, [resource context]]) List files and directories inside the specified path (array)
DOMAttr(string name, [string value]) Creates a new DOMAttr object (new)
>isId() Checks if attribute is a defined ID (DOMAttr: bool)
>appendData(string data) Append the string to the end of the character data of the node (DOMCharacterData: null)
>deleteData(int offset, int count) Remove a range of characters from the node (DOMCharacterData: null)
>insertData(int offset, string data) Insert a string at the specified 16-bit unit offset (DOMCharacterData: null)
>replaceData(int offset, int count, string data) Replace a substring within the DOMCharacterData node (DOMCharacterData: null)
>substringData(int offset, int count) Extracts a range of data from the node (DOMCharacterData: string)
DOMComment([string value]) Creates a new DOMComment object (new)
DOMDocument([string version, [string encoding]]) Creates a new DOMDocument object (new)
>createAttribute(string name) Create new attribute (DOMDocument: DOMAttr)
>createAttributeNS(string namespaceURI, string qualifiedName) Create new attribute node with an associated namespace (DOMDocument: DOMAttr)
>createCDATASection(string data) Create new cdata node (DOMDocument: DOMCDATASection)
>createComment(string data) Create new comment node (DOMDocument: DOMComment)
>createDocumentFragment() Create new document fragment (DOMDocument: DOMDocumentFragment)
>createElement(string name, [string value]) Create new element node (DOMDocument: DOMElement)
>createElementNS(string namespaceURI, string qualifiedName, [string value]) Create new element node with an associated namespace (DOMDocument: DOMElement)
>createEntityReference(string name) Create new entity reference node (DOMDocument: DOMEntityReference)
>createProcessingInstruction(string target, [string data]) Creates new PI node (DOMDocument: DOMProcessingInstruction)
>createTextNode(string content) Create new text node (DOMDocument: DOMText)
>getElementById(string elementId) Searches for an element with a certain id (DOMDocument: DOMElement)
>getElementsByTagName(string name) Searches for all elements with given tag name (DOMDocument: DOMNodeList)
>getElementsByTagNameNS(string namespaceURI, string localName) Searches for all elements with given tag name in specified namespace (DOMDocument: DOMNodeList)
>importNode(DOMNode importedNode, [bool deep]) Import node into current document (DOMDocument: DOMNode)
>load(string filename, [int options]) Load XML from a file (DOMDocument: mixed)
>loadHTML(string source) Load HTML from a string (DOMDocument: bool)
>loadHTMLFile(string filename) Load HTML from a file (DOMDocument: bool)
>loadXML(string source, [int options]) Load XML from a string (DOMDocument: mixed)
>normalizeDocument() Normalizes the document (DOMDocument: null)
>registerNodeClass(string baseclass, string extendedclass) Register extended class used to create base node type (DOMDocument: bool)
>relaxNGValidate(string filename) Performs relaxNG validation on the document (DOMDocument: bool)
>relaxNGValidateSource(string source) Performs relaxNG validation on the document (DOMDocument: bool)
>save(string filename, [int options]) Dumps the internal XML tree back into a file (DOMDocument: int)
>saveHTML() Dumps the internal document into a string using HTML formatting (DOMDocument: string)
>saveHTMLFile(string filename) Dumps the internal document into a file using HTML formatting (DOMDocument: int)
>saveXML([DOMNode node, [int options]]) Dumps the internal XML tree back into a string (DOMDocument: string)
>schemaValidate(string filename) Validates a document based on a schema (DOMDocument: bool)
>schemaValidateSource(string source) Validates a document based on a schema (DOMDocument: bool)
>validate() Validates the document based on its DTD (DOMDocument: bool)
>xinclude([int options]) Substitutes XIncludes in a DOMDocument Object (DOMDocument: int)
>appendXML(string data) Append raw XML data (DOMDocumentFragment: bool)
DOMElement(string name, [string value, [string namespaceURI]]) Creates a new DOMElement object (new)
>getAttribute(string name) Returns value of attribute (DOMElement: string)
>getAttributeNode(string name) Returns attribute node (DOMElement: DOMAttr)
>getAttributeNodeNS(string namespaceURI, string localName) Returns attribute node (DOMElement: DOMAttr)
>getAttributeNS(string namespaceURI, string localName) Returns value of attribute (DOMElement: string)
>getElementsByTagName(string name) Gets elements by tagname (DOMElement: DOMNodeList)
>getElementsByTagNameNS(string namespaceURI, string localName) Get elements by namespaceURI and localName (DOMElement: DOMNodeList)
>hasAttribute(string name) Checks to see if attribute exists (DOMElement: bool)
>hasAttributeNS(string namespaceURI, string localName) Checks to see if attribute exists (DOMElement: bool)
>removeAttribute(string name) Removes attribute (DOMElement: bool)
>removeAttributeNode(DOMAttr oldnode) Removes attribute (DOMElement: bool)
>removeAttributeNS(string namespaceURI, string localName) Removes attribute (DOMElement: bool)
>setAttribute(string name, string value) Adds new attribute (DOMElement: DOMAttr)
>setAttributeNode(DOMAttr attr) Adds new attribute node to element (DOMElement: DOMAttr)
>setAttributeNodeNS(DOMAttr attr) Adds new attribute node to element (DOMElement: DOMAttr)
>setAttributeNS(string namespaceURI, string qualifiedName, string value) Adds new attribute (DOMElement: null)
>setIdAttribute(string name, bool isId) Declares the attribute specified by name to be of type ID (DOMElement: null)
>setIdAttributeNode(DOMAttr attr, bool isId) Declares the attribute specified by node to be of type ID (DOMElement: null)
>setIdAttributeNS(string namespaceURI, string localName, bool isId) Declares the attribute specified by local name and namespace URI to be of type ID (DOMElement: null)
DOMEntityReference(string name) Creates a new DOMEntityReference object (new)
DOMImplementation() Creates a new DOMImplementation object (new)
>createDocument([string namespaceURI, [string qualifiedName, [DOMDocumentType doctype]]]) Creates a DOMDocument object of the specified type with its document element (DOMImplementation: DOMDocument)
>createDocumentType([string qualifiedName, [string publicId, [string systemId]]]) Creates an empty DOMDocumentType object (DOMImplementation: DOMDocumentType)
>hasFeature(string feature, string version) Test if the DOM implementation implements a specific feature (DOMImplementation: bool)
>getNamedItem(string name) Retrieves a node specified by name (DOMNamedNodeMap: DOMNode)
>getNamedItemNS(string namespaceURI, string localName) Retrieves a node specified by local name and namespace URI (DOMNamedNodeMap: DOMNode)
>item(int index) Retrieves a node specified by index (DOMNamedNodeMap: DOMNode)
>appendChild(DOMNode newnode) Adds new child at the end of the children (DOMNode: DOMNode)
>cloneNode([bool deep]) Clones a node (DOMNode: DOMNode)
>getLineNo() Get line number for a node (DOMNode: int)
>hasAttributes() Checks if node has attributes (DOMNode: bool)
>hasChildNodes() Checks if node has children (DOMNode: bool)
>insertBefore(DOMNode newnode, [DOMNode refnode]) Adds a new child before a reference node (DOMNode: DOMNode)
>isDefaultNamespace(string namespaceURI) Checks if the specified namespaceURI is the default namespace or not (DOMNode: bool)
>isSameNode(DOMNode node) Indicates if two nodes are the same node (DOMNode: bool)
>isSupported(string feature, string version) Checks if feature is supported for specified version (DOMNode: bool)
>lookupNamespaceURI(string prefix) Gets the namespace URI of the node based on the prefix (DOMNode: string)
>lookupPrefix(string namespaceURI) Gets the namespace prefix of the node based on the namespace URI (DOMNode: string)
>normalize() Normalizes the node (DOMNode: null)
>removeChild(DOMNode oldnode) Removes child from list of children (DOMNode: DOMNode)
>replaceChild(DOMNode newnode, DOMNode oldnode) Replaces a child (DOMNode: DOMNode)
>item(int index) Retrieves a node specified by index (DOMNodelist: DOMNode)
DOMProcessingInstruction(string name, [string value]) Creates a new DOMProcessingInstruction object (new)
DOMText([string value]) Creates a new DOMText object (new)
>isWhitespaceInElementContent() Indicates whether this text node contains whitespace (DOMText: bool)
>splitText(int offset) Breaks this node into two nodes at the specified offset (DOMText: DOMText)
DOMXPath(DOMDocument doc) Creates a new DOMXPath object (new)
>evaluate(string expression, [DOMNode contextnode]) Evaluates the given XPath expression and returns a typed result if possible. (DOMXPath: mixed)
>query(string expression, [DOMNode contextnode]) Evaluates the given XPath expression (DOMXPath: DOMNodeList)
>registerNamespace(string prefix, string namespaceURI) Registers the namespace with the DOMXPath object (DOMXPath: bool)
dom_import_simplexml(SimpleXMLElement node) Gets a DOMElement object from a SimpleXMLElement object (DOMElement)
>name() Returns the name of attribute (DomAttribute: string)
>set_value(string content) Sets the value of an attribute (DomAttribute: bool)
>specified() Checks if attribute is specified (DomAttribute: bool)
>value() Returns value of attribute (DomAttribute: string)
>entities() Returns list of entities (DomDocumentType: array)
>internal_subset() Returns internal subset (DomDocumentType: bool)
>name() Returns name of document type (DomDocumentType: string)
>notations() Returns list of notations (DomDocumentType: array)
>public_id() Returns public id of document type (DomDocumentType: string)
>system_id() Returns the system id of document type (DomDocumentType: string)
>get_attribute_node(string name) Returns the node of the given attribute (DomElement: DomAttribute)
>get_attribute(string name) Returns the value of the given attribute (DomElement: string)
>get_elements_by_tagname(string name) Gets elements by tagname (DomElement: array)
>has_attribute(string name) Checks to see if an attribute exists in the current node (DomElement: bool)
>remove_attribute(string name) Removes attribute (DomElement: bool)
>set_attribute_node(DomNode attr) Adds new attribute (DomElement: DomNode)
>set_attribute(string name, string value) Sets the value of an attribute (DomElement: DomAttribute)
>tagname() Returns the name of the current element (DomElement: string)
>add_namespace(string uri, string prefix) Adds a namespace declaration to a node (DOMNode: bool)
>append_child(DOMNode newnode) Adds a new child at the end of the children (DOMNode: DOMNode)
>data() Returns the data of ProcessingInstruction node (DomProcessingInstruction: string)
>target() Returns the target of a ProcessingInstruction node (DomProcessingInstruction: string)
>process(DomDocument xml_doc, [array xslt_params, [bool is_xpath_param, [string profile_filename]]]) Applies the XSLT-Transformation on a DomDocument Object (DomXsltStylesheet: DomDocument)
>result_dump_file(DomDocument xmldoc, string filename) Dumps the result from a XSLT-Transformation into a file (DomXsltStylesheet: string)
>result_dump_mem(DomDocument xmldoc) Dumps the result from a XSLT-Transformation back into a string (DomXsltStylesheet: string)
domxml_new_doc(string version) Creates new empty XML document (DomDocument)
domxml_open_file(string filename, [int mode, [array &error]]) Creates a DOM object from an XML file (DomDocument)
domxml_open_mem(string str, [int mode, [array &error]]) Creates a DOM object of an XML document (DomDocument)
domxml_version() Gets the XML library version (string)
domxml_xmltree(string str) Creates a tree of PHP objects from an XML document (DomDocument)
domxml_xslt_stylesheet_doc(DomDocument xsl_doc) Creates a DomXsltStylesheet Object from a DomDocument Object (DomXsltStylesheet)
domxml_xslt_stylesheet_file(string xsl_file) Creates a DomXsltStylesheet Object from an XSL document in a file (DomXsltStylesheet)
domxml_xslt_stylesheet(string xsl_buf) Creates a DomXsltStylesheet object from an XSL document in a string (DomXsltStylesheet)
domxml_xslt_version() Gets the XSLT library version (int)
xpath_new_context(domdocument dom_document) Creates new xpath context (XPathContext)
xpath_register_ns_auto(XPathContext xpath_context, [object context_node]) Register the given namespace in the passed XPath context (bool)
xpath_register_ns(XPathContext xpath_context, string prefix, string uri) Register the given namespace in the passed XPath context (bool)
xptr_new_context() Create new XPath Context (XPathContext)
dotnet_load(string assembly_name, [string datatype_name, [int codepage]]) Loads a DOTNET module (int)
enchant_broker_describe(resource broker) Enumerates the Enchant providers (array)
enchant_broker_dict_exists(resource broker, string tag) Whether a dictionary exists or not. Using non-empty tag (bool)
enchant_broker_free_dict(resource dict) Free a dictionary resource (bool)
enchant_broker_free(resource broker) Free the broker resource and its dictionnaries (bool)
enchant_broker_get_error(resource broker) Returns the last error of the broker (string)
enchant_broker_init() create a new broker object capable of requesting (resource)
enchant_broker_list_dicts(resource broker) Returns a list of available dictionaries (mixed)
enchant_broker_request_dict(resource broker, string tag) create a new dictionary using a tag (resource)
enchant_broker_request_pwl_dict(resource broker, string filename) creates a dictionary using a PWL file (resource)
enchant_broker_set_ordering(resource broker, string tag, string ordering) Declares a preference of dictionaries to use for the language (bool)
enchant_dict_add_to_personal(resource dict, string word) add a word to personal word list (null)
enchant_dict_add_to_session(resource dict, string word) add 'word' to this spell-checking session (null)
enchant_dict_check(resource dict, string word) Check whether a word is correctly spelled or not (bool)
enchant_dict_describe(resource dict) Describes an individual dictionary (mixed)
enchant_dict_get_error(resource dict) Returns the last error of the current spelling-session (string)
enchant_dict_is_in_session(resource dict, string word) whether or not 'word' exists in this spelling-session (bool)
enchant_dict_quick_check(resource dict, string word, [array &suggestions]) Check the word is correctly spelled and provide suggestions (bool)
enchant_dict_store_replacement(resource dict, string mis, string cor) Add a correction for a word (null)
enchant_dict_suggest(resource dict, string word) Will return a list of values if any of those pre-conditions are not met (array)
debug_backtrace([bool provide_object]) Generates a backtrace (array)
debug_print_backtrace() Prints a backtrace (null)
error_get_last() Get the last occurred error (array)
error_log(string message, [int message_type, [string destination, [string extra_headers]]]) Send an error message somewhere (bool)
error_reporting([int level]) Sets which PHP errors are reported (int)
restore_error_handler() Restores the previous error handler function (bool)
restore_exception_handler() Restores the previously defined exception handler function (bool)
set_error_handler(callback error_handler, [int error_types]) Sets a user-defined error handler function (mixed)
set_exception_handler(callback exception_handler) Sets a user-defined exception handler function (string)
trigger_error(string error_msg, [int error_type]) Generates a user-level error/warning/notice message (bool)
user_error() Alias of trigger_error
escapeshellarg(string arg) Escape a string to be used as a shell argument (string)
escapeshellcmd(string command) Escape shell metacharacters (string)
exec(string command, [array &output, [int &return_var]]) Execute an external program (string)
passthru(string command, [int &return_var]) Execute an external program and display raw output (null)
proc_close(resource process) Close a process opened by proc_open and return the exit code of that process (int)
proc_get_status(resource process) Get information about a process opened by proc_open (array)
proc_nice(int increment) Change the priority of the current process (bool)
proc_open(string cmd, array descriptorspec, array &pipes, [string cwd, [array env, [array other_options]]]) Execute a command and open file pointers for input/output (resource)
proc_terminate(resource process, [int signal]) Kills a process opened by proc_open (bool)
shell_exec(string cmd) Execute command via shell and return the complete output as a string (string)
system(string command, [int &return_var]) Execute an external program and display the output (string)
exif_imagetype(string filename) Determine the type of an image (int)
exif_read_data(string filename, [string sections, [bool arrays, [bool thumbnail]]]) Reads the EXIF headers from JPEG or TIFF (array)
exif_tagname(int index) Get the header name for an index (string)
exif_thumbnail(string filename, [int &width, [int &height, [int &imagetype]]]) Retrieve the embedded thumbnail of a TIFF or JPEG image (string)
read_exif_data() Alias of exif_read_data
expect_expectl(resource expect, array cases, [array &match]) Waits until the output from a process matches one of the patterns, a specified time period has passed, or an EOF is seen (int)
expect_popen(string command) Execute command via Bourne shell, and open the PTY stream to the process (resource)
fam_cancel_monitor(resource fam, resource fam_monitor) Terminate monitoring (bool)
fam_close(resource fam) Close FAM connection (null)
fam_monitor_collection(resource fam, string dirname, int depth, string mask) Monitor a collection of files in a directory for changes (resource)
fam_monitor_directory(resource fam, string dirname) Monitor a directory for changes (resource)
fam_monitor_file(resource fam, string filename) Monitor a regular file for changes (resource)
fam_next_event(resource fam) Get next pending FAM event (array)
fam_open([string appname]) Open connection to FAM daemon (resource)
fam_pending(resource fam) Check for pending FAM events (int)
fam_resume_monitor(resource fam, resource fam_monitor) Resume suspended monitoring (bool)
fam_suspend_monitor(resource fam, resource fam_monitor) Temporarily suspend monitoring (bool)
fbsql_affected_rows([resource link_identifier]) Get number of affected rows in previous FrontBase operation (int)
fbsql_autocommit(resource link_identifier, [bool OnOff]) Enable or disable autocommit (bool)
fbsql_blob_size(string blob_handle, [resource link_identifier]) Get the size of a BLOB (int)
fbsql_change_user(string user, string password, [string database, [resource link_identifier]]) Change logged in user of the active connection (bool)
fbsql_clob_size(string clob_handle, [resource link_identifier]) Get the size of a CLOB (int)
fbsql_close([resource link_identifier]) Close FrontBase connection (bool)
fbsql_commit([resource link_identifier]) Commits a transaction to the database (bool)
fbsql_connect([string hostname, [string username, [string password]]]) Open a connection to a FrontBase Server (resource)
fbsql_create_blob(string blob_data, [resource link_identifier]) Create a BLOB (string)
fbsql_create_clob(string clob_data, [resource link_identifier]) Create a CLOB (string)
fbsql_create_db(string database_name, [resource link_identifier, [string database_options]]) Create a FrontBase database (bool)
fbsql_data_seek(resource result, int row_number) Move internal result pointer (bool)
fbsql_database_password(resource link_identifier, [string database_password]) Sets or retrieves the password for a FrontBase database (string)
fbsql_database(resource link_identifier, [string database]) Get or set the database name used with a connection (string)
fbsql_db_query(string database, string query, [resource link_identifier]) Send a FrontBase query (resource)
fbsql_db_status(string database_name, [resource link_identifier]) Get the status for a given database (int)
fbsql_drop_db(string database_name, [resource link_identifier]) Drop (delete) a FrontBase database (bool)
fbsql_errno([resource link_identifier]) Returns the error number from previous operation (int)
fbsql_error([resource link_identifier]) Returns the error message from previous operation (string)
fbsql_fetch_array(resource result, [int result_type]) Fetch a result row as an associative array, a numeric array, or both (array)
fbsql_fetch_assoc(resource result) Fetch a result row as an associative array (array)
fbsql_fetch_field(resource result, [int field_offset]) Get column information from a result and return as an object (object)
fbsql_fetch_lengths(resource result) Get the length of each output in a result (array)
fbsql_fetch_object(resource result) Fetch a result row as an object (object)
fbsql_fetch_row(resource result) Get a result row as an enumerated array (array)
fbsql_field_flags(resource result, [int field_offset]) Get the flags associated with the specified field in a result (string)
fbsql_field_len(resource result, [int field_offset]) Returns the length of the specified field (int)
fbsql_field_name(resource result, [int field_index]) Get the name of the specified field in a result (string)
fbsql_field_seek(resource result, [int field_offset]) Set result pointer to a specified field offset (bool)
fbsql_field_table(resource result, [int field_offset]) Get name of the table the specified field is in (string)
fbsql_field_type(resource result, [int field_offset]) Get the type of the specified field in a result (string)
fbsql_free_result(resource result) Free result memory (bool)
fbsql_get_autostart_info([resource link_identifier])  (array)
fbsql_hostname(resource link_identifier, [string host_name]) Get or set the host name used with a connection (string)
fbsql_insert_id([resource link_identifier]) Get the id generated from the previous INSERT operation (int)
fbsql_list_dbs([resource link_identifier]) List databases available on a FrontBase server (resource)
fbsql_list_fields(string database_name, string table_name, [resource link_identifier]) List FrontBase result fields (resource)
fbsql_list_tables(string database, [resource link_identifier]) List tables in a FrontBase database (resource)
fbsql_next_result(resource result) Move the internal result pointer to the next result (bool)
fbsql_num_fields(resource result) Get number of fields in result (int)
fbsql_num_rows(resource result) Get number of rows in result (int)
fbsql_password(resource link_identifier, [string password]) Get or set the user password used with a connection (string)
fbsql_pconnect([string hostname, [string username, [string password]]]) Open a persistent connection to a FrontBase Server (resource)
fbsql_query(string query, [resource link_identifier, [int batch_size]]) Send a FrontBase query (resource)
fbsql_read_blob(string blob_handle, [resource link_identifier]) Read a BLOB from the database (string)
fbsql_read_clob(string clob_handle, [resource link_identifier]) Read a CLOB from the database (string)
fbsql_result(resource result, [int row, [mixed field]]) Get result data (mixed)
fbsql_rollback([resource link_identifier]) Rollback a transaction to the database (bool)
fbsql_rows_fetched(resource result) Get the number of rows affected by the last statement (int)
fbsql_select_db([string database_name, [resource link_identifier]]) Select a FrontBase database (bool)
fbsql_set_characterset(resource link_identifier, int characterset, [int in_out_both]) Change input/output character set (null)
fbsql_set_lob_mode(resource result, int lob_mode) Set the LOB retrieve mode for a FrontBase result set (bool)
fbsql_set_password(resource link_identifier, string user, string password, string old_password) Change the password for a given user (bool)
fbsql_set_transaction(resource link_identifier, int locking, int isolation) Set the transaction locking and isolation (null)
fbsql_start_db(string database_name, [resource link_identifier, [string database_options]]) Start a database on local or remote server (bool)
fbsql_stop_db(string database_name, [resource link_identifier]) Stop a database on local or remote server (bool)
fbsql_table_name(resource result, int index) Get table name of field (string)
fbsql_tablename() Alias of of fbsql_table_name
fbsql_username(resource link_identifier, [string username]) Get or set the username for the connection (string)
fbsql_warnings([bool OnOff]) Enable or disable FrontBase warnings (bool)
fdf_add_doc_javascript(resource fdf_document, string script_name, string script_code) Adds javascript code to the FDF document (bool)
fdf_add_template(resource fdf_document, int newpage, string filename, string template, int rename) Adds a template into the FDF document (bool)
fdf_close(resource fdf_document) Close an FDF document (null)
fdf_create() Create a new FDF document (resource)
fdf_enum_values(resource fdf_document, callback function, [mixed userdata]) Call a user defined function for each document value (bool)
fdf_errno() Return error code for last fdf operation (int)
fdf_error([int error_code]) Return error description for FDF error code (string)
fdf_get_ap(resource fdf_document, string field, int face, string filename) Get the appearance of a field (bool)
fdf_get_attachment(resource fdf_document, string fieldname, string savepath) Extracts uploaded file embedded in the FDF (array)
fdf_get_encoding(resource fdf_document) Get the value of the /Encoding key (string)
fdf_get_file(resource fdf_document) Get the value of the /F key (string)
fdf_get_flags(resource fdf_document, string fieldname, int whichflags) Gets the flags of a field (int)
fdf_get_opt(resource fdf_document, string fieldname, [int element]) Gets a value from the opt array of a field (mixed)
fdf_get_status(resource fdf_document) Get the value of the /STATUS key (string)
fdf_get_value(resource fdf_document, string fieldname, [int which]) Get the value of a field (mixed)
fdf_get_version([resource fdf_document]) Gets version number for FDF API or file (string)
fdf_header() Sets FDF-specific output headers (null)
fdf_next_field_name(resource fdf_document, [string fieldname]) Get the next field name (string)
fdf_open_string(string fdf_data) Read a FDF document from a string (resource)
fdf_open(string filename) Open a FDF document (resource)
fdf_remove_item(resource fdf_document, string fieldname, int item) Sets target frame for form (bool)
fdf_save_string(resource fdf_document) Returns the FDF document as a string (string)
fdf_save(resource fdf_document, [string filename]) Save a FDF document (bool)
fdf_set_ap(resource fdf_document, string field_name, int face, string filename, int page_number) Set the appearance of a field (bool)
fdf_set_encoding(resource fdf_document, string encoding) Sets FDF character encoding (bool)
fdf_set_file(resource fdf_document, string url, [string target_frame]) Set PDF document to display FDF data in (bool)
fdf_set_flags(resource fdf_document, string fieldname, int whichFlags, int newFlags) Sets a flag of a field (bool)
fdf_set_javascript_action(resource fdf_document, string fieldname, int trigger, string script) Sets an javascript action of a field (bool)
fdf_set_on_import_javascript(resource fdf_document, string script, bool before_data_import) Adds javascript code to be executed when Acrobat opens the FDF (bool)
fdf_set_opt(resource fdf_document, string fieldname, int element, string str1, string str2) Sets an option of a field (bool)
fdf_set_status(resource fdf_document, string status) Set the value of the /STATUS key (bool)
fdf_set_submit_form_action(resource fdf_document, string fieldname, int trigger, string script, int flags) Sets a submit form action of a field (bool)
fdf_set_target_frame(resource fdf_document, string frame_name) Set target frame for form display (bool)
fdf_set_value(resource fdf_document, string fieldname, mixed value, [int isName]) Set the value of a field (bool)
fdf_set_version(resource fdf_document, string version) Sets version number for a FDF file (bool)
finfo_buffer(resource finfo, string string, [int options, [resource context]]) Return information about a string buffer (string)
>buffer(string string, [int options, [resource context]]) Return information about a string buffer (finfo: string)
finfo_close(resource finfo) Close fileinfo resource (bool)
finfo_file(resource finfo, string file_name, [int options, [resource context]]) Return information about a file (string)
>file(string file_name, [int options, [resource context]]) Return information about a file (finfo: string)
finfo_open([int options, [string magic_file]]) Create a new fileinfo resource (resource)
finfo([int options, [string magic_file]]) Create a new fileinfo resource (new)
finfo_set_flags(resource finfo, int options) Set libmagic configuration options (bool)
>set_flags(int options) Set libmagic configuration options (finfo: bool)
filepro_fieldcount() Find out how many fields are in a filePro database (int)
filepro_fieldname(int field_number) Gets the name of a field (string)
filepro_fieldtype(int field_number) Gets the type of a field (string)
filepro_fieldwidth(int field_number) Gets the width of a field (int)
filepro_retrieve(int row_number, int field_number) Retrieves data from a filePro database (string)
filepro_rowcount() Find out how many rows are in a filePro database (int)
filepro(string directory) Read and verify the map file (bool)
basename(string path, [string suffix]) Returns filename component of path (string)
chgrp(string filename, mixed group) Changes file group (bool)
chmod(string filename, int mode) Changes file mode (bool)
chown(string filename, mixed user) Changes file owner (bool)
clearstatcache([bool clear_realpath_cache, [string filename]]) Clears file status cache (null)
copy(string source, string dest, [resource context]) Copies file (bool)
dirname(string path) Returns directory name component of path (string)
disk_free_space(string directory) Returns available space in directory (float)
disk_total_space(string directory) Returns the total size of a directory (float)
diskfreespace() Alias of disk_free_space
fclose(resource handle) Closes an open file pointer (bool)
feof(resource handle) Tests for end-of-file on a file pointer (bool)
fflush(resource handle) Flushes the output to a file (bool)
fgetc(resource handle) Gets character from file pointer (string)
fgetcsv(resource handle, [int length, [string delimiter, [string enclosure, [string escape]]]]) Gets line from file pointer and parse for CSV fields (array)
fgets(resource handle, [int length]) Gets line from file pointer (string)
fgetss(resource handle, [int length, [string allowable_tags]]) Gets line from file pointer and strip HTML tags (string)
file_exists(string filename) Checks whether a file or directory exists (bool)
file_get_contents(string filename, [int flags, [resource context, [int offset, [int maxlen]]]]) Reads entire file into a string (string)
file_put_contents(string filename, mixed data, [int flags, [resource context]]) Write a string to a file (int)
file(string filename, [int flags, [resource context]]) Reads entire file into an array (array)
fileatime(string filename) Gets last access time of file (int)
filectime(string filename) Gets inode change time of file (int)
filegroup(string filename) Gets file group (int)
fileinode(string filename) Gets file inode (int)
filemtime(string filename) Gets file modification time (int)
fileowner(string filename) Gets file owner (int)
fileperms(string filename) Gets file permissions (int)
filesize(string filename) Gets file size (int)
filetype(string filename) Gets file type (string)
flock(resource handle, int operation, [int &wouldblock]) Portable advisory file locking (bool)
fnmatch(string pattern, string string, [int flags]) Match filename against a pattern (bool)
fopen(string filename, string mode, [bool use_include_path, [resource context]]) Opens file or URL (resource)
fpassthru(resource handle) Output all remaining data on a file pointer (int)
fputcsv(resource handle, array fields, [string delimiter, [string enclosure]]) Format line as CSV and write to file pointer (int)
fputs() Alias of fwrite
fread(resource handle, int length) Binary-safe file read (string)
fscanf(resource handle, string format, [mixed &...]) Parses input from a file according to a format (mixed)
fseek(resource handle, int offset, [int whence]) Seeks on a file pointer (int)
fstat(resource handle) Gets information about a file using an open file pointer (array)
ftell(resource handle) Returns the current position of the file read/write pointer (int)
ftruncate(resource handle, int size) Truncates a file to a given length (bool)
fwrite(resource handle, string string, [int length]) Binary-safe file write (int)
glob(string pattern, [int flags]) Find pathnames matching a pattern (array)
is_dir(string filename) Tells whether the filename is a directory (bool)
is_executable(string filename) Tells whether the filename is executable (bool)
is_file(string filename) Tells whether the filename is a regular file (bool)
is_link(string filename) Tells whether the filename is a symbolic link (bool)
is_readable(string filename) Tells whether the filename is readable (bool)
is_uploaded_file(string filename) Tells whether the file was uploaded via HTTP POST (bool)
is_writable(string filename) Tells whether the filename is writable (bool)
is_writeable() Alias of is_writable
lchgrp(string filename, mixed group) Changes group ownership of symlink (bool)
lchown(string filename, mixed user) Changes user ownership of symlink (bool)
link(string to_path, string from_path) Create a hard link (bool)
linkinfo(string path) Gets information about a link (int)
lstat(string filename) Gives information about a file or symbolic link (array)
mkdir(string pathname, [int mode, [bool recursive, [resource context]]]) Makes directory (bool)
move_uploaded_file(string filename, string destination) Moves an uploaded file to a new location (bool)
parse_ini_file(string filename, [bool process_sections, [int scanner_mode]]) Parse a configuration file (array)
parse_ini_string(string ini, [bool process_sections, [int scanner_mode]]) Parse a configuration string (array)
pathinfo(string path, [int options]) Returns information about a file path (mixed)
pclose(resource handle) Closes process file pointer (int)
popen(string command, string mode) Opens process file pointer (resource)
readfile(string filename, [bool use_include_path, [resource context]]) Outputs a file (int)
readlink(string path) Returns the target of a symbolic link (string)
realpath(string path) Returns canonicalized absolute pathname (string)
rename(string oldname, string newname, [resource context]) Renames a file or directory (bool)
rewind(resource handle) Rewind the position of a file pointer (bool)
rmdir(string dirname, [resource context]) Removes directory (bool)
set_file_buffer() Alias of stream_set_write_buffer
stat(string filename) Gives information about a file (array)
symlink(string target, string link) Creates a symbolic link (bool)
tempnam(string dir, string prefix) Create file with unique file name (string)
tmpfile() Creates a temporary file (resource)
touch(string filename, [int time, [int atime]]) Sets access and modification time of file (bool)
umask([int mask]) Changes the current umask (int)
unlink(string filename, [resource context]) Deletes a file (bool)
filter_has_var(int type, string variable_name) Checks if variable of specified type exists (bool)
filter_id(string filtername) Returns the filter ID belonging to a named filter (int)
filter_input_array(int type, [mixed definition]) Gets external variables and optionally filters them (mixed)
filter_input(int type, string variable_name, [int filter, [mixed options]]) Gets a specific external variable by name and optionally filters it (mixed)
filter_list() Returns a list of all supported filters (array)
filter_var_array(array data, [mixed definition]) Gets multiple variables and optionally filters them (mixed)
filter_var(mixed variable, [int filter, [mixed options]]) Filters a variable with a specified filter (mixed)
fribidi_log2vis(string str, string direction, int charset) Convert a logical string to a visual one (string)
ftp_alloc(resource ftp_stream, int filesize, [string &result]) Allocates space for a file to be uploaded (bool)
ftp_cdup(resource ftp_stream) Changes to the parent directory (bool)
ftp_chdir(resource ftp_stream, string directory) Changes the current directory on a FTP server (bool)
ftp_chmod(resource ftp_stream, int mode, string filename) Set permissions on a file via FTP (int)
ftp_close(resource ftp_stream) Closes an FTP connection (bool)
ftp_connect(string host, [int port, [int timeout]]) Opens an FTP connection (resource)
ftp_delete(resource ftp_stream, string path) Deletes a file on the FTP server (bool)
ftp_exec(resource ftp_stream, string command) Requests execution of a command on the FTP server (bool)
ftp_fget(resource ftp_stream, resource handle, string remote_file, int mode, [int resumepos]) Downloads a file from the FTP server and saves to an open file (bool)
ftp_fput(resource ftp_stream, string remote_file, resource handle, int mode, [int startpos]) Uploads from an open file to the FTP server (bool)
ftp_get_option(resource ftp_stream, int option) Retrieves various runtime behaviours of the current FTP stream (mixed)
ftp_get(resource ftp_stream, string local_file, string remote_file, int mode, [int resumepos]) Downloads a file from the FTP server (bool)
ftp_login(resource ftp_stream, string username, string password) Logs in to an FTP connection (bool)
ftp_mdtm(resource ftp_stream, string remote_file) Returns the last modified time of the given file (int)
ftp_mkdir(resource ftp_stream, string directory) Creates a directory (string)
ftp_nb_continue(resource ftp_stream) Continues retrieving/sending a file (non-blocking) (int)
ftp_nb_fget(resource ftp_stream, resource handle, string remote_file, int mode, [int resumepos]) Retrieves a file from the FTP server and writes it to an open file (non-blocking) (int)
ftp_nb_fput(resource ftp_stream, string remote_file, resource handle, int mode, [int startpos]) Stores a file from an open file to the FTP server (non-blocking) (int)
ftp_nb_get(resource ftp_stream, string local_file, string remote_file, int mode, [int resumepos]) Retrieves a file from the FTP server and writes it to a local file (non-blocking) (int)
ftp_nb_put(resource ftp_stream, string remote_file, string local_file, int mode, [int startpos]) Stores a file on the FTP server (non-blocking) (int)
ftp_nlist(resource ftp_stream, string directory) Returns a list of files in the given directory (array)
ftp_pasv(resource ftp_stream, bool pasv) Turns passive mode on or off (bool)
ftp_put(resource ftp_stream, string remote_file, string local_file, int mode, [int startpos]) Uploads a file to the FTP server (bool)
ftp_pwd(resource ftp_stream) Returns the current directory name (string)
ftp_quit() Alias of ftp_close
ftp_raw(resource ftp_stream, string command) Sends an arbitrary command to an FTP server (array)
ftp_rawlist(resource ftp_stream, string directory, [bool recursive]) Returns a detailed list of files in the given directory (array)
ftp_rename(resource ftp_stream, string oldname, string newname) Renames a file or a directory on the FTP server (bool)
ftp_rmdir(resource ftp_stream, string directory) Removes a directory (bool)
ftp_set_option(resource ftp_stream, int option, mixed value) Set miscellaneous runtime FTP options (bool)
ftp_site(resource ftp_stream, string command) Sends a SITE command to the server (bool)
ftp_size(resource ftp_stream, string remote_file) Returns the size of the given file (int)
ftp_ssl_connect(string host, [int port, [int timeout]]) Opens an Secure SSL-FTP connection (resource)
ftp_systype(resource ftp_stream) Returns the system type identifier of the remote FTP server (string)
call_user_func_array(callback function, array param_arr) Call a user function given with an array of parameters (mixed)
call_user_func(callback function, [mixed parameter, [mixed ...]]) Call a user function given by the first parameter (mixed)
create_function(string args, string code) Create an anonymous (lambda-style) function (string)
forward_static_call_array(callback function, [array parameters]) Call a static method and pass the arguments as array (mixed)
forward_static_call(callback function, [mixed parameter, [mixed ...]]) Call a static method (mixed)
func_get_arg(int arg_num) Return an item from the argument list (mixed)
func_get_args() Returns an array comprising a function's argument list (array)
func_num_args() Returns the number of arguments passed to the function (int)
function_exists(string function_name) Return TRUE if the given function has been defined (bool)
get_defined_functions() Returns an array of all defined functions (array)
register_shutdown_function(callback function, [mixed parameter, [mixed ...]]) Register a function for execution on shutdown (null)
register_tick_function(callback function, [mixed arg, [mixed ...]]) Register a function for execution on each tick (bool)
unregister_tick_function(string function_name) De-register a function for execution on each tick (null)
geoip_continent_code_by_name(string hostname) Get the two letter continent code (string)
geoip_country_code_by_name(string hostname) Get the two letter country code (string)
geoip_country_code3_by_name(string hostname) Get the three letter country code (string)
geoip_country_name_by_name(string hostname) Get the full country name (string)
geoip_database_info([int database]) Get GeoIP Database information (string)
geoip_db_avail(int database) Determine if GeoIP Database is available (bool)
geoip_db_filename(int database) Returns the filename of the corresponding GeoIP Database (string)
geoip_db_get_all_info() Returns detailed information about all GeoIP database types (array)
geoip_id_by_name(string hostname) Get the Internet connection speed (int)
geoip_isp_by_name(string hostname) Get the Internet Service Provider (ISP) name (string)
geoip_org_by_name(string hostname) Get the organization name (string)
geoip_record_by_name(string hostname) Returns the detailed City information found in the GeoIP Database (array)
geoip_region_by_name(string hostname) Get the country code and region (array)
geoip_region_name_by_code(string country_code, string region_code) Returns the region name for some country and region code combo (string)
geoip_time_zone_by_country_and_region(string country_code, [string region_code]) Returns the time zone for some country and region code combo (string)
bind_textdomain_codeset(string domain, string codeset) Specify the character encoding in which the messages from the DOMAIN message catalog will be returned (string)
bindtextdomain(string domain, string directory) Sets the path for a domain (string)
dcgettext(string domain, string message, int category) Overrides the domain for a single lookup (string)
dcngettext(string domain, string msgid1, string msgid2, int n, int category) Plural version of dcgettext (string)
dgettext(string domain, string message) Override the current domain (string)
dngettext(string domain, string msgid1, string msgid2, int n) Plural version of dgettext (string)
gettext(string message) Lookup a message in the current domain (string)
ngettext(string msgid1, string msgid2, int n) Plural version of gettext (string)
textdomain(string text_domain) Sets the default domain (string)
>addimage(Gmagick Gmagick) Adds new image to Gmagick object image list (Gmagick: null)
>addnoiseimage(int NOISE) Adds random noise to the image (Gmagick: null)
>annotateimage(GmagickDraw GmagickDraw, int x, int y, float angle, string text) Annotates an image with text (Gmagick: null)
>blurimage(float radius, float sigma) Adds blur filter to image (Gmagick: null)
>borderimage(GmagickPixel color, int width, int height) Surrounds the image with a border (Gmagick: null)
>charcoalimage(float radius, float sigma) Simulates a charcoal drawing (Gmagick: null)
>chopimage(int width, int height, int x, int y) Removes a region of an image and trims (Gmagick: null)
>clear() Clears all resources associated to Gmagick object (Gmagick: null)
>commentimage(string comment) Adds a comment to your image (Gmagick: null)
>compositeimage(Gmagick source, int COMPOSE, int x, int y) Composite one image onto another (Gmagick: null)
Gmagick([string filename]) The Gmagick constructor (new)
>cropimage(int x, int y, int width, int height) Extracts a region of the image (Gmagick: null)
>cropthumbnailimage(int x, int y, int width, int height) Creates a crop thumbnail (Gmagick: null)
>current() The current purpose (Gmagick: null)
>cyclecolormapimage(float displace) Displaces an image's colormap (Gmagick: null)
>deconstructimages() Returns certain pixel differences between images (Gmagick: null)
>despeckleimage() The despeckleimage purpose (Gmagick: null)
>destroy() The destroy purpose (Gmagick: null)
>drawimage(GmagickDraw GmagickDraw) Renders the GmagickDraw object on the current image (Gmagick: null)
>edgeimage(float radius) Enhance edges within the image (Gmagick: null)
>embossimage(float radius, float sigma) Returns a grayscale image with a three-dimensional effect (Gmagick: null)
>enhanceimage() Improves the quality of a noisy image (Gmagick: null)
>equalizeimage() Equalizes the image histogram (Gmagick: null)
>flipimage() Creates a vertical mirror image (Gmagick: null)
>flopimage() The flopimage purpose (Gmagick: null)
>frameimage(GmagickPixel color, int width, int height, int inner_bevel, int outer_bevel) Adds a simulated three-dimensional border (Gmagick: null)
>gammaimage(float gamma) Gamma-corrects an image (Gmagick: null)
>getcopyright() Returns the GraphicsMagick API copyright as a string (Gmagick: null)
>getfilename() The filename associated with an image sequence (Gmagick: null)
>getimagebackgroundcolor() Returns the image background color (Gmagick: null)
>getimageblueprimary() Returns the chromaticy blue primary point (Gmagick: null)
>getimagebordercolor() Returns the image border color (Gmagick: null)
>getimagechanneldepth() Gets the depth for a particular image channel (Gmagick: null)
>getimagecolors() Returns the color of the specified colormap index (Gmagick: null)
>getimagecolorspace() Gets the image colorspace (Gmagick: null)
>getimagecompose() Returns the composite operator associated with the image (Gmagick: null)
>getimagedelay() Gets the image delay (Gmagick: null)
>getimagedepth() Gets the depth of the image (Gmagick: null)
>getimagedispose() Gets the image disposal method (Gmagick: null)
>getimageextrema() Gets the extrema for the image (Gmagick: null)
>getimagefilename() Returns the filename of a particular image in a sequence (Gmagick: null)
>getimageformat() Returns the format of a particular image in a sequence (Gmagick: null)
>getimagegamma() Gets the image gamma (Gmagick: null)
>getimagegreenprimary() Returns the chromaticy green primary point (Gmagick: null)
>getimageheight() Returns the image height (Gmagick: null)
>getimagehistogram() Gets the image histogram (Gmagick: null)
>getimageindex() Gets the index of the current active image (Gmagick: null)
>getimageinterlacescheme() Gets the image interlace scheme (Gmagick: null)
>getimageiterations() Gets the image iterations (Gmagick: null)
>getimagematte() Return if the image has a matte channel (Gmagick: null)
>getimagemattecolor() Returns the image matte color (Gmagick: null)
>getimageprofile() Returns the named image profile. (Gmagick: null)
>getimageredprimary() Returns the chromaticity red primary point (Gmagick: null)
>getimagerenderingintent() Gets the image rendering intent (Gmagick: null)
>getimageresolution() Gets the image X and Y resolution (Gmagick: null)
>getimagescene() Gets the image scene (Gmagick: null)
>getimagesignature() Generates an SHA-256 message digest (Gmagick: null)
>getimagetype() Gets the potential image type. (Gmagick: null)
>getimageunits() Gets the image units of resolution (Gmagick: null)
>getimagewhitepoint() Returns the chromaticity white point (Gmagick: null)
>getimagewidth() Returns the width of the image (Gmagick: null)
>getpackagename() Returns the GraphicsMagick package name. (Gmagick: null)
>getquantumdepth() Returns the Gmagick quantum depth as a string. (Gmagick: null)
>getreleasedate() Returns the GraphicsMagick release date as a string. (Gmagick: null)
>getsamplingfactors() Gets the horizontal and vertical sampling factor. (Gmagick: null)
>getsize() Returns the size associated with the Gmagick object (Gmagick: null)
>getversion() Returns the GraphicsMagick API version (Gmagick: null)
>hasnextimage() Checks if the object has more images (Gmagick: null)
>haspreviousimage() Checks if the object has a previous image (Gmagick: null)
>implodeimage(float radius) Creates a new image as a copy (Gmagick: null)
>labelimage(string label) Adds a label to an image. (Gmagick: null)
>levelimage(float blackPoint, float gamma, float whitePoint, [int channel]) Adjusts the levels of an image (Gmagick: null)
>magnifyimage() Scales an image proportionally 2x (Gmagick: null)
>mapimage(gmagick gmagick, int dither) Replaces the colors of an image with the closest color from a reference image. (Gmagick: null)
>medianfilterimage(float radius) Applies a digital filter (Gmagick: null)
>minifyimage() Scales an image proportionally to half its size (Gmagick: null)
>modulateimage(float brightness, float saturation, float hue) Control the brightness, saturation, and hue (Gmagick: null)
>motionblurimage(float radius, float sigma, float angle) Simulates motion blur (Gmagick: null)
>newimage(int width, int height, mixed background, string height) Creates a new image (Gmagick: null)
>nextimage() Moves to the next image (Gmagick: null)
>normalizeimage([int channel]) Enhances the contrast of a color image (Gmagick: null)
>oilpaintimage() Simulates an oil painting (Gmagick: null)
>previousimage() Move to the previous image in the object (Gmagick: null)
>profileimage(string name, string profile) Adds or removes a profile from an image (Gmagick: null)
>quantizeimage(int numColors, int colorspace, int treeDepth, bool dither, bool measureError) Analyzes the colors within a reference image (Gmagick: null)
>quantizeimages(int numColors, int colorspace, int treeDepth, bool dither, bool measureError) The quantizeimages purpose (Gmagick: null)
>queryfontmetrics() Returns an array representing the font metrics (Gmagick: null)
>queryfonts() Returns the configured fonts (Gmagick: null)
>queryformats(string pattern) Returns formats supported by Gmagick. (Gmagick: null)
>radialblurimage(float angle, [int channel]) Radial blurs an image (Gmagick: null)
>raiseimage(int width, int height, int x, int y, bool raise) Creates a simulated 3d button-like effect (Gmagick: null)
>read(string filename) Reads image from filename (Gmagick: null)
>readimage(string filename) Reads image from filename (Gmagick: null)
>readimageblob(string imageContents, [string filename]) Reads image from a binary string (Gmagick: null)
>readimagefile(string fp) The readimagefile purpose (Gmagick: null)
>reducenoiseimage(float radius) Smooths the contours of an image (Gmagick: null)
>removeimage() Removes an image from the image list (Gmagick: null)
>removeimageprofile(string name) Removes the named image profile and returns it (Gmagick: null)
>resampleimage(float xResolution, float yResolution, int filter, float blur) Resample image to desired resolution (Gmagick: null)
>resizeimage(int width, int height, int filter, float blur, [bool fit]) Scales an image (Gmagick: null)
>rollimage(int x, int y) Offsets an image (Gmagick: null)
>rotateimage(mixed color, float degrees) Rotates an image (Gmagick: null)
>scaleimage(int width, int height) Scales the size of an image (Gmagick: null)
>separateimagechannel(int channel) Separates a channel from the image (Gmagick: null)
>setfilename(string filename) Sets the filename before you read or write the image (Gmagick: null)
>setimagebackgroundcolor(GmagickPixel color) Sets the image background color. (Gmagick: null)
>setimageblueprimary(float x, float y) Sets the image chromaticity blue primary point. (Gmagick: null)
>setimagebordercolor(GmagickPixel color) Sets the image border color. (Gmagick: null)
>setimagechanneldepth(int channel, int depth) Sets the depth of a particular image channel (Gmagick: null)
>setimagecolorspace(int colorspace) Sets the image colorspace (Gmagick: null)
>setimagecompose(int composite) Sets the image composite operator (Gmagick: null)
>setimagedelay(int delay) Sets the image delay (Gmagick: null)
>setimagedepth(float depth) Sets the image depth (Gmagick: null)
>setimagedispose(int disposeType) Sets the image disposal method (Gmagick: null)
>setimagefilename(string filename) Sets the filename of a particular image in a sequence (Gmagick: null)
>setimageformat(string imageFormat) Sets the format of a particular image (Gmagick: null)
>setimagegamma(float gamma) Sets the image gamma (Gmagick: null)
>setimagegreenprimary(float x, float y) TSets the image chromaticity green primary point. (Gmagick: null)
>setimageindex(int index) Set the iterator to the position in the image list specified with the index parameter (Gmagick: null)
>setimageinterlacescheme(int interlace) Sets the interlace scheme of the image. (Gmagick: null)
>setimageiterations(int iterations) Sets the image iterations. (Gmagick: null)
>setimageprofile(string name, string profile) Adds a named profile to the Gmagick object (Gmagick: null)
>setimageredprimary(float x, float y) Sets the image chromaticity red primary point. (Gmagick: null)
>setimagerenderingintent(int rendering_intent) Sets the image rendering intent (Gmagick: null)
>setimageresolution(float xResolution, float yResolution) Sets the image resolution (Gmagick: null)
>setimagescene(string scene) Sets the image scene (Gmagick: null)
>setimagetype(string imgType) Sets the image type (Gmagick: null)
>setimageunits(int resolution) Sets the image units of resolution. (Gmagick: null)
>setimagewhitepoint(float x, float y) Sets the image chromaticity white point. (Gmagick: null)
>setsamplingfactors(array factors) Sets the image sampling factors. (Gmagick: null)
>setsize(int columns, int rows) Sets the size of the Gmagick object (Gmagick: null)
>shearimage(mixed color, float xShear, float yShear) Creating a parallelogram (Gmagick: null)
>solarizeimage(float threshold) Applies a solarizing effect to the image (Gmagick: null)
>spreadimage(float radius) Randomly displaces each pixel in a block (Gmagick: null)
>stripimage() Strips an image of all profiles and comments (Gmagick: null)
>swirlimage(float degrees) Swirls the pixels about the center of the image (Gmagick: null)
>thumbnailimage(int width, int height) Changes the size of an image (Gmagick: null)
>trimimage(float fuzz) Remove edges from the image (Gmagick: null)
>write(string filename) Writes an image to the specified filename (Gmagick: null)
>writeimage(string filename) Writes an image to the specified filename (Gmagick: null)
>annotate(float x, float y, string text) Draws text on the image (GmagickDraw: null)
>arc(float sx, float sy, float ex, float ey, float sd, float ed) Draws an arc (GmagickDraw: null)
>bezier(array coordinate_array) Draws a bezier curve (GmagickDraw: null)
>ellipse(float ox, float oy, float rx, float ry, float start, float end) Draws an ellipse on the image (GmagickDraw: null)
>getfillcolor() Returns the fill color (GmagickDraw: null)
>getfillopacity() Returns the opacity used when drawing (GmagickDraw: null)
>getfont() Returns the font (GmagickDraw: null)
>getfontsize() Returns the font pointsize (GmagickDraw: null)
>getfontstyle() Returns the font style (GmagickDraw: null)
>getfontweight() Returns the font weight (GmagickDraw: null)
>getstrokecolor() Returns the color used for stroking object outlines (GmagickDraw: null)
>getstrokeopacity() Returns the opacity of stroked object outlines (GmagickDraw: null)
>getstrokewidth() Returns the width of the stroke used to draw object outlines (GmagickDraw: null)
>gettextdecoration() Returns the text decoration (GmagickDraw: null)
>gettextencoding() Returns the code set used for text annotations (GmagickDraw: null)
>line(float sx, float sy, float ex, float ey) The line purpose (GmagickDraw: null)
>point(float x, float y) Draws a point (GmagickDraw: null)
>polygon(array coordinates) Draws a polygon (GmagickDraw: null)
>polyline(array coordinate_array) Draws a polyline (GmagickDraw: null)
>rectangle(float x1, float y1, float x2, float y2) Draws a rectangle (GmagickDraw: null)
>rotate(float degrees) Applies the specified rotation to the current coordinate space (GmagickDraw: null)
>roundrectangle(float x1, float y1, float x2, float y2, float rx, float ry) Draws a rounded rectangle (GmagickDraw: null)
>scale(float x, float y) Adjusts the scaling factor (GmagickDraw: null)
>setfillcolor(string color) Sets the fill color to be used for drawing filled objects. (GmagickDraw: null)
>setfillopacity(float fill_opacity) The setfillopacity purpose (GmagickDraw: null)
>setfont(string font) Sets the fully-specified font to use when annotating with text. (GmagickDraw: null)
>setfontsize(float pointsize) Sets the font pointsize to use when annotating with text. (GmagickDraw: null)
>setfontstyle(string style) Sets the font style to use when annotating with text (GmagickDraw: null)
>setfontweight(int weight) Sets the font weight (GmagickDraw: null)
>setstrokecolor(GmagickPixel color) Sets the color used for stroking object outlines. (GmagickDraw: null)
>setstrokeopacity(float stroke_opacity) Specifies the opacity of stroked object outlines. (GmagickDraw: null)
>setstrokewidth(float width) Sets the width of the stroke used to draw object outlines. (GmagickDraw: null)
>settextdecoration(int decoration) Specifies a decoration (GmagickDraw: null)
>settextencoding(string encoding) Specifies specifies the text code set (GmagickDraw: null)
GmagickPixel([string color]) The GmagickPixel constructor (new)
>getcolor([bool as_array, [bool normalize_array]]) Returns the color (GmagickPixel: null)
>getcolorcount([bool as_array, [bool normalize_array]]) Returns the color count associated with this color (GmagickPixel: null)
>getcolorvalue(int color) Gets the normalized value of the provided color channel (GmagickPixel: null)
>setcolor(string color) Sets the color (GmagickPixel: null)
>setcolorvalue(int color, float value) Sets the normalized value of one of the channels (GmagickPixel: null)
gmp_abs(resource a) Absolute value (resource)
gmp_add(resource a, resource b) Add numbers (resource)
gmp_and(resource a, resource b) Bitwise AND (resource)
gmp_clrbit(resource a, int index) Clear bit (null)
gmp_cmp(resource a, resource b) Compare numbers (int)
gmp_com(resource a) Calculates one's complement (resource)
gmp_div_q(resource a, resource b, [int round]) Divide numbers (resource)
gmp_div_qr(resource n, resource d, [int round]) Divide numbers and get quotient and remainder (array)
gmp_div_r(resource n, resource d, [int round]) Remainder of the division of numbers (resource)
gmp_div() Alias of gmp_div_q
gmp_divexact(resource n, resource d) Exact division of numbers (resource)
gmp_fact(mixed a) Factorial (resource)
gmp_gcd(resource a, resource b) Calculate GCD (resource)
gmp_gcdext(resource a, resource b) Calculate GCD and multipliers (array)
gmp_hamdist(resource a, resource b) Hamming distance (int)
gmp_init(mixed number, [int base]) Create GMP number (resource)
gmp_intval(resource gmpnumber) Convert GMP number to integer (int)
gmp_invert(resource a, resource b) Inverse by modulo (resource)
gmp_jacobi(resource a, resource p) Jacobi symbol (int)
gmp_legendre(resource a, resource p) Legendre symbol (int)
gmp_mod(resource n, resource d) Modulo operation (resource)
gmp_mul(resource a, resource b) Multiply numbers (resource)
gmp_neg(resource a) Negate number (resource)
gmp_nextprime(int a) Find next prime number (resource)
gmp_or(resource a, resource b) Bitwise OR (resource)
gmp_perfect_square(resource a) Perfect square check (bool)
gmp_popcount(resource a) Population count (int)
gmp_pow(resource base, int exp) Raise number into power (resource)
gmp_powm(resource base, resource exp, resource mod) Raise number into power with modulo (resource)
gmp_prob_prime(resource a, [int reps]) Check if number is "probably prime" (int)
gmp_random([int limiter]) Random number (resource)
gmp_scan0(resource a, int start) Scan for 0 (int)
gmp_scan1(resource a, int start) Scan for 1 (int)
gmp_setbit(resource a, int index, [bool set_clear]) Set bit (null)
gmp_sign(resource a) Sign of number (int)
gmp_sqrt(resource a) Calculate square root (resource)
gmp_sqrtrem(resource a) Square root with remainder (array)
gmp_strval(resource gmpnumber, [int base]) Convert GMP number to string (string)
gmp_sub(resource a, resource b) Subtract numbers (resource)
gmp_testbit(resource a, int index) Tests if a bit is set (bool)
gmp_xor(resource a, resource b) Bitwise XOR (resource)
gnupg_adddecryptkey(resource identifier, string fingerprint, string passphrase) Add a key for decryption (bool)
gnupg_addencryptkey(resource identifier, string fingerprint) Add a key for encryption (bool)
gnupg_addsignkey(resource identifier, string fingerprint, [string passphrase]) Add a key for signing (bool)
gnupg_cleardecryptkeys(resource identifier) Removes all keys which were set for decryption before (bool)
gnupg_clearencryptkeys(resource identifier) Removes all keys which were set for encryption before (bool)
gnupg_clearsignkeys(resource identifier) Removes all keys which were set for signing before (bool)
gnupg_decrypt(resource identifier, string text) Decrypts a given text (string)
gnupg_decryptverify(resource identifier, string text, string &plaintext) Decrypts and verifies a given text (array)
gnupg_encrypt(resource identifier, string plaintext) Encrypts a given text (string)
gnupg_encryptsign(resource identifier, string plaintext) Encrypts and signs a given text (string)
gnupg_export(resource identifier, string fingerprint) Exports a key (string)
gnupg_geterror(resource identifier) Returns the errortext, if a function fails (string)
gnupg_getprotocol(resource identifier) Returns the currently active protocol for all operations (int)
gnupg_import(resource identifier, string keydata) Imports a key (array)
gnupg_init() Initialize a connection (resource)
gnupg_keyinfo(resource identifier, string pattern) Returns an array with information about all keys that matches the given pattern (array)
gnupg_setarmor(resource identifier, int armor) Toggle armored output (bool)
gnupg_seterrormode(resource identifier, int errormode) Sets the mode for error_reporting (null)
gnupg_setsignmode(resource identifier, int signmode) Sets the mode for signing (bool)
gnupg_sign(resource identifier, string plaintext) Signs a given text (string)
gnupg_verify(resource identifier, string signed_text, string signature, [string &plaintext]) Verifies a signed text (array)
>setBorderStyle(float width, int dash_on, int dash_off) Set the border style of the annotation (HaruAnnotation: bool)
>setHighlightMode(int mode) Set the highlighting mode of the annotation (HaruAnnotation: bool)
>setIcon(int icon) Set the icon style of the annotation (HaruAnnotation: bool)
>setOpened(bool opened) Set the initial state of the annotation (HaruAnnotation: bool)
>setFit() Set the appearance of the page to fit the window (HaruDestination: bool)
>setFitB() Set the appearance of the page to fit the bounding box of the page within the window (HaruDestination: bool)
>setFitBH(float top) Set the appearance of the page to fit the width of the bounding box (HaruDestination: bool)
>setFitBV(float left) Set the appearance of the page to fit the height of the boudning box (HaruDestination: bool)
>setFitH(float top) Set the appearance of the page to fit the window width (HaruDestination: bool)
>setFitR(float left, float bottom, float right, float top) Set the appearance of the page to fit the specified rectangle (HaruDestination: bool)
>setFitV(float left) Set the appearance of the page to fit the window height (HaruDestination: bool)
>setXYZ(float left, float top, float zoom) Set the appearance of the page (HaruDestination: bool)
>addPage() Add new page to the document (HaruDoc: object)
>addPageLabel(int first_page, int style, int first_num, [string prefix]) Set the numbering style for the specified range of pages (HaruDoc: bool)
HaruDoc() Construct new HaruDoc instance (new)
>createOutline(string title, [object parent_outline, [object encoder]]) Create a HaruOutline instance (HaruDoc: object)
>getCurrentEncoder() Get HaruEncoder currently used in the document (HaruDoc: object)
>getCurrentPage() Return current page of the document (HaruDoc: object)
>getEncoder(string encoding) Get HaruEncoder instance for the specified encoding (HaruDoc: object)
>getFont(string fontname, [string encoding]) Get HaruFont instance (HaruDoc: object)
>getInfoAttr(int type) Get current value of the specified document attribute (HaruDoc: string)
>getPageLayout() Get current page layout (HaruDoc: int)
>getPageMode() Get current page mode (HaruDoc: int)
>getStreamSize() Get the size of the temporary stream (HaruDoc: int)
>insertPage(object page) Insert new page just before the specified page (HaruDoc: object)
>loadJPEG(string filename) Load a JPEG image (HaruDoc: object)
>loadPNG(string filename, [bool deferred]) Load PNG image and return HaruImage instance (HaruDoc: object)
>loadRaw(string filename, int width, int height, int color_space) Load a RAW image (HaruDoc: object)
>loadTTC(string fontfile, int index, [bool embed]) Load the font with the specified index from TTC file (HaruDoc: string)
>loadTTF(string fontfile, [bool embed]) Load TTF font file (HaruDoc: string)
>loadType1(string afmfile, [string pfmfile]) Load Type1 font (HaruDoc: string)
>output() Write the document data to the output buffer (HaruDoc: bool)
>readFromStream(int bytes) Read data from the temporary stream (HaruDoc: string)
>resetError() Reset error state of the document handle (HaruDoc: bool)
>resetStream() Rewind the temporary stream (HaruDoc: bool)
>save(string file) Save the document into the specified file (HaruDoc: bool)
>saveToStream() Save the document into a temporary stream (HaruDoc: bool)
>setCompressionMode(int mode) Set compression mode for the document (HaruDoc: bool)
>setCurrentEncoder(string encoding) Set the current encoder for the document (HaruDoc: bool)
>setEncryptionMode(int mode, [int key_len]) Set encryption mode for the document (HaruDoc: bool)
>setInfoAttr(int type, string info) Set the info attribute of the document (HaruDoc: bool)
>setInfoDateAttr(int type, int year, int month, int day, int hour, int min, int sec, string ind, int off_hour, int off_min) Set the datetime info attributes of the document (HaruDoc: bool)
>setOpenAction(object destination) Define which page is shown when the document is opened (HaruDoc: bool)
>setPageLayout(int layout) Set how pages should be displayed (HaruDoc: bool)
>setPageMode(int mode) Set how the document should be displayed (HaruDoc: bool)
>setPagesConfiguration(int page_per_pages) Set the number of pages per set of pages (HaruDoc: bool)
>setPassword(string owner_password, string user_password) Set owner and user passwords for the document (HaruDoc: bool)
>setPermission(int permission) Set permissions for the document (HaruDoc: bool)
>useCNSEncodings() Enable Chinese simplified encodings (HaruDoc: bool)
>useCNSFonts() Enable builtin Chinese simplified fonts (HaruDoc: bool)
>useCNTEncodings() Enable Chinese traditional encodings (HaruDoc: bool)
>useCNTFonts() Enable builtin Chinese traditional fonts (HaruDoc: bool)
>useJPEncodings() Enable Japanese encodings (HaruDoc: bool)
>useJPFonts() Enable builtin Japanese fonts (HaruDoc: bool)
>useKREncodings() Enable Korean encodings (HaruDoc: bool)
>useKRFonts() Enable builtin Korean fonts (HaruDoc: bool)
>getByteType(string text, int index) Get the type of the byte in the text (HaruEncoder: int)
>getType() Get the type of the encoder (HaruEncoder: int)
>getUnicode(int character) Convert the specified character to unicode (HaruEncoder: int)
>getWritingMode() Get the writing mode of the encoder (HaruEncoder: int)
>getAscent() Get the vertical ascent of the font (HaruFont: int)
>getCapHeight() Get the distance from the baseline of uppercase letters (HaruFont: int)
>getDescent() Get the vertical descent of the font (HaruFont: int)
>getEncodingName() Get the name of the encoding (HaruFont: string)
>getFontName() Get the name of the font (HaruFont: string)
>getTextWidth(string text) Get the total width of the text, number of characters, number of words and number of spaces (HaruFont: array)
>getUnicodeWidth(int character) Get the width of the character in the font (HaruFont: int)
>getXHeight() Get the distance from the baseline of lowercase letters (HaruFont: int)
>measureText(string text, float width, float font_size, float char_space, float word_space, [bool word_wrap]) Calculate the number of characters which can be included within the specified width (HaruFont: int)
>getBitsPerComponent() Get the number of bits used to describe each color component of the image (HaruImage: int)
>getColorSpace() Get the name of the color space (HaruImage: string)
>getHeight() Get the height of the image (HaruImage: int)
>getSize() Get size of the image (HaruImage: array)
>getWidth() Get the width of the image (HaruImage: int)
>setColorMask(int rmin, int rmax, int gmin, int gmax, int bmin, int bmax) Set the color mask of the image (HaruImage: bool)
>setMaskImage(object mask_image) Set the image mask (HaruImage: bool)
>setDestination(object destination) Set the destination for the outline (HaruOutline: bool)
>setOpened(bool opened) Set the initial state of the outline (HaruOutline: bool)
>arc(float x, float y, float ray, float ang1, float ang2) Append an arc to the current path (HaruPage: bool)
>beginText() Begin a text object and set the current text position to (0,0) (HaruPage: bool)
>circle(float x, float y, float ray) Append a circle to the current path (HaruPage: bool)
>closePath() Append a straight line from the current point to the start point of the path (HaruPage: bool)
>concat(float a, float b, float c, float d, float x, float y) Concatenate current transformation matrix of the page and the specified matrix (HaruPage: bool)
>createDestination() Create new HaruDestination instance (HaruPage: object)
>createLinkAnnotation(array rectangle, object destination) Create new HaruAnnotation instance (HaruPage: object)
>createTextAnnotation(array rectangle, string text, [object encoder]) Create new HaruAnnotation instance (HaruPage: object)
>createURLAnnotation(array rectangle, string url) Create and return new HaruAnnotation instance (HaruPage: object)
>curveTo(float x1, float y1, float x2, float y2, float x3, float y3) Append a Bezier curve to the current path (HaruPage: bool)
>curveTo2(float x2, float y2, float x3, float y3) Append a Bezier curve to the current path (HaruPage: bool)
>curveTo3(float x1, float y1, float x3, float y3) Append a Bezier curve to the current path (HaruPage: bool)
>drawImage(object image, float x, float y, float width, float height) Show image at the page (HaruPage: bool)
>ellipse(float x, float y, float xray, float yray) Append an ellipse to the current path (HaruPage: bool)
>endPath() End current path object without filling and painting operations (HaruPage: bool)
>endText() End current text object (HaruPage: bool)
>eofill() Fill current path using even-odd rule (HaruPage: bool)
>eoFillStroke([bool close_path]) Fill current path using even-odd rule, then paint the path (HaruPage: bool)
>fill() Fill current path using nonzero winding number rule (HaruPage: bool)
>fillStroke([bool close_path]) Fill current path using nonzero winding number rule, then paint the path (HaruPage: bool)
>getCharSpace() Get the current value of character spacing (HaruPage: float)
>getCMYKFill() Get the current filling color (HaruPage: array)
>getCMYKStroke() Get the current stroking color (HaruPage: array)
>getCurrentFont() Get the currently used font (HaruPage: object)
>getCurrentFontSize() Get the current font size (HaruPage: float)
>getCurrentPos() Get the current position for path painting (HaruPage: array)
>getCurrentTextPos() Get the current position for text printing (HaruPage: array)
>getDash() Get the current dash pattern (HaruPage: array)
>getFillingColorSpace() Get the current filling color space (HaruPage: int)
>getFlatness() Get the flatness of the page (HaruPage: float)
>getGMode() Get the current graphics mode (HaruPage: int)
>getGrayFill() Get the current filling color (HaruPage: float)
>getGrayStroke() Get the current stroking color (HaruPage: float)
>getHeight() Get the height of the page (HaruPage: float)
>getHorizontalScaling() Get the current value of horizontal scaling (HaruPage: float)
>getLineCap() Get the current line cap style (HaruPage: int)
>getLineJoin() Get the current line join style (HaruPage: int)
>getLineWidth() Get the current line width (HaruPage: float)
>getMiterLimit() Get the value of miter limit (HaruPage: float)
>getRGBFill() Get the current filling color (HaruPage: array)
>getRGBStroke() Get the current stroking color (HaruPage: array)
>getStrokingColorSpace() Get the current stroking color space (HaruPage: int)
>getTextLeading() Get the current value of line spacing (HaruPage: float)
>getTextMatrix() Get the current text transformation matrix of the page (HaruPage: array)
>getTextRenderingMode() Get the current text rendering mode (HaruPage: int)
>getTextRise() Get the current value of text rising (HaruPage: float)
>getTextWidth(string text) Get the width of the text using current fontsize, character spacing and word spacing (HaruPage: float)
>getTransMatrix() Get the current transformation matrix of the page (HaruPage: array)
>getWidth() Get the width of the page (HaruPage: float)
>getWordSpace() Get the current value of word spacing (HaruPage: float)
>lineTo(float x, float y) Draw a line from the current point to the specified point (HaruPage: bool)
>measureText(string text, float width, [bool wordwrap]) Calculate the number of characters which can be included within the specified width (HaruPage: int)
>moveTextPos(float x, float y, [bool set_leading]) Move text position to the specified offset (HaruPage: bool)
>moveTo(float x, float y) Set starting point for new drawing path (HaruPage: bool)
>moveToNextLine() Move text position to the start of the next line (HaruPage: bool)
>rectangle(float x, float y, float width, float height) Append a rectangle to the current path (HaruPage: bool)
>setCharSpace(float char_space) Set character spacing for the page (HaruPage: bool)
>setCMYKFill(float c, float m, float y, float k) Set filling color for the page (HaruPage: bool)
>setCMYKStroke(float c, float m, float y, float k) Set stroking color for the page (HaruPage: bool)
>setDash(array pattern, int phase) Set the dash pattern for the page (HaruPage: bool)
>setFlatness(float flatness) Set flatness for the page (HaruPage: bool)
>setFontAndSize(object font, float size) Set font and fontsize for the page (HaruPage: bool)
>setGrayFill(float value) Set filling color for the page (HaruPage: bool)
>setGrayStroke(float value) Sets stroking color for the page (HaruPage: bool)
>setHeight(float height) Set height of the page (HaruPage: bool)
>setHorizontalScaling(float scaling) Set horizontal scaling for the page (HaruPage: bool)
>setLineCap(int cap) Set the shape to be used at the ends of lines (HaruPage: bool)
>setLineJoin(int join) Set line join style for the page (HaruPage: bool)
>setLineWidth(float width) Set line width for the page (HaruPage: bool)
>setMiterLimit(float limit) Set the current value of the miter limit of the page (HaruPage: bool)
>setRGBFill(float r, float g, float b) Set filling color for the page (HaruPage: bool)
>setRGBStroke(float r, float g, float b) Set stroking color for the page (HaruPage: bool)
>setRotate(int angle) Set rotation angle of the page (HaruPage: bool)
>setSize(int size, int direction) Set size and direction of the page (HaruPage: bool)
>setSlideShow(int type, float disp_time, float trans_time) Set transition style for the page (HaruPage: bool)
>setTextLeading(float text_leading) Set text leading (line spacing) for the page (HaruPage: bool)
>setTextMatrix(float a, float b, float c, float d, float x, float y) Set the current text transformation matrix of the page (HaruPage: bool)
>setTextRenderingMode(int mode) Set text rendering mode for the page (HaruPage: bool)
>setTextRise(float rise) Set the current value of text rising (HaruPage: bool)
>setWidth(float width) Set width of the page (HaruPage: bool)
>setWordSpace(float word_space) Set word spacing for the page (HaruPage: bool)
>showText(string text) Print text at the current position of the page (HaruPage: bool)
>showTextNextLine(string text, [float word_space, [float char_space]]) Move the current position to the start of the next line and print the text (HaruPage: bool)
>stroke([bool close_path]) Paint current path (HaruPage: bool)
>textOut(float x, float y, string text) Print the text on the specified position (HaruPage: bool)
>textRect(float left, float top, float right, float bottom, string text, [int align]) Print the text inside the specified region (HaruPage: bool)
hash_algos() Return a list of registered hashing algorithms (array)
hash_copy(resource context) Copy hashing context (resource)
hash_file(string algo, string filename, [bool raw_output]) Generate a hash value using the contents of a given file (string)
hash_final(resource context, [bool raw_output]) Finalize an incremental hash and return resulting digest (string)
hash_hmac_file(string algo, string filename, string key, [bool raw_output]) Generate a keyed hash value using the HMAC method and the contents of a given file (string)
hash_hmac(string algo, string data, string key, [bool raw_output]) Generate a keyed hash value using the HMAC method (string)
hash_init(string algo, [int options, [string key]]) Initialize an incremental hashing context (resource)
hash_update_file(resource context, string filename, [resource context]) Pump data into an active hashing context from a file (bool)
hash_update_stream(resource context, resource handle, [int length]) Pump data into an active hashing context from an open stream (int)
hash_update(resource context, string data) Pump data into an active hashing context (bool)
hash(string algo, string data, [bool raw_output]) Generate a hash value (message digest) (string)
HttpDeflateStream([int flags]) HttpDeflateStream class constructor (new)
>factory([int flags, [string class_name]]) HttpDeflateStream class factory (HttpDeflateStream: HttpDeflateStream)
>finish([string data]) Finalize deflate stream (HttpDeflateStream: string)
>flush([string data]) Flush deflate stream (HttpDeflateStream: string)
>update(string data) Update deflate stream (HttpDeflateStream: string)
HttpInflateStream([int flags]) HttpInflateStream class constructor (new)
>factory([int flags, [string class_name]]) HttpInflateStream class factory (HttpInflateStream: HttpInflateStream)
>finish([string data]) Finalize inflate stream (HttpInflateStream: string)
>flush([string data]) Flush inflate stream (HttpInflateStream: string)
>update(string data) Update inflate stream (HttpInflateStream: string)
>addHeaders(array headers, [bool append]) Add headers (HttpMessage: null)
HttpMessage([string message]) HttpMessage constructor (new)
>detach() Detach HttpMessage (HttpMessage: HttpMessage)
>factory([string raw_message, [string class_name]]) Create HttpMessage from string (HttpMessage: HttpMessage)
>fromEnv(int message_type, [string class_name]) Create HttpMessage from environment (HttpMessage: HttpMessage)
>fromString([string raw_message, [string class_name]]) Create HttpMessage from string (HttpMessage: HttpMessage)
>getBody() Get message body (HttpMessage: string)
>getHeader(string header) Get header (HttpMessage: string)
>getHeaders() Get message headers (HttpMessage: array)
>getHttpVersion() Get HTTP version (HttpMessage: string)
>getParentMessage() Get parent message (HttpMessage: HttpMessage)
>getRequestMethod() Get request method (HttpMessage: string)
>getRequestUrl() Get request URL (HttpMessage: string)
>getResponseCode() Get response code (HttpMessage: int)
>getResponseStatus() Get response status (HttpMessage: string)
>getType() Get message type (HttpMessage: int)
>guessContentType(string magic_file, [int magic_mode]) Guess content type (HttpMessage: string)
>prepend(HttpMessage message, [bool top]) Prepend message(s) (HttpMessage: null)
>reverse() Reverse message chain (HttpMessage: HttpMessage)
>send() Send message (HttpMessage: bool)
>setBody(string body) Set message body (HttpMessage: null)
>setHeaders(array headers) Set headers (HttpMessage: null)
>setHttpVersion(string version) Set HTTP version (HttpMessage: bool)
>setRequestMethod(string method) Set request method (HttpMessage: bool)
>setRequestUrl(string url) Set request URL (HttpMessage: bool)
>setResponseCode(int code) Set response code (HttpMessage: bool)
>setResponseStatus(string status) Set response status (HttpMessage: bool)
>setType(int type) Set message type (HttpMessage: null)
>toMessageTypeObject() Create HTTP object regarding message type (HttpMessage: HttpRequest|HttpResponse)
>toString([bool include_parent]) Get string representation (HttpMessage: string)
HttpQueryString([bool global, [mixed add]]) HttpQueryString constructor (new)
>get([string key, [mixed type, [mixed defval, [bool delete]]]]) Get (part of) query string (HttpQueryString: mixed)
>mod(mixed params) Modifiy query string copy (HttpQueryString: HttpQueryString)
>set(mixed params) Set query string params (HttpQueryString: string)
>singleton([bool global]) HttpQueryString singleton (HttpQueryString: HttpQueryString)
>toArray() Get query string as array (HttpQueryString: array)
>toString() Get query string (HttpQueryString: string)
>xlate(string ie, string oe) Change query strings charset (HttpQueryString: bool)
>addCookies(array cookies) Add cookies (HttpRequest: bool)
>addHeaders(array headers) Add headers (HttpRequest: bool)
>addPostFields(array post_data) Add post fields (HttpRequest: bool)
>addPostFile(string name, string file, [string content_type]) Add post file (HttpRequest: bool)
>addPutData(string put_data) Add put data (HttpRequest: bool)
>addQueryData(array query_params) Add query data (HttpRequest: bool)
>addRawPostData(string raw_post_data) Add raw post data (HttpRequest: bool)
>addSslOptions(array options) Add ssl options (HttpRequest: bool)
>clearHistory() Clear history (HttpRequest: null)
HttpRequest([string url, [int request_method, [array options]]]) HttpRequest constructor (new)
>enableCookies() Enable cookies (HttpRequest: bool)
>getContentType() Get content type (HttpRequest: string)
>getCookies() Get cookies (HttpRequest: array)
>getHeaders() Get headers (HttpRequest: array)
>getHistory() Get history (HttpRequest: HttpMessage)
>getMethod() Get method (HttpRequest: int)
>getOptions() Get options (HttpRequest: array)
>getPostFields() Get post fields (HttpRequest: array)
>getPostFiles() Get post files (HttpRequest: array)
>getPutData() Get put data (HttpRequest: string)
>getPutFile() Get put file (HttpRequest: string)
>getQueryData() Get query data (HttpRequest: string)
>getRawPostData() Get raw post data (HttpRequest: string)
>getRawRequestMessage() Get raw request message (HttpRequest: string)
>getRawResponseMessage() Get raw response message (HttpRequest: string)
>getRequestMessage() Get request message (HttpRequest: HttpMessage)
>getResponseBody() Get response body (HttpRequest: string)
>getResponseCode() Get response code (HttpRequest: int)
>getResponseCookies([int flags, [array allowed_extras]]) Get response cookie(s) (HttpRequest: array)
>getResponseData() Get response data (HttpRequest: array)
>getResponseHeader([string name]) Get response header(s) (HttpRequest: mixed)
>getResponseInfo([string name]) Get response info (HttpRequest: mixed)
>getResponseMessage() Get response message (HttpRequest: HttpMessage)
>getResponseStatus() Get response status (HttpRequest: string)
>getSslOptions() Get ssl options (HttpRequest: array)
>getUrl() Get url (HttpRequest: string)
>resetCookies([bool session_only]) Reset cookies (HttpRequest: bool)
>send() Send request (HttpRequest: HttpMessage)
>setContentType(string content_type) Set content type (HttpRequest: bool)
>setCookies([array cookies]) Set cookies (HttpRequest: bool)
>setHeaders([array headers]) Set headers (HttpRequest: bool)
>setMethod(int request_method) Set method (HttpRequest: bool)
>setOptions([array options]) Set options (HttpRequest: bool)
>setPostFields(array post_data) Set post fields (HttpRequest: bool)
>setPostFiles(array post_files) Set post files (HttpRequest: bool)
>setPutData([string put_data]) Set put data (HttpRequest: bool)
>setPutFile([string file]) Set put file (HttpRequest: bool)
>setQueryData(mixed query_data) Set query data (HttpRequest: bool)
>setRawPostData([string raw_post_data]) Set raw post data (HttpRequest: bool)
>setSslOptions([array options]) Set ssl options (HttpRequest: bool)
>setUrl(string url) Set URL (HttpRequest: bool)
>attach(HttpRequest request) Attach HttpRequest (HttpRequestPool: bool)
HttpRequestPool([HttpRequest request]) HttpRequestPool constructor (new)
>__destruct() HttpRequestPool destructor (HttpRequestPool: null)
>detach(HttpRequest request) Detach HttpRequest (HttpRequestPool: bool)
>getAttachedRequests() Get attached requests (HttpRequestPool: array)
>getFinishedRequests() Get finished requests (HttpRequestPool: array)
>reset() Reset request pool (HttpRequestPool: null)
>send() Send all requests (HttpRequestPool: bool)
>socketPerform() Perform socket actions (HttpRequestPool: bool)
>socketSelect() Perform socket select (HttpRequestPool: bool)
>capture() Capture script output (HttpResponse: null)
>getBufferSize() Get buffer size (HttpResponse: int)
>getCache() Get cache (HttpResponse: bool)
>getCacheControl() Get cache control (HttpResponse: string)
>getContentDisposition() Get content disposition (HttpResponse: string)
>getContentType() Get content type (HttpResponse: string)
>getData() Get data (HttpResponse: string)
>getETag() Get ETag (HttpResponse: string)
>getFile() Get file (HttpResponse: string)
>getGzip() Get gzip (HttpResponse: bool)
>getHeader([string name]) Get header (HttpResponse: mixed)
>getLastModified() Get last modified (HttpResponse: int)
>getRequestBody() Get request body (HttpResponse: string)
>getRequestBodyStream() Get request body stream (HttpResponse: resource)
>getRequestHeaders() Get request headers (HttpResponse: array)
>getStream() Get Stream (HttpResponse: resource)
>getThrottleDelay() Get throttle delay (HttpResponse: double)
>guessContentType(string magic_file, [int magic_mode]) Guess content type (HttpResponse: string)
>redirect([string url, [array params, [bool session, [int status]]]]) Redirect (HttpResponse: null)
>send([bool clean_ob]) Send response (HttpResponse: bool)
>setBufferSize(int bytes) Set buffer size (HttpResponse: bool)
>setCache(bool cache) Set cache (HttpResponse: bool)
>setCacheControl(string control, [int max_age, [bool must_revalidate]]) Set cache control (HttpResponse: bool)
>setContentDisposition(string filename, [bool inline]) Set content disposition (HttpResponse: bool)
>setContentType(string content_type) Set content type (HttpResponse: bool)
>setData(mixed data) Set data (HttpResponse: bool)
>setETag(string etag) Set ETag (HttpResponse: bool)
>setFile(string file) Set file (HttpResponse: bool)
>setGzip(bool gzip) Set gzip (HttpResponse: bool)
>setHeader(string name, [mixed value, [bool replace]]) Set header (HttpResponse: bool)
>setLastModified(int timestamp) Set last modified (HttpResponse: bool)
>setStream(resource stream) Set stream (HttpResponse: bool)
>setThrottleDelay(float seconds) Set throttle delay (HttpResponse: bool)
>status(int status) Send HTTP response status (HttpResponse: bool)
hw_array2objrec(array object_array) Convert attributes from object array to object record (string)
hw_changeobject(int link, int objid, array attributes) Changes attributes of an object (obsolete) (bool)
hw_children(int connection, int objectID) Object ids of children (array)
hw_childrenobj(int connection, int objectID) Object records of children (array)
hw_close(int connection) Closes the Hyperwave connection (bool)
hw_connect(string host, int port, [string username], string password) Opens a connection (int)
hw_connection_info(int link) Prints information about the connection to Hyperwave server (null)
hw_cp(int connection, array object_id_array, int destination_id) Copies objects (int)
hw_deleteobject(int connection, int object_to_delete) Deletes object (bool)
hw_docbyanchor(int connection, int anchorID) Object id object belonging to anchor (int)
hw_docbyanchorobj(int connection, int anchorID) Object record object belonging to anchor (string)
hw_document_attributes(int hw_document) Object record of hw_document (string)
hw_document_bodytag(int hw_document, [string prefix]) Body tag of hw_document (string)
hw_document_content(int hw_document) Returns content of hw_document (string)
hw_document_setcontent(int hw_document, string content) Sets/replaces content of hw_document (bool)
hw_document_size(int hw_document) Size of hw_document (int)
hw_dummy(int link, int id, int msgid) Hyperwave dummy function (string)
hw_edittext(int connection, int hw_document) Retrieve text document (bool)
hw_error(int connection) Error number (int)
hw_errormsg(int connection) Returns error message (string)
hw_free_document(int hw_document) Frees hw_document (bool)
hw_getanchors(int connection, int objectID) Object ids of anchors of document (array)
hw_getanchorsobj(int connection, int objectID) Object records of anchors of document (array)
hw_getandlock(int connection, int objectID) Return object record and lock object (string)
hw_getchildcoll(int connection, int objectID) Object ids of child collections (array)
hw_getchildcollobj(int connection, int objectID) Object records of child collections (array)
hw_getchilddoccoll(int connection, int objectID) Object ids of child documents of collection (array)
hw_getchilddoccollobj(int connection, int objectID) Object records of child documents of collection (array)
hw_getobject(int connection, mixed objectID, [string query]) Object record (mixed)
hw_getobjectbyquery(int connection, string query, int max_hits) Search object (array)
hw_getobjectbyquerycoll(int connection, int objectID, string query, int max_hits) Search object in collection (array)
hw_getobjectbyquerycollobj(int connection, int objectID, string query, int max_hits) Search object in collection (array)
hw_getobjectbyqueryobj(int connection, string query, int max_hits) Search object (array)
hw_getparents(int connection, int objectID) Object ids of parents (array)
hw_getparentsobj(int connection, int objectID) Object records of parents (array)
hw_getrellink(int link, int rootid, int sourceid, int destid) Get link from source to dest relative to rootid (string)
hw_getremote(int connection, int objectID) Gets a remote document (int)
hw_getremotechildren(int connection, string object_record) Gets children of remote document (mixed)
hw_getsrcbydestobj(int connection, int objectID) Returns anchors pointing at object (array)
hw_gettext(int connection, int objectID, [mixed rootID/prefix]) Retrieve text document (int)
hw_getusername(int connection) Name of currently logged in user (string)
hw_identify(int link, string username, string password) Identifies as user (string)
hw_incollections(int connection, array object_id_array, array collection_id_array, int return_collections) Check if object ids in collections (array)
hw_info(int connection) Info about connection (string)
hw_inscoll(int connection, int objectID, array object_array) Insert collection (int)
hw_insdoc(resource connection, int parentID, string object_record, [string text]) Insert document (int)
hw_insertanchors(int hwdoc, array anchorecs, array dest, [array urlprefixes]) Inserts only anchors into text (bool)
hw_insertdocument(int connection, int parent_id, int hw_document) Upload any document (int)
hw_insertobject(int connection, string object_rec, string parameter) Inserts an object record (int)
hw_mapid(int connection, int server_id, int object_id) Maps global id on virtual local id (int)
hw_modifyobject(int connection, int object_to_change, array remove, array add, [int mode]) Modifies object record (bool)
hw_mv(int connection, array object_id_array, int source_id, int destination_id) Moves objects (int)
hw_new_document(string object_record, string document_data, int document_size) Create new document (int)
hw_objrec2array(string object_record, [array format]) Convert attributes from object record to object array (array)
hw_output_document(int hw_document) Prints hw_document (bool)
hw_pconnect(string host, int port, [string username], string password) Make a persistent database connection (int)
hw_pipedocument(int connection, int objectID, [array url_prefixes]) Retrieve any document (int)
hw_root() Root object id (int)
hw_setlinkroot(int link, int rootid) Set the id to which links are calculated (int)
hw_stat(int link) Returns status string (string)
hw_unlock(int connection, int objectID) Unlock object (bool)
hw_who(int connection) List of currently logged in users (array)
>key() Returns key of the attribute (hw_api_attribute: string)
>langdepvalue(string language) Returns value for a given language (hw_api_attribute: string)
>value() Returns value of the attribute (hw_api_attribute: string)
>values() Returns all values of the attribute (hw_api_attribute: array)
hw_api_attribute([string name, [string value]]) Creates instance of class hw_api_attribute (HW_API_Attribute)
>checkin(array parameter) Checks in an object (hw_api: bool)
>checkout(array parameter) Checks out an object (hw_api: bool)
>children(array parameter) Returns children of an object (hw_api: array)
>mimetype() Returns mimetype (hw_api_content: string)
>read(string buffer, int len) Read content (hw_api_content: string)
>content(array parameter) Returns content of an object (hw_api: HW_API_Content)
>copy(array parameter) Copies physically (hw_api: hw_api_content)
>dbstat(array parameter) Returns statistics about database server (hw_api: hw_api_object)
>dcstat(array parameter) Returns statistics about document cache server (hw_api: hw_api_object)
>dstanchors(array parameter) Returns a list of all destination anchors (hw_api: array)
>dstofsrcanchor(array parameter) Returns destination of a source anchor (hw_api: hw_api_object)
>count() Returns number of reasons (hw_api_error: int)
>reason() Returns reason of error (hw_api_error: HW_API_Reason)
>find(array parameter) Search for objects (hw_api: array)
>ftstat(array parameter) Returns statistics about fulltext server (hw_api: hw_api_object)
hwapi_hgcsp(string hostname, [int port]) Returns object of class hw_api (HW_API)
>hwstat(array parameter) Returns statistics about Hyperwave server (hw_api: hw_api_object)
>identify(array parameter) Log into Hyperwave Server (hw_api: bool)
>info(array parameter) Returns information about server configuration (hw_api: array)
>insert(array parameter) Inserts a new object (hw_api: hw_api_object)
>insertanchor(array parameter) Inserts a new object of type anchor (hw_api: hw_api_object)
>insertcollection(array parameter) Inserts a new object of type collection (hw_api: hw_api_object)
>insertdocument(array parameter) Inserts a new object of type document (hw_api: hw_api_object)
>link(array parameter) Creates a link to an object (hw_api: bool)
>lock(array parameter) Locks an object (hw_api: bool)
>move(array parameter) Moves object between collections (hw_api: bool)
hw_api_content(string content, string mimetype) Create new instance of class hw_api_content (HW_API_Content)
>assign(array parameter) Clones object (hw_api_object: bool)
>attreditable(array parameter) Checks whether an attribute is editable (hw_api_object: bool)
>count(array parameter) Returns number of attributes (hw_api_object: int)
>insert(HW_API_Attribute attribute) Inserts new attribute (hw_api_object: bool)
hw_api_object(array parameter) Creates a new instance of class hw_api_object (hw_api_object)
>remove(string name) Removes attribute (hw_api_object: bool)
>title(array parameter) Returns the title attribute (hw_api_object: string)
>value(string name) Returns value of attribute (hw_api_object: string)
>object(array parameter) Retrieve attribute information (hw_api: hw_api_object)
>objectbyanchor(array parameter) Returns the object an anchor belongs to (hw_api: hw_api_object)
>parents(array parameter) Returns parents of an object (hw_api: array)
>description() Returns description of reason (hw_api_reason: string)
>type() Returns type of reason (hw_api_reason: HW_API_Reason)
>remove(array parameter) Delete an object (hw_api: bool)
>replace(array parameter) Replaces an object (hw_api: hw_api_object)
>setcommittedversion(array parameter) Commits version other than last version (hw_api: hw_api_object)
>srcanchors(array parameter) Returns a list of all source anchors (hw_api: array)
>srcsofdst(array parameter) Returns source of a destination object (hw_api: array)
>unlock(array parameter) Unlocks a locked object (hw_api: bool)
>user(array parameter) Returns the own user object (hw_api: hw_api_object)
>userlist(array parameter) Returns a list of all logged in users (hw_api: array)
locale_get_default() Get the default Locale (string)
locale_set_default(string name) Set the default Locale (bool)
ibase_add_user(resource service_handle, string user_name, string password, [string first_name, [string middle_name, [string last_name]]]) Add a user to a security database (only for IB6 or later) (bool)
ibase_affected_rows([resource link_identifier]) Return the number of rows that were affected by the previous query (int)
ibase_backup(resource service_handle, string source_db, string dest_file, [int options, [bool verbose]]) Initiates a backup task in the service manager and returns immediately (mixed)
ibase_blob_add(resource blob_handle, string data) Add data into a newly created blob (null)
ibase_blob_cancel(resource blob_handle) Cancel creating blob (bool)
ibase_blob_close(resource blob_handle) Close blob (mixed)
ibase_blob_create([resource link_identifier]) Create a new blob for adding data (resource)
ibase_blob_echo(string blob_id) Output blob contents to browser (bool)
ibase_blob_echo(resource link_identifier, string blob_id) Output blob contents to browser (bool)
ibase_blob_get(resource blob_handle, int len) Get len bytes data from open blob (string)
ibase_blob_import(resource link_identifier, resource file_handle) Create blob, copy file in it, and close it (string)
ibase_blob_import(resource file_handle) Create blob, copy file in it, and close it (string)
ibase_blob_info(resource link_identifier, string blob_id) Return blob length and other useful info (array)
ibase_blob_info(string blob_id) Return blob length and other useful info (array)
ibase_blob_open(resource link_identifier, string blob_id) Open blob for retrieving data parts (resource)
ibase_blob_open(string blob_id) Open blob for retrieving data parts (resource)
ibase_close([resource connection_id]) Close a connection to an InterBase database (bool)
ibase_commit_ret([resource link_or_trans_identifier]) Commit a transaction without closing it (bool)
ibase_commit([resource link_or_trans_identifier]) Commit a transaction (bool)
ibase_connect([string database, [string username, [string password, [string charset, [int buffers, [int dialect, [string role, [int sync]]]]]]]]) Open a connection to an InterBase database (resource)
ibase_db_info(resource service_handle, string db, int action, [int argument]) Request statistics about a database (string)
ibase_delete_user(resource service_handle, string user_name) Delete a user from a security database (only for IB6 or later) (bool)
ibase_drop_db([resource connection]) Drops a database (bool)
ibase_errcode() Return an error code (int)
ibase_errmsg() Return error messages (string)
ibase_execute(resource query, [mixed bind_arg, [mixed ...]]) Execute a previously prepared query (resource)
ibase_fetch_assoc(resource result, [int fetch_flag]) Fetch a result row from a query as an associative array (array)
ibase_fetch_object(resource result_id, [int fetch_flag]) Get an object from a InterBase database (object)
ibase_fetch_row(resource result_identifier, [int fetch_flag]) Fetch a row from an InterBase database (array)
ibase_field_info(resource result, int field_number) Get information about a field (array)
ibase_free_event_handler(resource event) Cancels a registered event handler (bool)
ibase_free_query(resource query) Free memory allocated by a prepared query (bool)
ibase_free_result(resource result_identifier) Free a result set (bool)
ibase_gen_id(string generator, [int increment, [resource link_identifier]]) Increments the named generator and returns its new value (mixed)
ibase_maintain_db(resource service_handle, string db, int action, [int argument]) Execute a maintenance command on the database server (bool)
ibase_modify_user(resource service_handle, string user_name, string password, [string first_name, [string middle_name, [string last_name]]]) Modify a user to a security database (only for IB6 or later) (bool)
ibase_name_result(resource result, string name) Assigns a name to a result set (bool)
ibase_num_fields(resource result_id) Get the number of fields in a result set (int)
ibase_num_params(resource query) Return the number of parameters in a prepared query (int)
ibase_param_info(resource query, int param_number) Return information about a parameter in a prepared query (array)
ibase_pconnect([string database, [string username, [string password, [string charset, [int buffers, [int dialect, [string role, [int sync]]]]]]]]) Open a persistent connection to an InterBase database (resource)
ibase_prepare(string query) Prepare a query for later binding of parameter placeholders and execution (resource)
ibase_prepare(resource link_identifier, string query) Prepare a query for later binding of parameter placeholders and execution (resource)
ibase_prepare(resource link_identifier, string trans, string query) Prepare a query for later binding of parameter placeholders and execution (resource)
ibase_query([resource link_identifier], string query, [int bind_args]) Execute a query on an InterBase database (resource)
ibase_restore(resource service_handle, string source_file, string dest_db, [int options, [bool verbose]]) Initiates a restore task in the service manager and returns immediately (mixed)
ibase_rollback_ret([resource link_or_trans_identifier]) Roll back a transaction without closing it (bool)
ibase_rollback([resource link_or_trans_identifier]) Roll back a transaction (bool)
ibase_server_info(resource service_handle, int action) Request information about a database server (string)
ibase_service_attach(string host, string dba_username, string dba_password) Connect to the service manager (resource)
ibase_service_detach(resource service_handle) Disconnect from the service manager (bool)
ibase_set_event_handler(callback event_handler, string event_name1, [string event_name2, [string ...]]) Register a callback function to be called when events are posted (resource)
ibase_set_event_handler(resource connection, callback event_handler, string event_name1, [string event_name2, [string ...]]) Register a callback function to be called when events are posted (resource)
ibase_timefmt(string format, [int columntype]) Sets the format of timestamp, date and time type columns returned from queries (bool)
ibase_trans([int trans_args, [resource link_identifier]]) Begin a transaction (resource)
ibase_trans([resource link_identifier, [int trans_args]]) Begin a transaction (resource)
ibase_wait_event(string event_name1, [string event_name2, [string ...]]) Wait for an event to be posted by the database (string)
ibase_wait_event(resource connection, string event_name1, [string event_name2, [string ...]]) Wait for an event to be posted by the database (string)
db2_autocommit(resource connection, [bool value]) Returns or sets the AUTOCOMMIT state for a database connection (mixed)
db2_bind_param(resource stmt, int parameter-number, string variable-name, [int parameter-type, [int data-type, [int precision, [int scale]]]]) Binds a PHP variable to an SQL statement parameter (bool)
db2_client_info(resource connection) Returns an object with properties that describe the DB2 database client (object)
db2_close(resource connection) Closes a database connection (bool)
db2_column_privileges(resource connection, [string qualifier, [string schema, [string table-name, [string column-name]]]]) Returns a result set listing the columns and associated privileges for a table (resource)
db2_columns(resource connection, [string qualifier, [string schema, [string table-name, [string column-name]]]]) Returns a result set listing the columns and associated metadata for a table (resource)
db2_commit(resource connection) Commits a transaction (bool)
db2_conn_error([resource connection]) Returns a string containing the SQLSTATE returned by the last connection attempt (string)
db2_conn_errormsg([resource connection]) Returns the last connection error message and SQLCODE value (string)
db2_connect(string database, string username, string password, [array options]) Returns a connection to a database (resource)
db2_cursor_type(resource stmt) Returns the cursor type used by a statement resource (int)
db2_escape_string(string string_literal) Used to escape certain characters (string)
db2_exec(resource connection, string statement, [array options]) Executes an SQL statement directly (resource)
db2_execute(resource stmt, [array parameters]) Executes a prepared SQL statement (bool)
db2_fetch_array(resource stmt, [int row_number]) Returns an array, indexed by column position, representing a row in a result set (array)
db2_fetch_assoc(resource stmt, [int row_number]) Returns an array, indexed by column name, representing a row in a result set (array)
db2_fetch_both(resource stmt, [int row_number]) Returns an array, indexed by both column name and position, representing a row in a result set (array)
db2_fetch_object(resource stmt, [int row_number]) Returns an object with properties representing columns in the fetched row (object)
db2_fetch_row(resource stmt, [int row_number]) Sets the result set pointer to the next row or requested row (bool)
db2_field_display_size(resource stmt, mixed column) Returns the maximum number of bytes required to display a column (int)
db2_field_name(resource stmt, mixed column) Returns the name of the column in the result set (string)
db2_field_num(resource stmt, mixed column) Returns the position of the named column in a result set (int)
db2_field_precision(resource stmt, mixed column) Returns the precision of the indicated column in a result set (int)
db2_field_scale(resource stmt, mixed column) Returns the scale of the indicated column in a result set (int)
db2_field_type(resource stmt, mixed column) Returns the data type of the indicated column in a result set (string)
db2_field_width(resource stmt, mixed column) Returns the width of the current value of the indicated column in a result set (int)
db2_foreign_keys(resource connection, string qualifier, string schema, string table-name) Returns a result set listing the foreign keys for a table (resource)
db2_free_result(resource stmt) Frees resources associated with a result set (bool)
db2_free_stmt(resource stmt) Frees resources associated with the indicated statement resource (bool)
db2_get_option(resource resource, string option) Retrieves an option value for a statement resource or a connection resource (string)
db2_last_insert_id(resource resource) Returns the auto generated ID of the last insert query that successfully executed on this connection (int)
db2_lob_read(resource stmt, int colnum, int length) Gets a user defined size of LOB files with each invocation (string)
db2_next_result(resource stmt) Requests the next result set from a stored procedure (resource)
db2_num_fields(resource stmt) Returns the number of fields contained in a result set (int)
db2_num_rows(resource stmt) Returns the number of rows affected by an SQL statement (int)
db2_pclose(resource resource) Closes a persistent database connection (bool)
db2_pconnect(string database, string username, string password, [array options]) Returns a persistent connection to a database (resource)
db2_prepare(resource connection, string statement, [array options]) Prepares an SQL statement to be executed (resource)
db2_primary_keys(resource connection, string qualifier, string schema, string table-name) Returns a result set listing primary keys for a table (resource)
db2_procedure_columns(resource connection, string qualifier, string schema, string procedure, string parameter) Returns a result set listing stored procedure parameters (resource)
db2_procedures(resource connection, string qualifier, string schema, string procedure) Returns a result set listing the stored procedures registered in a database (resource)
db2_result(resource stmt, mixed column) Returns a single column from a row in the result set (mixed)
db2_rollback(resource connection) Rolls back a transaction (bool)
db2_server_info(resource connection) Returns an object with properties that describe the DB2 database server (object)
db2_set_option(resource resource, array options, int type) Set options for connection or statement resources (bool)
db2_special_columns(resource connection, string qualifier, string schema, string table_name, int scope) Returns a result set listing the unique row identifier columns for a table (resource)
db2_statistics(resource connection, string qualifier, string schema, string table-name, bool unique) Returns a result set listing the index and statistics for a table (resource)
db2_stmt_error([resource stmt]) Returns a string containing the SQLSTATE returned by an SQL statement (string)
db2_stmt_errormsg([resource stmt]) Returns a string containing the last SQL statement error message (string)
db2_table_privileges(resource connection, [string qualifier, [string schema, [string table_name]]]) Returns a result set listing the tables and associated privileges in a database (resource)
db2_tables(resource connection, [string qualifier, [string schema, [string table-name, [string table-type]]]]) Returns a result set listing the tables and associated metadata in a database (resource)
iconv_get_encoding([string type]) Retrieve internal configuration variables of iconv extension (mixed)
iconv_mime_decode_headers(string encoded_headers, [int mode, [string charset]]) Decodes multiple MIME header fields at once (array)
iconv_mime_decode(string encoded_header, [int mode, [string charset]]) Decodes a MIME header field (string)
iconv_mime_encode(string field_name, string field_value, [array preferences]) Composes a MIME header field (string)
iconv_set_encoding(string type, string charset) Set current setting for character encoding conversion (bool)
iconv_strlen(string str, [string charset]) Returns the character count of string (int)
iconv_strpos(string haystack, string needle, [int offset, [string charset]]) Finds position of first occurrence of a needle within a haystack (int)
iconv_strrpos(string haystack, string needle, [string charset]) Finds the last occurrence of a needle within a haystack (int)
iconv_substr(string str, int offset, [int length, [string charset]]) Cut out part of a string (string)
iconv(string in_charset, string out_charset, string str) Convert string to requested character encoding (string)
ob_iconv_handler(string contents, int status) Convert character encoding as output buffer handler (string)
id3_get_frame_long_name(string frameId) Get the long name of an ID3v2 frame (string)
id3_get_frame_short_name(string frameId) Get the short name of an ID3v2 frame (string)
id3_get_genre_id(string genre) Get the id for a genre (int)
id3_get_genre_list() Get all possible genre values (array)
id3_get_genre_name(int genre_id) Get the name for a genre id (string)
id3_get_tag(string filename, [int version]) Get all information stored in an ID3 tag (array)
id3_get_version(string filename) Get version of an ID3 tag (int)
id3_remove_tag(string filename, [int version]) Remove an existing ID3 tag (bool)
id3_set_tag(string filename, array tag, [int version]) Update information stored in an ID3 tag (bool)
idn_strerror(int errorcode) Returns string describing the IDNA error code (string)
idn_to_ascii(string utf8_domain, [int &errorcode]) Convert UTF-8 encoded domain name to ASCII (string)
idn_to_utf8(string ascii_domain, [int &errorcode]) Convert ASCII encoded domain name to UTF-8 (string)
ifx_affected_rows(resource result_id) Get number of rows affected by a query (int)
ifx_blobinfile_mode(int mode) Set the default blob mode for all select queries (bool)
ifx_byteasvarchar(int mode) Set the default byte mode (bool)
ifx_close([resource link_identifier]) Close Informix connection (bool)
ifx_connect([string database, [string userid, [string password]]]) Open Informix server connection (resource)
ifx_copy_blob(int bid) Duplicates the given blob object (int)
ifx_create_blob(int type, int mode, string param) Creates an blob object (int)
ifx_create_char(string param) Creates an char object (int)
ifx_do(resource result_id) Execute a previously prepared SQL-statement (bool)
ifx_error([resource link_identifier]) Returns error code of last Informix call (string)
ifx_errormsg([int errorcode]) Returns error message of last Informix call (string)
ifx_fetch_row(resource result_id, [mixed position]) Get row as an associative array (array)
ifx_fieldproperties(resource result_id) List of SQL fieldproperties (array)
ifx_fieldtypes(resource result_id) List of Informix SQL fields (array)
ifx_free_blob(int bid) Deletes the blob object (bool)
ifx_free_char(int bid) Deletes the char object (bool)
ifx_free_result(resource result_id) Releases resources for the query (bool)
ifx_get_blob(int bid) Return the content of a blob object (string)
ifx_get_char(int bid) Return the content of the char object (string)
ifx_getsqlca(resource result_id) Get the contents of sqlca.sqlerrd[0..5] after a query (array)
ifx_htmltbl_result(resource result_id, [string html_table_options]) Formats all rows of a query into a HTML table (int)
ifx_nullformat(int mode) Sets the default return value on a fetch row (bool)
ifx_num_fields(resource result_id) Returns the number of columns in the query (int)
ifx_num_rows(resource result_id) Count the rows already fetched from a query (int)
ifx_pconnect([string database, [string userid, [string password]]]) Open persistent Informix connection (resource)
ifx_prepare(string query, resource link_identifier, [int cursor_def], mixed blobidarray) Prepare an SQL-statement for execution (resource)
ifx_query(string query, resource link_identifier, [int cursor_type, [mixed blobidarray]]) Send Informix query (resource)
ifx_textasvarchar(int mode) Set the default text mode (bool)
ifx_update_blob(int bid, string content) Updates the content of the blob object (bool)
ifx_update_char(int bid, string content) Updates the content of the char object (bool)
ifxus_close_slob(int bid) Deletes the slob object (bool)
ifxus_create_slob(int mode) Creates an slob object and opens it (int)
ifxus_free_slob(int bid) Deletes the slob object (bool)
ifxus_open_slob(int bid, int mode) Opens an slob object (int)
ifxus_read_slob(int bid, int nbytes) Reads nbytes of the slob object (string)
ifxus_seek_slob(int bid, int mode, int offset) Sets the current file or seek position (int)
ifxus_tell_slob(int bid) Returns the current file or seek position (int)
ifxus_write_slob(int bid, string content) Writes a string into the slob object (int)
iis_add_server(string path, string comment, string server_ip, int port, string host_name, int rights, int start_server) Creates a new virtual web server (int)
iis_get_dir_security(int server_instance, string virtual_path) Gets Directory Security (int)
iis_get_script_map(int server_instance, string virtual_path, string script_extension) Gets script mapping on a virtual directory for a specific extension (string)
iis_get_server_by_comment(string comment) Return the instance number associated with the Comment (int)
iis_get_server_by_path(string path) Return the instance number associated with the Path (int)
iis_get_server_rights(int server_instance, string virtual_path) Gets server rights (int)
iis_get_service_state(string service_id) Returns the state for the service defined by ServiceId (int)
iis_remove_server(int server_instance) Removes the virtual web server indicated by ServerInstance (int)
iis_set_app_settings(int server_instance, string virtual_path, string application_scope) Creates application scope for a virtual directory (int)
iis_set_dir_security(int server_instance, string virtual_path, int directory_flags) Sets Directory Security (int)
iis_set_script_map(int server_instance, string virtual_path, string script_extension, string engine_path, int allow_scripting) Sets script mapping on a virtual directory (int)
iis_set_server_rights(int server_instance, string virtual_path, int directory_flags) Sets server rights (int)
iis_start_server(int server_instance) Starts the virtual web server (int)
iis_start_service(string service_id) Starts the service defined by ServiceId (int)
iis_stop_server(int server_instance) Stops the virtual web server (int)
iis_stop_service(string service_id) Stops the service defined by ServiceId (int)
gd_info() Retrieve information about the currently installed GD library (array)
getimagesize(string filename, [array &imageinfo]) Get the size of an image (array)
image_type_to_extension(int imagetype, [bool include_dot]) Get file extension for image type (string)
image_type_to_mime_type(int imagetype) Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype (string)
image2wbmp(resource image, [string filename, [int threshold]]) Output image to browser or file (bool)
imagealphablending(resource image, bool blendmode) Set the blending mode for an image (bool)
imageantialias(resource image, bool enabled) Should antialias functions be used or not (bool)
imagearc(resource image, int cx, int cy, int width, int height, int start, int end, int color) Draws an arc (bool)
imagechar(resource image, int font, int x, int y, string c, int color) Draw a character horizontally (bool)
imagecharup(resource image, int font, int x, int y, string c, int color) Draw a character vertically (bool)
imagecolorallocate(resource image, int red, int green, int blue) Allocate a color for an image (int)
imagecolorallocatealpha(resource image, int red, int green, int blue, int alpha) Allocate a color for an image (int)
imagecolorat(resource image, int x, int y) Get the index of the color of a pixel (int)
imagecolorclosest(resource image, int red, int green, int blue) Get the index of the closest color to the specified color (int)
imagecolorclosestalpha(resource image, int red, int green, int blue, int alpha) Get the index of the closest color to the specified color + alpha (int)
imagecolorclosesthwb(resource image, int red, int green, int blue) Get the index of the color which has the hue, white and blackness (int)
imagecolordeallocate(resource image, int color) De-allocate a color for an image (bool)
imagecolorexact(resource image, int red, int green, int blue) Get the index of the specified color (int)
imagecolorexactalpha(resource image, int red, int green, int blue, int alpha) Get the index of the specified color + alpha (int)
imagecolormatch(resource image1, resource image2) Makes the colors of the palette version of an image more closely match the true color version (bool)
imagecolorresolve(resource image, int red, int green, int blue) Get the index of the specified color or its closest possible alternative (int)
imagecolorresolvealpha(resource image, int red, int green, int blue, int alpha) Get the index of the specified color + alpha or its closest possible alternative (int)
imagecolorset(resource image, int index, int red, int green, int blue) Set the color for the specified palette index (null)
imagecolorsforindex(resource image, int index) Get the colors for an index (array)
imagecolorstotal(resource image) Find out the number of colors in an image's palette (int)
imagecolortransparent(resource image, [int color]) Define a color as transparent (int)
imageconvolution(resource image, array matrix, float div, float offset) Apply a 3x3 convolution matrix, using coefficient and offset (bool)
imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h) Copy part of an image (bool)
imagecopymerge(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct) Copy and merge part of an image (bool)
imagecopymergegray(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct) Copy and merge part of an image with gray scale (bool)
imagecopyresampled(resource dst_image, resource src_image, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h) Copy and resize part of an image with resampling (bool)
imagecopyresized(resource dst_image, resource src_image, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h) Copy and resize part of an image (bool)
imagecreate(int width, int height) Create a new palette based image (resource)
imagecreatefromgd(string filename) Create a new image from GD file or URL (resource)
imagecreatefromgd2(string filename) Create a new image from GD2 file or URL (resource)
imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height) Create a new image from a given part of GD2 file or URL (resource)
imagecreatefromgif(string filename) Create a new image from file or URL (resource)
imagecreatefromjpeg(string filename) Create a new image from file or URL (resource)
imagecreatefrompng(string filename) Create a new image from file or URL (resource)
imagecreatefromstring(string data) Create a new image from the image stream in the string (resource)
imagecreatefromwbmp(string filename) Create a new image from file or URL (resource)
imagecreatefromxbm(string filename) Create a new image from file or URL (resource)
imagecreatefromxpm(string filename) Create a new image from file or URL (resource)
imagecreatetruecolor(int width, int height) Create a new true color image (resource)
imagedashedline(resource image, int x1, int y1, int x2, int y2, int color) Draw a dashed line (bool)
imagedestroy(resource image) Destroy an image (bool)
imageellipse(resource image, int cx, int cy, int width, int height, int color) Draw an ellipse (bool)
imagefill(resource image, int x, int y, int color) Flood fill (bool)
imagefilledarc(resource image, int cx, int cy, int width, int height, int start, int end, int color, int style) Draw a partial arc and fill it (bool)
imagefilledellipse(resource image, int cx, int cy, int width, int height, int color) Draw a filled ellipse (bool)
imagefilledpolygon(resource image, array points, int num_points, int color) Draw a filled polygon (bool)
imagefilledrectangle(resource image, int x1, int y1, int x2, int y2, int color) Draw a filled rectangle (bool)
imagefilltoborder(resource image, int x, int y, int border, int color) Flood fill to specific color (bool)
imagefilter(resource image, int filtertype, [int arg1, [int arg2, [int arg3, [int arg4]]]]) Applies a filter to an image (bool)
imagefontheight(int font) Get font height (int)
imagefontwidth(int font) Get font width (int)
imageftbbox(float size, float angle, string fontfile, string text, [array extrainfo]) Give the bounding box of a text using fonts via freetype2 (array)
imagefttext(resource image, float size, float angle, int x, int y, int color, string fontfile, string text, [array extrainfo]) Write text to the image using fonts using FreeType 2 (array)
imagegammacorrect(resource image, float inputgamma, float outputgamma) Apply a gamma correction to a GD image (bool)
imagegd(resource image, [string filename]) Output GD image to browser or file (bool)
imagegd2(resource image, [string filename, [int chunk_size, [int type]]]) Output GD2 image to browser or file (bool)
imagegif(resource image, [string filename]) Output image to browser or file (bool)
imagegrabscreen() Captures the whole screen (resource)
imagegrabwindow(int window, [int client_area]) Captures a window (resource)
imageinterlace(resource image, [int interlace]) Enable or disable interlace (int)
imageistruecolor(resource image) Finds whether an image is a truecolor image (bool)
imagejpeg(resource image, [string filename, [int quality]]) Output image to browser or file (bool)
imagelayereffect(resource image, int effect) Set the alpha blending flag to use the bundled libgd layering effects (bool)
imageline(resource image, int x1, int y1, int x2, int y2, int color) Draw a line (bool)
imageloadfont(string file) Load a new font (int)
imagepalettecopy(resource destination, resource source) Copy the palette from one image to another (null)
imagepng(resource image, [string filename, [int quality, [int filters]]]) Output a PNG image to either the browser or a file (bool)
imagepolygon(resource image, array points, int num_points, int color) Draws a polygon (bool)
imagepsbbox(string text, resource font, int size) Give the bounding box of a text rectangle using PostScript Type1 fonts (array)
imagepsbbox(string text, resource font, int size, int space, int tightness, float angle) Give the bounding box of a text rectangle using PostScript Type1 fonts (array)
imagepsencodefont(resource font_index, string encodingfile) Change the character encoding vector of a font (bool)
imagepsextendfont(resource font_index, float extend) Extend or condense a font (bool)
imagepsfreefont(resource font_index) Free memory used by a PostScript Type 1 font (bool)
imagepsloadfont(string filename) Load a PostScript Type 1 font from file (resource)
imagepsslantfont(resource font_index, float slant) Slant a font (bool)
imagepstext(resource image, string text, resource font_index, int size, int foreground, int background, int x, int y, [int space, [int tightness, [float angle, [int antialias_steps]]]]) Draws a text over an image using PostScript Type1 fonts (array)
imagerectangle(resource image, int x1, int y1, int x2, int y2, int color) Draw a rectangle (bool)
imagerotate(resource image, float angle, int bgd_color, [int ignore_transparent]) Rotate an image with a given angle (resource)
imagesavealpha(resource image, bool saveflag) Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images (bool)
imagesetbrush(resource image, resource brush) Set the brush image for line drawing (bool)
imagesetpixel(resource image, int x, int y, int color) Set a single pixel (bool)
imagesetstyle(resource image, array style) Set the style for line drawing (bool)
imagesetthickness(resource image, int thickness) Set the thickness for line drawing (bool)
imagesettile(resource image, resource tile) Set the tile image for filling (bool)
imagestring(resource image, int font, int x, int y, string string, int color) Draw a string horizontally (bool)
imagestringup(resource image, int font, int x, int y, string string, int color) Draw a string vertically (bool)
imagesx(resource image) Get image width (int)
imagesy(resource image) Get image height (int)
imagetruecolortopalette(resource image, bool dither, int ncolors) Convert a true color image to a palette image (bool)
imagettfbbox(float size, float angle, string fontfile, string text) Give the bounding box of a text using TrueType fonts (array)
imagettftext(resource image, float size, float angle, int x, int y, int color, string fontfile, string text) Write text to the image using TrueType fonts (array)
imagetypes() Return the image types supported by this PHP build (int)
imagewbmp(resource image, [string filename, [int foreground]]) Output image to browser or file (bool)
imagexbm(resource image, string filename, [int foreground]) Output XBM image to browser or file (bool)
iptcembed(string iptcdata, string jpeg_file_name, [int spool]) Embeds binary IPTC data into a JPEG image (mixed)
iptcparse(string iptcblock) Parse a binary IPTC block into single tags. (array)
jpeg2wbmp(string jpegname, string wbmpname, int dest_height, int dest_width, int threshold) Convert JPEG image file to WBMP image file (bool)
png2wbmp(string pngname, string wbmpname, int dest_height, int dest_width, int threshold) Convert PNG image file to WBMP image file (bool)
>adaptiveBlurImage(float radius, float sigma, [int channel]) Adds adaptive blur filter to image (Imagick: bool)
>adaptiveResizeImage(int columns, int rows, [bool fit]) Adaptively resize image with data dependent triangulation (Imagick: bool)
>adaptiveSharpenImage(float radius, float sigma, [int channel]) Adaptively sharpen the image (Imagick: bool)
>adaptiveThresholdImage(int width, int height, int offset) Selects a threshold for each pixel based on a range of intensity (Imagick: bool)
>addImage(Imagick source) Adds new image to Imagick object image list (Imagick: bool)
>addNoiseImage(int noise_type, [int channel]) Adds random noise to the image (Imagick: bool)
>affineTransformImage(ImagickDraw matrix) Transforms an image (Imagick: bool)
>animateImages(string x_server) Animates an image or images (Imagick: bool)
>annotateImage(ImagickDraw draw_settings, float x, float y, float angle, string text) Annotates an image with text (Imagick: bool)
>appendImages(bool stack) Append a set of images (Imagick: Imagick)
>averageImages() Average a set of images (Imagick: Imagick)
>blackThresholdImage(mixed threshold) Forces all pixels below the threshold into black (Imagick: bool)
>blurImage(float radius, float sigma, [int channel]) Adds blur filter to image (Imagick: bool)
>borderImage(mixed bordercolor, int width, int height) Surrounds the image with a border (Imagick: bool)
>charcoalImage(float radius, float sigma) Simulates a charcoal drawing (Imagick: bool)
>chopImage(int width, int height, int x, int y) Removes a region of an image and trims (Imagick: bool)
>clear() Clears all resources associated to Imagick object (Imagick: bool)
>clipImage() Clips along the first path from the 8BIM profile (Imagick: bool)
>clipPathImage(string pathname, bool inside) Clips along the named paths from the 8BIM profile (Imagick: bool)
>clone() Makes an exact copy of the Imagick object (Imagick: Imagick)
>clutImage(Imagick lookup_table, [float channel]) Replaces colors in the image (Imagick: bool)
>coalesceImages() Composites a set of images (Imagick: Imagick)
>colorFloodfillImage(mixed fill, float fuzz, mixed bordercolor, int x, int y) Changes the color value of any pixel that matches target (Imagick: bool)
>colorizeImage(mixed colorize, mixed opacity) Blends the fill color with the image (Imagick: bool)
>combineImages(int channelType) Combines one or more images into a single image (Imagick: Imagick)
>commentImage(string comment) Adds a comment to your image (Imagick: bool)
>compareImageChannels(Imagick image, int channelType, int metricType) Returns the difference in one or more images (Imagick: array)
>compareImageLayers(int method) Returns the maximum bounding region between images (Imagick: Imagick)
>compareImages(Imagick compare, int metric) Compares an image to a reconstructed image (Imagick: array)
>compositeImage(Imagick composite_object, int composite, int x, int y, [int channel]) Composite one image onto another (Imagick: bool)
Imagick([mixed files]) The Imagick constructor (new)
>contrastImage(bool sharpen) Change the contrast of the image (Imagick: bool)
>contrastStretchImage(float black_point, float white_point, [int channel]) Enhances the contrast of a color image (Imagick: bool)
>convolveImage(array kernel, [int channel]) Applies a custom convolution kernel to the image (Imagick: bool)
>cropImage(int width, int height, int x, int y) Extracts a region of the image (Imagick: bool)
>cropThumbnailImage(int width, int height) Creates a crop thumbnail (Imagick: bool)
>current() Returns a reference to the current Imagick object (Imagick: Imagick)
>cycleColormapImage(int displace) Displaces an image's colormap (Imagick: bool)
>decipherImage(string passphrase) Deciphers an image (Imagick: bool)
>deconstructImages() Returns certain pixel differences between images (Imagick: bool)
>despeckleImage() Reduces the speckle noise in an image (Imagick: bool)
>destroy() Destroys the Imagick object (Imagick: bool)
>displayImage(string servername) Displays an image (Imagick: bool)
>displayImages(string servername) Displays an image or image sequence (Imagick: bool)
>distortImage(int method, array arguments, bool bestfit) Distorts an image using various distortion methods (Imagick: bool)
>drawImage(ImagickDraw draw) Renders the ImagickDraw object on the current image (Imagick: bool)
>edgeImage(float radius) Enhance edges within the image (Imagick: bool)
>embossImage(float radius, float sigma) Returns a grayscale image with a three-dimensional effect (Imagick: bool)
>encipherImage(string passphrase) Enciphers an image (Imagick: bool)
>enhanceImage() Improves the quality of a noisy image (Imagick: bool)
>equalizeImage() Equalizes the image histogram (Imagick: bool)
>evaluateImage(int op, float constant, [int channel]) Applies an expression to an image (Imagick: bool)
>extentImage(int width, int height, int x, int y) Set image size (Imagick: bool)
>flattenImages() Merges a sequence of images (Imagick: Imagick)
>flipImage() Creates a vertical mirror image (Imagick: bool)
>floodFillPaintImage(mixed fill, float fuzz, mixed bordercolor, int x, int y, bool invert, [int channel]) Changes the color value of any pixel that matches target (Imagick: bool)
>flopImage() Creates a horizontal mirror image (Imagick: bool)
>frameImage(mixed matte_color, int width, int height, int inner_bevel, int outer_bevel) Adds a simulated three-dimensional border (Imagick: bool)
>fxImage(string expression, [int channel]) Evaluate expression for each pixel in the image (Imagick: Imagick)
>gammaImage(float gamma, [int channel]) Gamma-corrects an image (Imagick: bool)
>gaussianBlurImage(float radius, float sigma, [int channel]) Blurs an image (Imagick: bool)
>getCompression() Gets the object compression type (Imagick: int)
>getCompressionQuality() Gets the object compression quality (Imagick: int)
>getCopyright() Returns the ImageMagick API copyright as a string (Imagick: string)
>getFilename() The filename associated with an image sequence (Imagick: string)
>getFont() Gets font (Imagick: string)
>getFormat() Returns the format of the Imagick object (Imagick: string)
>getGravity() Gets the gravity (Imagick: bool)
>getHomeURL() Returns the ImageMagick home URL (Imagick: string)
>getImage() Returns a new Imagick object (Imagick: Imagick)
>getImageAlphaChannel() Gets the image alpha channel (Imagick: int)
>getImageBackgroundColor() Returns the image background color (Imagick: ImagickPixel)
>getImageBlob() Returns the image sequence as a blob (Imagick: string)
>getImageBluePrimary(float x, float y) Returns the chromaticy blue primary point (Imagick: array)
>getImageBorderColor() Returns the image border color (Imagick: ImagickPixel)
>getImageChannelDepth(int channel) Gets the depth for a particular image channel (Imagick: int)
>getImageChannelDistortion(Imagick reference, int channel, int metric) Compares image channels of an image to a reconstructed image (Imagick: float)
>getImageChannelDistortions(Imagick reference, int metric, int channel) Gets channel distortions (Imagick: double)
>getImageChannelExtrema(int channel) Gets the extrema for one or more image channels (Imagick: array)
>getImageChannelMean(int channel) Gets the mean and standard deviation (Imagick: array)
>getImageChannelRange(int channel) Gets channel range (Imagick: bool)
>getImageChannelStatistics() Returns statistics for each channel in the image (Imagick: array)
>getImageClipMask() Gets image clip mask (Imagick: Imagick)
>getImageColormapColor(int index) Returns the color of the specified colormap index (Imagick: ImagickPixel)
>getImageColors() Gets the number of unique colors in the image (Imagick: int)
>getImageColorspace() Gets the image colorspace (Imagick: int)
>getImageCompose() Returns the composite operator associated with the image (Imagick: int)
>getImageCompression() Gets the current image's compression type (Imagick: int)
>getCompressionQuality() Gets the current image's compression quality (Imagick: int)
>getImageDelay() Gets the image delay (Imagick: int)
>getImageDepth() Gets the image depth (Imagick: int)
>getImageDispose() Gets the image disposal method (Imagick: int)
>getImageDistortion(MagickWand reference, int metric) Compares an image to a reconstructed image (Imagick: float)
>getImageExtrema() Gets the extrema for the image (Imagick: array)
>getImageFilename() Returns the filename of a particular image in a sequence (Imagick: string)
>getImageFormat() Returns the format of a particular image in a sequence (Imagick: string)
>getImageGamma() Gets the image gamma (Imagick: float)
>getImageGeometry() Gets the width and height as an associative array (Imagick: array)
>getImageGreenPrimary() Returns the chromaticy green primary point (Imagick: array)
>getImageHeight() Returns the image height (Imagick: int)
>getImageHistogram() Gets the image histogram (Imagick: array)
>getImageIndex() Gets the index of the current active image (Imagick: int)
>getImageInterlaceScheme() Gets the image interlace scheme (Imagick: int)
>getImageInterpolateMethod() Returns the interpolation method (Imagick: int)
>getImageIterations() Gets the image iterations (Imagick: int)
>getImageLength() Returns the image length in bytes (Imagick: int)
>getImageMagickLicense() Returns a string containing the ImageMagick license (Imagick: string)
>getImageMatte() Return if the image has a matte channel (Imagick: int)
>getImageMatteColor() Returns the image matte color (Imagick: ImagickPixel)
>getImageOrientation() Gets the image orientation (Imagick: int)
>getImagePage() Returns the page geometry (Imagick: array)
>getImagePixelColor(int x, int y) Returns the color of the specified pixel (Imagick: ImagickPixel)
>getImageProfile(string name) Returns the named image profile (Imagick: string)
>getImageProfiles([string pattern, [bool only_names]]) Returns the image profiles (Imagick: array)
>getImageProperties([string pattern, [bool only_names]]) Returns the image properties (Imagick: array)
>getImageProperty(string name) Returns the named image property (Imagick: string)
>getImageRedPrimary() Returns the chromaticity red primary point (Imagick: array)
>getImageRegion(int width, int height, int x, int y) Extracts a region of the image (Imagick: Imagick)
>getImageRenderingIntent() Gets the image rendering intent (Imagick: int)
>getImageResolution() Gets the image X and Y resolution (Imagick: array)
>getImagesBlob() Returns all image sequences as a blob (Imagick: string)
>getImageScene() Gets the image scene (Imagick: int)
>getImageSignature() Generates an SHA-256 message digest (Imagick: string)
>getImageSize() Returns the image length in bytes (Imagick: int)
>getImageTicksPerSecond() Gets the image ticks-per-second (Imagick: int)
>getImageTotalInkDensity() Gets the image total ink density (Imagick: float)
>getImageType() Gets the potential image type (Imagick: int)
>getImageUnits() Gets the image units of resolution (Imagick: int)
>getImageVirtualPixelMethod() Returns the virtual pixel method (Imagick: int)
>getImageWhitePoint() Returns the chromaticity white point (Imagick: array)
>getImageWidth() Returns the image width (Imagick: int)
>getInterlaceScheme() Gets the object interlace scheme (Imagick: int)
>getIteratorIndex() Gets the index of the current active image (Imagick: int)
>getNumberImages() Returns the number of images in the object (Imagick: int)
>getOption(string key) Returns a value associated with the specified key (Imagick: string)
>getPackageName() Returns the ImageMagick package name (Imagick: string)
>getPage() Returns the page geometry (Imagick: array)
>getPixelIterator() Returns a MagickPixelIterator (Imagick: ImagickPixelIterator)
>getPixelRegionIterator(int x, int y, int columns, int rows) Get an ImagickPixelIterator for an image section (Imagick: ImagickPixelIterator)
>getPointSize() Gets point size (Imagick: string)
>getQuantumDepth() Gets the quantum depth (Imagick: array)
>getQuantumRange() Returns the Imagick quantum range (Imagick: array)
>getReleaseDate() Returns the ImageMagick release date (Imagick: string)
>getResource(int type) Returns the specified resource's memory usage (Imagick: int)
>getResourceLimit(int type) Returns the specified resource limit (Imagick: int)
>getSamplingFactors() Gets the horizontal and vertical sampling factor (Imagick: array)
>getSize() Returns the size associated with the Imagick object (Imagick: array)
>getSizeOffset() Returns the size offset (Imagick: int)
>getVersion() Returns the ImageMagick API version (Imagick: array)
>hasNextImage() Checks if the object has more images (Imagick: bool)
>hasPreviousImage() Checks if the object has a previous image (Imagick: bool)
>identifyImage([bool appendRawOutput]) Identifies an image and fetches attributes (Imagick: array)
>implodeImage(float radius) Creates a new image as a copy (Imagick: bool)
>labelImage(string label) Adds a label to an image (Imagick: bool)
>levelImage(float blackPoint, float gamma, float whitePoint, [int channel]) Adjusts the levels of an image (Imagick: bool)
>linearStretchImage(float blackPoint, float whitePoint) Stretches with saturation the image intensity (Imagick: bool)
>liquidRescaleImage(int width, int height, float delta_x, float rigidity) Animates an image or images (Imagick: bool)
>magnifyImage() Scales an image proportionally 2x (Imagick: bool)
>mapImage(Imagick map, bool dither) Replaces the colors of an image with the closest color from a reference image. (Imagick: bool)
>matteFloodfillImage(float alpha, float fuzz, mixed bordercolor, int x, int y) Changes the transparency value of a color (Imagick: bool)
>medianFilterImage(float radius) Applies a digital filter (Imagick: bool)
>mergeImageLayers(int layer_method) Merges image layers (Imagick: bool)
>minifyImage() Scales an image proportionally to half its size (Imagick: bool)
>modulateImage(float brightness, float saturation, float hue) Control the brightness, saturation, and hue (Imagick: bool)
>montageImage(ImagickDraw draw, string tile_geometry, string thumbnail_geometry, int mode, string frame) Creates a composite image (Imagick: Imagick)
>morphImages(int number_frames) Method morphs a set of images (Imagick: Imagick)
>mosaicImages() Forms a mosaic from images (Imagick: Imagick)
>motionBlurImage(float radius, float sigma, float angle, [int channel]) Simulates motion blur (Imagick: bool)
>negateImage(bool gray, [int channel]) Negates the colors in the reference image (Imagick: bool)
>newImage(int cols, int rows, mixed background, [string format]) Creates a new image (Imagick: bool)
>newPseudoImage(int columns, int rows, string pseudoString) Creates a new image (Imagick: bool)
>nextImage() Moves to the next image (Imagick: bool)
>normalizeImage([int channel]) Enhances the contrast of a color image (Imagick: bool)
>oilPaintImage(float radius) Simulates an oil painting (Imagick: bool)
>opaquePaintImage(mixed target, mixed fill, float fuzz, bool invert, [int channel]) Changes the color value of any pixel that matches target (Imagick: bool)
>optimizeImageLayers() Removes repeated portions of images to optimize (Imagick: bool)
>orderedPosterizeImage(string threshold_map, [int channel]) Performs an ordered dither (Imagick: bool)
>paintFloodfillImage(mixed fill, float fuzz, mixed bordercolor, int x, int y, [int channel]) Changes the color value of any pixel that matches target (Imagick: bool)
>paintOpaqueImage(mixed target, mixed fill, float fuzz, [int channel]) Change any pixel that matches color (Imagick: bool)
>paintTransparentImage(mixed target, float alpha, float fuzz) Changes any pixel that matches color with the color defined by fill (Imagick: bool)
>pingImage(string filename) Fetch basic attributes about the image (Imagick: bool)
>pingImageBlob(string image) Quickly fetch attributes (Imagick: bool)
>pingImageFile(resource filehandle, [string fileName]) Get basic image attributes in a lightweight manner (Imagick: bool)
>polaroidImage(ImagickDraw properties, float angle) Simulates a Polaroid picture (Imagick: bool)
>posterizeImage(int levels, bool dither) Reduces the image to a limited number of color level (Imagick: bool)
>previewImages(int preview) Quickly pin-point appropriate parameters for image processing (Imagick: bool)
>previousImage() Move to the previous image in the object (Imagick: bool)
>profileImage(string name, string profile) Adds or removes a profile from an image (Imagick: bool)
>quantizeImage(int numberColors, int colorspace, int treedepth, bool dither, bool measureError) Analyzes the colors within a reference image (Imagick: bool)
>quantizeImages(int numberColors, int colorspace, int treedepth, bool dither, bool measureError) Analyzes the colors within a sequence of images (Imagick: bool)
>queryFontMetrics(ImagickDraw properties, string text, [bool multiline]) Returns an array representing the font metrics (Imagick: array)
>queryFonts([string pattern]) Returns the configured fonts (Imagick: array)
>queryFormats([string pattern]) Returns formats supported by Imagick (Imagick: array)
>radialBlurImage(float angle, [int channel]) Radial blurs an image (Imagick: bool)
>raiseImage(int width, int height, int x, int y, bool raise) Creates a simulated 3d button-like effect (Imagick: bool)
>randomThresholdImage(float low, float high, [int channel]) Creates a high-contrast, two-color image (Imagick: bool)
>readImage(string filename) Reads image from filename (Imagick: bool)
>readImageBlob(string image, [string filename]) Reads image from a binary string (Imagick: bool)
>readImageFile(resource filehandle, [string fileName]) Reads image from open filehandle (Imagick: bool)
>animateImages(array matrix) Recolors image (Imagick: bool)
>reduceNoiseImage(float radius) Smooths the contours of an image (Imagick: bool)
>removeImage() Removes an image from the image list (Imagick: bool)
>removeImageProfile(string name) Removes the named image profile and returns it (Imagick: string)
>render() Renders all preceding drawing commands (Imagick: bool)
>resampleImage(float x_resolution, float y_resolution, int filter, float blur) Resample image to desired resolution (Imagick: bool)
>resetImagePage(string page) Reset image page (Imagick: bool)
>resizeImage(int columns, int rows, int filter, float blur, [bool fit]) Scales an image (Imagick: bool)
>rollImage(int x, int y) Offsets an image (Imagick: bool)
>rotateImage(mixed background, float degrees) Rotates an image (Imagick: bool)
>roundCorners(float x_rounding, float y_rounding, [float stroke_width, [float displace, [float size_correction]]]) Rounds image corners (Imagick: bool)
>sampleImage(int columns, int rows) Scales an image with pixel sampling (Imagick: bool)
>scaleImage(int cols, int rows, [bool fit]) Scales the size of an image (Imagick: bool)
>separateImageChannel(int channel) Separates a channel from the image (Imagick: bool)
>sepiaToneImage(float threshold) Sepia tones an image (Imagick: bool)
>setBackgroundColor(mixed background) Sets the object's default background color (Imagick: bool)
>setCompression(int compression) Sets the object's default compression type (Imagick: bool)
>setCompressionQuality(int quality) Sets the object's default compression quality (Imagick: bool)
>setFilename(string filename) Sets the filename before you read or write the image (Imagick: bool)
>setFirstIterator() Sets the Imagick iterator to the first image (Imagick: bool)
>setFont(string font) Sets font (Imagick: bool)
>setFormat(string format) Sets the format of the Imagick object (Imagick: bool)
>setGravity(int gravity) Sets the gravity (Imagick: bool)
>setImage(Imagick replace) Replaces image in the object (Imagick: bool)
>setImageAlphaChannel(int mode) Sets image alpha channel (Imagick: bool)
>setImageBackgroundColor(mixed background) Sets the image background color (Imagick: bool)
>setImageBias(float bias) Sets the image bias for any method that convolves an image (Imagick: bool)
>setImageBluePrimary(float x, float y) Sets the image chromaticity blue primary point (Imagick: bool)
>setImageBorderColor(mixed border) Sets the image border color (Imagick: bool)
>setImageChannelDepth(int channel, int depth) Sets the depth of a particular image channel (Imagick: bool)
>setImageClipMask(Imagick clip_mask) Sets image clip mask (Imagick: bool)
>setImageColormapColor(int index, ImagickPixel color) Sets the color of the specified colormap index (Imagick: bool)
>setImageColorspace(int colorspace) Sets the image colorspace (Imagick: bool)
>setImageCompose(int compose) Sets the image composite operator (Imagick: bool)
>setImageCompression(int compression) Sets the image compression (Imagick: bool)
>setImageCompressionQuality(int quality) Sets the image compression quality (Imagick: bool)
>setImageDelay(int delay) Sets the image delay (Imagick: bool)
>setImageDepth(int depth) Sets the image depth (Imagick: bool)
>setImageDispose(int dispose) Sets the image disposal method (Imagick: bool)
>setImageExtent(int columns, int rows) Sets the image size (Imagick: bool)
>setImageFilename(string filename) Sets the filename of a particular image (Imagick: bool)
>setImageFormat(string format) Sets the format of a particular image (Imagick: bool)
>setImageGamma(float gamma) Sets the image gamma (Imagick: bool)
>setImageGreenPrimary(float x, float y) Sets the image chromaticity green primary point (Imagick: bool)
>setImageIndex(int index) Set the iterator position (Imagick: bool)
>setImageInterlaceScheme(int interlace_scheme) Sets the image compression (Imagick: bool)
>setImageInterpolateMethod(int method) Sets the image interpolate pixel method (Imagick: bool)
>setImageIterations(int iterations) Sets the image iterations (Imagick: bool)
>setImageMatte(bool matte) Sets the image matte channel (Imagick: bool)
>setImageMatteColor(mixed matte) Sets the image matte color (Imagick: bool)
>setImageOpacity(float opacity) Sets the image opacity level (Imagick: bool)
>setImageOrientation(int orientation) Sets the image orientation (Imagick: bool)
>setImagePage(int width, int height, int x, int y) Sets the page geometry of the image (Imagick: bool)
>setImageProfile(string name, string profile) Adds a named profile to the Imagick object (Imagick: bool)
>setImageProperty(string name, string value) Sets an image property (Imagick: bool)
>setImageRedPrimary(float x, float y) Sets the image chromaticity red primary point (Imagick: bool)
>setImageRenderingIntent(int rendering_intent) Sets the image rendering intent (Imagick: bool)
>setImageResolution(float x_resolution, float y_resolution) Sets the image resolution (Imagick: bool)
>setImageScene(int scene) Sets the image scene (Imagick: bool)
>setImageTicksPerSecond(int ticks_per-second) Sets the image ticks-per-second (Imagick: bool)
>setImageType(int image_type) Sets the image type (Imagick: bool)
>setImageUnits(int units) Sets the image units of resolution (Imagick: bool)
>setImageVirtualPixelMethod(int method) Sets the image virtual pixel method (Imagick: bool)
>setImageWhitePoint(float x, float y) Sets the image chromaticity white point (Imagick: bool)
>setInterlaceScheme(int interlace_scheme) Sets the image compression (Imagick: bool)
>setIteratorIndex(int index) Set the iterator position (Imagick: bool)
>setLastIterator() Sets the Imagick iterator to the last image (Imagick: bool)
>setOption(string key, string value) Set an option (Imagick: bool)
>setPage(int width, int height, int x, int y) Sets the page geometry of the Imagick object (Imagick: bool)
>setPointSize(float point_size) Sets point size (Imagick: bool)
>setResolution(float x_resolution, float y_resolution) Sets the image resolution (Imagick: bool)
>setResourceLimit(int type, int limit) Sets the limit for a particular resource in megabytes (Imagick: bool)
>setSamplingFactors(array factors) Sets the image sampling factors (Imagick: bool)
>setSize(int columns, int rows) Sets the size of the Imagick object (Imagick: bool)
>setSizeOffset(int columns, int rows, int offset) Sets the size and offset of the Imagick object (Imagick: bool)
>setType(int image_type) Sets the image type attribute (Imagick: bool)
>shadeImage(bool gray, float azimuth, float elevation) Creates a 3D effect (Imagick: bool)
>shadowImage(float opacity, float sigma, int x, int y) Simulates an image shadow (Imagick: bool)
>sharpenImage(float radius, float sigma, [int channel]) Sharpens an image (Imagick: bool)
>shaveImage(int columns, int rows) Shaves pixels from the image edges (Imagick: bool)
>shearImage(mixed background, float x_shear, float y_shear) Creating a parallelogram (Imagick: bool)
>sigmoidalContrastImage(bool sharpen, float alpha, float beta, [int channel]) Adjusts the contrast of an image (Imagick: bool)
>sketchImage(float radius, float sigma, float angle) Simulates a pencil sketch (Imagick: bool)
>solarizeImage(int threshold) Applies a solarizing effect to the image (Imagick: bool)
>spliceImage(int width, int height, int x, int y) Splices a solid color into the image (Imagick: bool)
>spreadImage(float radius) Randomly displaces each pixel in a block (Imagick: bool)
>steganoImage(Imagick watermark_wand, int offset) Hides a digital watermark within the image (Imagick: Imagick)
>stereoImage(Imagick offset_wand) Composites two images (Imagick: bool)
>stripImage() Strips an image of all profiles and comments (Imagick: bool)
>swirlImage(float degrees) Swirls the pixels about the center of the image (Imagick: bool)
>textureImage(Imagick texture_wand) Repeatedly tiles the texture image (Imagick: bool)
>thresholdImage(float threshold, [int channel]) Changes the value of individual pixels based on a threshold (Imagick: bool)
>thumbnailImage(int columns, int rows, [bool fit]) Changes the size of an image (Imagick: bool)
>tintImage(mixed tint, mixed opacity) Applies a color vector to each pixel in the image (Imagick: bool)
>transformImage(string crop, string geometry) Convenience method for setting crop size and the image geometry (Imagick: Imagick)
>transparentPaintImage(mixed target, float alpha, float fuzz, bool invert) Paints pixels transparent (Imagick: bool)
>transposeImage() Creates a vertical mirror image (Imagick: bool)
>transverseImage() Creates a horizontal mirror image (Imagick: bool)
>trimImage(float fuzz) Remove edges from the image (Imagick: bool)
>uniqueImageColors() Discards all but one of any pixel color (Imagick: bool)
>unsharpMaskImage(float radius, float sigma, float amount, float threshold, [int channel]) Sharpens an image (Imagick: bool)
>valid() Checks if the current item is valid (Imagick: bool)
>vignetteImage(float blackPoint, float whitePoint, int x, int y) Adds vignette filter to the image (Imagick: bool)
>waveImage(float amplitude, float length) Applies wave filter to the image (Imagick: bool)
>whiteThresholdImage(mixed threshold) Force all pixels above the threshold into white (Imagick: bool)
>writeImage([string filename]) Writes an image to the specified filename (Imagick: bool)
>writeImageFile(resource filehandle) Writes an image to a filehandle (Imagick: bool)
>writeImages(string filename, bool adjoin) Writes an image or image sequence (Imagick: bool)
>writeImagesFile(resource filehandle) Writes frames to a filehandle (Imagick: bool)
>affine(array affine) Adjusts the current affine transformation matrix (ImagickDraw: bool)
>annotation(float x, float y, string text) Draws text on the image (ImagickDraw: bool)
>arc(float sx, float sy, float ex, float ey, float sd, float ed) Draws an arc (ImagickDraw: bool)
>bezier(array coordinates) Draws a bezier curve (ImagickDraw: bool)
>circle(float ox, float oy, float px, float py) Draws a circle (ImagickDraw: bool)
>clear() Clears the ImagickDraw (ImagickDraw: bool)
>clone() Makes an exact copy of the specified ImagickDraw object (ImagickDraw: ImagickDraw)
>color(float x, float y, int paintMethod) Draws color on image (ImagickDraw: bool)
>comment(string comment) Adds a comment (ImagickDraw: bool)
>composite(int compose, float x, float y, float width, float height, Imagick compositeWand) Composites an image onto the current image (ImagickDraw: bool)
ImagickDraw() The ImagickDraw constructor (new)
>destroy() Frees all associated resources (ImagickDraw: bool)
>ellipse(float ox, float oy, float rx, float ry, float start, float end) Draws an ellipse on the image (ImagickDraw: bool)
>getClipPath() Obtains the current clipping path ID (ImagickDraw: string)
>getClipRule() Returns the current polygon fill rule (ImagickDraw: int)
>getClipUnits() Returns the interpretation of clip path units (ImagickDraw: int)
>getFillColor() Returns the fill color (ImagickDraw: ImagickPixel)
>getFillOpacity() Returns the opacity used when drawing (ImagickDraw: float)
>getFillRule() Returns the fill rule (ImagickDraw: int)
>getFont() Returns the font (ImagickDraw: string)
>getFontFamily() Returns the font family (ImagickDraw: string)
>getFontSize() Returns the font pointsize (ImagickDraw: float)
>getFontStyle() Returns the font style (ImagickDraw: int)
>getFontWeight() Returns the font weight (ImagickDraw: int)
>getGravity() Returns the text placement gravity (ImagickDraw: int)
>getStrokeAntialias() Returns the current stroke antialias setting (ImagickDraw: bool)
>getStrokeColor(ImagickPixel stroke_color) Returns the color used for stroking object outlines (ImagickDraw: ImagickPixel)
>getStrokeDashArray() Returns an array representing the pattern of dashes and gaps used to stroke paths (ImagickDraw: array)
>getStrokeDashOffset() Returns the offset into the dash pattern to start the dash (ImagickDraw: float)
>getStrokeLineCap() Returns the shape to be used at the end of open subpaths when they are stroked (ImagickDraw: int)
>getStrokeLineJoin() Returns the shape to be used at the corners of paths when they are stroked (ImagickDraw: int)
>getStrokeMiterLimit() Returns the stroke miter limit (ImagickDraw: int)
>getStrokeOpacity() Returns the opacity of stroked object outlines (ImagickDraw: float)
>getStrokeWidth() Returns the width of the stroke used to draw object outlines (ImagickDraw: float)
>getTextAlignment() Returns the text alignment (ImagickDraw: int)
>getTextAntialias() Returns the current text antialias setting (ImagickDraw: bool)
>getTextDecoration() Returns the text decoration (ImagickDraw: int)
>getTextEncoding() Returns the code set used for text annotations (ImagickDraw: string)
>getTextUnderColor() Returns the text under color (ImagickDraw: ImagickPixel)
>getVectorGraphics() Returns a string containing vector graphics (ImagickDraw: string)
>line(float sx, float sy, float ex, float ey) Draws a line (ImagickDraw: bool)
>matte(float x, float y, int paintMethod) Paints on the image's opacity channel (ImagickDraw: bool)
>pathClose() Adds a path element to the current path (ImagickDraw: bool)
>pathCurveToAbsolute(float x1, float y1, float x2, float y2, float x, float y) Draws a cubic Bezier curve (ImagickDraw: bool)
>pathCurveToQuadraticBezierAbsolute(float x1, float y1, float x, float y) Draws a quadratic Bezier curve (ImagickDraw: bool)
>pathCurveToQuadraticBezierRelative(float x1, float y1, float x, float y) Draws a quadratic Bezier curve (ImagickDraw: bool)
>pathCurveToQuadraticBezierSmoothAbsolute(float x, float y) Draws a quadratic Bezier curve (ImagickDraw: bool)
>pathCurveToQuadraticBezierSmoothRelative(float x, float y) Draws a quadratic Bezier curve (ImagickDraw: bool)
>pathCurveToRelative(float x1, float y1, float x2, float y2, float x, float y) Draws a cubic Bezier curve (ImagickDraw: bool)
>pathCurveToSmoothAbsolute(float x2, float y2, float x, float y) Draws a cubic Bezier curve (ImagickDraw: bool)
>pathCurveToSmoothRelative(float x2, float y2, float x, float y) Draws a cubic Bezier curve (ImagickDraw: bool)
>pathEllipticArcAbsolute(float rx, float ry, float x_axis_rotation, bool large_arc_flag, bool sweep_flag, float x, float y) Draws an elliptical arc (ImagickDraw: bool)
>pathEllipticArcRelative(float rx, float ry, float x_axis_rotation, bool large_arc_flag, bool sweep_flag, float x, float y) Draws an elliptical arc (ImagickDraw: bool)
>pathFinish() Terminates the current path (ImagickDraw: bool)
>pathLineToAbsolute(float x, float y) Draws a line path (ImagickDraw: bool)
>pathLineToHorizontalAbsolute(float x) Draws a horizontal line path (ImagickDraw: bool)
>pathLineToHorizontalRelative(float x) Draws a horizontal line (ImagickDraw: bool)
>pathLineToRelative(float x, float y) Draws a line path (ImagickDraw: bool)
>pathLineToVerticalAbsolute(float y) Draws a vertical line (ImagickDraw: bool)
>pathLineToVerticalRelative(float y) Draws a vertical line path (ImagickDraw: bool)
>pathMoveToAbsolute(float x, float y) Starts a new sub-path (ImagickDraw: bool)
>pathMoveToRelative(float x, float y) Starts a new sub-path (ImagickDraw: bool)
>pathStart() Declares the start of a path drawing list (ImagickDraw: bool)
>point(float x, float y) Draws a point (ImagickDraw: bool)
>polygon(array coordinates) Draws a polygon (ImagickDraw: bool)
>polyline(array coordinates) Draws a polyline (ImagickDraw: bool)
>pop() Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw (ImagickDraw: bool)
>popClipPath() Terminates a clip path definition (ImagickDraw: bool)
>popDefs() Terminates a definition list (ImagickDraw: bool)
>popPattern() Terminates a pattern definition (ImagickDraw: bool)
>push() Clones the current ImagickDraw and pushes it to the stack (ImagickDraw: bool)
>pushClipPath(string clip_mask_id) Starts a clip path definition (ImagickDraw: bool)
>pushDefs() Indicates that following commands create named elements for early processing (ImagickDraw: bool)
>pushPattern(string pattern_id, float x, float y, float width, float height) Indicates that subsequent commands up to a ImagickDraw::opPattern() command comprise the definition of a named pattern (ImagickDraw: bool)
>rectangle(float x1, float y1, float x2, float y2) Draws a rectangle (ImagickDraw: bool)
>render() Renders all preceding drawing commands onto the image (ImagickDraw: bool)
>rotate(float degrees) Applies the specified rotation to the current coordinate space (ImagickDraw: bool)
>roundRectangle(float x1, float y1, float x2, float y2, float rx, float ry) Draws a rounded rectangle (ImagickDraw: bool)
>scale(float x, float y) Adjusts the scaling factor (ImagickDraw: bool)
>setClipPath(string clip_mask) Associates a named clipping path with the image (ImagickDraw: bool)
>setClipRule(int fill_rule) Set the polygon fill rule to be used by the clipping path (ImagickDraw: bool)
>setClipUnits(int clip_units) Sets the interpretation of clip path units (ImagickDraw: bool)
>setFillAlpha(float opacity) Sets the opacity to use when drawing using the fill color or fill texture (ImagickDraw: bool)
>setFillColor(ImagickPixel fill_pixel) Sets the fill color to be used for drawing filled objects (ImagickDraw: bool)
>setFillOpacity(float fillOpacity) Sets the opacity to use when drawing using the fill color or fill texture (ImagickDraw: bool)
>setFillPatternURL(string fill_url) Sets the URL to use as a fill pattern for filling objects (ImagickDraw: bool)
>setFillRule(int fill_rule) Sets the fill rule to use while drawing polygons (ImagickDraw: bool)
>setFont(string font_name) Sets the fully-specified font to use when annotating with text (ImagickDraw: bool)
>setFontFamily(string font_family) Sets the font family to use when annotating with text (ImagickDraw: bool)
>setFontSize(float pointsize) Sets the font pointsize to use when annotating with text (ImagickDraw: bool)
>setFontStretch(int fontStretch) Sets the font stretch to use when annotating with text (ImagickDraw: bool)
>setFontStyle(int style) Sets the font style to use when annotating with text (ImagickDraw: bool)
>setFontWeight(int font_weight) Sets the font weight (ImagickDraw: bool)
>setGravity(int gravity) Sets the text placement gravity (ImagickDraw: bool)
>setStrokeAlpha(float opacity) Specifies the opacity of stroked object outlines (ImagickDraw: bool)
>setStrokeAntialias(bool stroke_antialias) Controls whether stroked outlines are antialiased (ImagickDraw: bool)
>setStrokeColor(ImagickPixel stroke_pixel) Sets the color used for stroking object outlines (ImagickDraw: bool)
>setStrokeDashArray(array dashArray) Specifies the pattern of dashes and gaps used to stroke paths (ImagickDraw: bool)
>setStrokeDashOffset(float dash_offset) Specifies the offset into the dash pattern to start the dash (ImagickDraw: bool)
>setStrokeLineCap(int linecap) Specifies the shape to be used at the end of open subpaths when they are stroked (ImagickDraw: bool)
>setStrokeLineJoin(int linejoin) Specifies the shape to be used at the corners of paths when they are stroked (ImagickDraw: bool)
>setStrokeMiterLimit(int miterlimit) Specifies the miter limit (ImagickDraw: bool)
>setStrokeOpacity(float stroke_opacity) Specifies the opacity of stroked object outlines (ImagickDraw: bool)
>setStrokePatternURL(string stroke_url) Sets the pattern used for stroking object outlines (ImagickDraw: bool)
>setStrokeWidth(float stroke_width) Sets the width of the stroke used to draw object outlines (ImagickDraw: bool)
>setTextAlignment(int alignment) Specifies a text alignment (ImagickDraw: bool)
>setTextAntialias(bool antiAlias) Controls whether text is antialiased (ImagickDraw: bool)
>setTextDecoration(int decoration) Specifies a decoration (ImagickDraw: bool)
>setTextEncoding(string encoding) Specifies specifies the text code set (ImagickDraw: bool)
>setTextUnderColor(ImagickPixel under_color) Specifies the color of a background rectangle (ImagickDraw: bool)
>setVectorGraphics(string xml) Sets the vector graphics (ImagickDraw: bool)
>setViewbox(int x1, int y1, int x2, int y2) Sets the overall canvas size (ImagickDraw: bool)
>skewX(float degrees) Skews the current coordinate system in the horizontal direction (ImagickDraw: bool)
>skewY(float degrees) Skews the current coordinate system in the vertical direction (ImagickDraw: bool)
>translate(float x, float y) Applies a translation to the current coordinate system (ImagickDraw: bool)
>clear() Clears resources associated with this object (ImagickPixel: bool)
ImagickPixel([string color]) The ImagickPixel constructor (new)
>destroy() Deallocates resources associated with this object (ImagickPixel: bool)
>getColor([bool normalized]) Returns the color (ImagickPixel: array)
>getColorAsString() Returns the color as a string (ImagickPixel: string)
>getColorCount() Returns the color count associated with this color (ImagickPixel: int)
>getColorValue(int color) Gets the normalized value of the provided color channel (ImagickPixel: float)
>getHSL() Returns the normalized HSL color of the ImagickPixel object (ImagickPixel: array)
>isSimilar(ImagickPixel color, float fuzz) Check the distance between this color and another (ImagickPixel: bool)
>setColor(string color) Sets the color (ImagickPixel: bool)
>setColorValue(int color, float value) Sets the normalized value of one of the channels (ImagickPixel: bool)
>setHSL(float hue, float saturation, float luminosity) Sets the normalized HSL color (ImagickPixel: bool)
>clear() Clear resources associated with a PixelIterator (ImagickPixelIterator: bool)
ImagickPixelIterator(Imagick wand) The ImagickPixelIterator constructor (new)
>destroy() Deallocates resources associated with a PixelIterator (ImagickPixelIterator: bool)
>getCurrentIteratorRow() Returns the current row of ImagickPixel objects (ImagickPixelIterator: array)
>getIteratorRow() Returns the current pixel iterator row (ImagickPixelIterator: int)
>getNextIteratorRow() Returns the next row of the pixel iterator (ImagickPixelIterator: array)
>getPreviousIteratorRow() Returns the previous row (ImagickPixelIterator: array)
>newPixelIterator(Imagick wand) Returns a new pixel iterator (ImagickPixelIterator: bool)
>newPixelRegionIterator(Imagick wand, int x, int y, int columns, int rows) Returns a new pixel iterator (ImagickPixelIterator: bool)
>resetIterator() Resets the pixel iterator (ImagickPixelIterator: bool)
>setIteratorFirstRow() Sets the pixel iterator to the first pixel row (ImagickPixelIterator: bool)
>setIteratorLastRow() Sets the pixel iterator to the last pixel row (ImagickPixelIterator: bool)
>setIteratorRow(int row) Set the pixel iterator row (ImagickPixelIterator: bool)
>syncIterator() Syncs the pixel iterator (ImagickPixelIterator: bool)
imap_8bit(string string) Convert an 8bit string to a quoted-printable string (string)
imap_alerts() Returns all IMAP alert messages that have occurred (array)
imap_append(resource imap_stream, string mailbox, string message, [string options]) Append a string message to a specified mailbox (bool)
imap_base64(string text) Decode BASE64 encoded text (string)
imap_binary(string string) Convert an 8bit string to a base64 string (string)
imap_body(resource imap_stream, int msg_number, [int options]) Read the message body (string)
imap_bodystruct(resource imap_stream, int msg_number, string section) Read the structure of a specified body section of a specific message (object)
imap_check(resource imap_stream) Check current mailbox (object)
imap_clearflag_full(resource imap_stream, string sequence, string flag, [int options]) Clears flags on messages (bool)
imap_close(resource imap_stream, [int flag]) Close an IMAP stream (bool)
imap_createmailbox(resource imap_stream, string mailbox) Create a new mailbox (bool)
imap_delete(resource imap_stream, int msg_number, [int options]) Mark a message for deletion from current mailbox (bool)
imap_deletemailbox(resource imap_stream, string mailbox) Delete a mailbox (bool)
imap_errors() Returns all of the IMAP errors that have occured (array)
imap_expunge(resource imap_stream) Delete all messages marked for deletion (bool)
imap_fetch_overview(resource imap_stream, string sequence, [int options]) Read an overview of the information in the headers of the given message (array)
imap_fetchbody(resource imap_stream, int msg_number, string section, [int options]) Fetch a particular section of the body of the message (string)
imap_fetchheader(resource imap_stream, int msg_number, [int options]) Returns header for a message (string)
imap_fetchstructure(resource imap_stream, int msg_number, [int options]) Read the structure of a particular message (object)
imap_gc(resource imap_stream, int caches) Clears IMAP cache (string)
imap_get_quota(resource imap_stream, string quota_root) Retrieve the quota level settings, and usage statics per mailbox (array)
imap_get_quotaroot(resource imap_stream, string quota_root) Retrieve the quota settings per user (array)
imap_getacl(resource imap_stream, string mailbox) Gets the ACL for a given mailbox (array)
imap_getmailboxes(resource imap_stream, string ref, string pattern) Read the list of mailboxes, returning detailed information on each one (array)
imap_getsubscribed(resource imap_stream, string ref, string pattern) List all the subscribed mailboxes (array)
imap_header() Alias of imap_headerinfo
imap_headerinfo(resource imap_stream, int msg_number, [int fromlength, [int subjectlength, [string defaulthost]]]) Read the header of the message (object)
imap_headers(resource imap_stream) Returns headers for all messages in a mailbox (array)
imap_last_error() Gets the last IMAP error that occurred during this page request (string)
imap_list(resource imap_stream, string ref, string pattern) Read the list of mailboxes (array)
imap_listmailbox() Alias of imap_list
imap_listscan(resource imap_stream, string ref, string pattern, string content) Returns the list of mailboxes that matches the given text (array)
imap_listsubscribed() Alias of imap_lsub
imap_lsub(resource imap_stream, string ref, string pattern) List all the subscribed mailboxes (array)
imap_mail_compose(array envelope, array body) Create a MIME message based on given envelope and body sections (string)
imap_mail_copy(resource imap_stream, string msglist, string mailbox, [int options]) Copy specified messages to a mailbox (bool)
imap_mail_move(resource imap_stream, string msglist, string mailbox, [int options]) Move specified messages to a mailbox (bool)
imap_mail(string to, string subject, string message, [string additional_headers, [string cc, [string bcc, [string rpath]]]]) Send an email message (bool)
imap_mailboxmsginfo(resource imap_stream) Get information about the current mailbox (object)
imap_mime_header_decode(string text) Decode MIME header elements (array)
imap_msgno(resource imap_stream, int uid) Gets the message sequence number for the given UID (int)
imap_num_msg(resource imap_stream) Gets the number of messages in the current mailbox (int)
imap_num_recent(resource imap_stream) Gets the number of recent messages in current mailbox (int)
imap_open(string mailbox, string username, string password, [int options, [int n_retries]]) Open an IMAP stream to a mailbox (resource)
imap_ping(resource imap_stream) Check if the IMAP stream is still active (bool)
imap_qprint(string string) Convert a quoted-printable string to an 8 bit string (string)
imap_renamemailbox(resource imap_stream, string old_mbox, string new_mbox) Rename an old mailbox to new mailbox (bool)
imap_reopen(resource imap_stream, string mailbox, [int options, [int n_retries]]) Reopen IMAP stream to new mailbox (bool)
imap_rfc822_parse_adrlist(string address, string default_host) Parses an address string (array)
imap_rfc822_parse_headers(string headers, [string defaulthost]) Parse mail headers from a string (object)
imap_rfc822_write_address(string mailbox, string host, string personal) Returns a properly formatted email address given the mailbox, host, and personal info (string)
imap_savebody(resource imap_stream, mixed file, int msg_number, [string part_number, [int options]]) Save a specific body section to a file (bool)
imap_scanmailbox() Alias of imap_listscan
imap_search(resource imap_stream, string criteria, [int options, [string charset]]) This function returns an array of messages matching the given search criteria (array)
imap_set_quota(resource imap_stream, string quota_root, int quota_limit) Sets a quota for a given mailbox (bool)
imap_setacl(resource imap_stream, string mailbox, string id, string rights) Sets the ACL for a giving mailbox (bool)
imap_setflag_full(resource imap_stream, string sequence, string flag, [int options]) Sets flags on messages (bool)
imap_sort(resource imap_stream, int criteria, int reverse, [int options, [string search_criteria, [string charset]]]) Gets and sort messages (array)
imap_status(resource imap_stream, string mailbox, int options) Returns status information on a mailbox (object)
imap_subscribe(resource imap_stream, string mailbox) Subscribe to a mailbox (bool)
imap_thread(resource imap_stream, [int options]) Returns a tree of threaded message (array)
imap_timeout(int timeout_type, [int timeout]) Set or fetch imap timeout (mixed)
imap_uid(resource imap_stream, int msg_number) This function returns the UID for the given message sequence number (int)
imap_undelete(resource imap_stream, int msg_number, [int flags]) Unmark the message which is marked deleted (bool)
imap_unsubscribe(resource imap_stream, string mailbox) Unsubscribe from a mailbox (bool)
imap_utf7_decode(string text) Decodes a modified UTF-7 encoded string (string)
imap_utf7_encode(string data) Converts ISO-8859-1 string to modified UTF-7 text (string)
imap_utf8(string mime_encoded_text) Converts MIME-encoded text to UTF-8 (string)
inclued_get_data() Get the inclued data (array)
assert_options(int what, [mixed value]) Set/get the various assert flags (mixed)
assert(mixed assertion) Checks if assertion is FALSE (bool)
dl(string library) Loads a PHP extension at runtime (int)
extension_loaded(string name) Find out whether an extension is loaded (bool)
gc_collect_cycles() Forces collection of any existing garbage cycles (int)
gc_disable() Deactivates the circular reference collector (null)
gc_enable() Activates the circular reference collector (null)
gc_enabled() Returns status of the circular reference collector (bool)
get_cfg_var(string option) Gets the value of a PHP configuration option (string)
get_current_user() Gets the name of the owner of the current PHP script (string)
get_defined_constants([bool categorize]) Returns an associative array with the names of all the constants and their values (array)
get_extension_funcs(string module_name) Returns an array with the names of the functions of a module (array)
get_include_path() Gets the current include_path configuration option (string)
get_included_files() Returns an array with the names of included or required files (array)
get_loaded_extensions([bool zend_extensions]) Returns an array with the names of all modules compiled and loaded (array)
get_magic_quotes_gpc() Gets the current configuration setting of magic quotes gpc (int)
get_magic_quotes_runtime() Gets the current active configuration setting of magic_quotes_runtime (int)
get_required_files() Alias of get_included_files
getenv(string varname) Gets the value of an environment variable (string)
getlastmod() Gets time of last page modification (int)
getmygid() Get PHP script owner's GID (int)
getmyinode() Gets the inode of the current script (int)
getmypid() Gets PHP's process ID (int)
getmyuid() Gets PHP script owner's UID (int)
getopt(string options, [array longopts]) Gets options from the command line argument list (array)
getrusage([int who]) Gets the current resource usages (array)
ini_alter() Alias of ini_set
ini_get_all([string extension, [bool details]]) Gets all configuration options (array)
ini_get(string varname) Gets the value of a configuration option (string)
ini_restore(string varname) Restores the value of a configuration option (null)
ini_set(string varname, string newvalue) Sets the value of a configuration option (string)
magic_quotes_runtime() Alias of set_magic_quotes_runtime
memory_get_peak_usage([bool real_usage]) Returns the peak of memory allocated by PHP (int)
memory_get_usage([bool real_usage]) Returns the amount of memory allocated to PHP (int)
php_ini_loaded_file() Retrieve a path to the loaded php.ini file (string)
php_ini_scanned_files() Return a list of .ini files parsed from the additional ini dir (string)
php_logo_guid() Gets the logo guid (string)
php_sapi_name() Returns the type of interface between web server and PHP (string)
php_uname([string mode]) Returns information about the operating system PHP is running on (string)
phpcredits([int flag]) Prints out the credits for PHP (bool)
phpinfo([int what]) Outputs lots of PHP information (bool)
phpversion([string extension]) Gets the current PHP version (string)
putenv(string setting) Sets the value of an environment variable (bool)
restore_include_path() Restores the value of the include_path configuration option (null)
set_include_path(string new_include_path) Sets the include_path configuration option (string)
set_magic_quotes_runtime(bool new_setting) Sets the current active configuration setting of magic_quotes_runtime (bool)
set_time_limit(int seconds) Limits the maximum execution time (null)
sys_get_temp_dir() Returns directory path used for temporary files (string)
version_compare(string version1, string version2, [string operator]) Compares two "PHP-standardized" version number strings (mixed)
zend_logo_guid() Gets the Zend guid (string)
zend_thread_id() Returns a unique identifier for the current thread (int)
zend_version() Gets the version of the current Zend engine (string)
ingres_autocommit_state(resource link) Test if the connection is using autocommit (bool)
ingres_autocommit(resource link) Switch autocommit on or off (bool)
ingres_charset(resource link) Returns the installation character set (string)
ingres_close(resource link) Close an Ingres database connection (bool)
ingres_commit(resource link) Commit a transaction (bool)
ingres_connect([string database, [string username, [string password, [array options]]]]) Open a connection to an Ingres database (resource)
ingres_cursor(resource result) Get a cursor name for a given result resource (string)
ingres_errno([resource link]) Get the last Ingres error number generated (int)
ingres_error([resource link]) Get a meaningful error message for the last error generated (string)
ingres_errsqlstate([resource link]) Get the last SQLSTATE error code generated (string)
ingres_escape_string(resource link, string source_string) Escape special characters for use in a query (string)
ingres_execute(resource result, [array params, [string types]]) Execute a prepared query (boolean)
ingres_fetch_array(resource result, [int result_type]) Fetch a row of result into an array (array)
ingres_fetch_object(resource result, [int result_type]) Fetch a row of result into an object (object)
ingres_fetch_proc_return(resource result) Get the return value from a procedure call (int)
ingres_fetch_row(resource result) Fetch a row of result into an enumerated array (array)
ingres_field_length(resource result, int index) Get the length of a field (int)
ingres_field_name(resource result, int index) Get the name of a field in a query result (string)
ingres_field_nullable(resource result, int index) Test if a field is nullable (bool)
ingres_field_precision(resource result, int index) Get the precision of a field (int)
ingres_field_scale(resource result, int index) Get the scale of a field (int)
ingres_field_type(resource result, int index) Get the type of a field in a query result (string)
ingres_free_result(resource result) Free the resources associated with a result identifier (bool)
ingres_next_error([resource link]) Get the next Ingres error (bool)
ingres_num_fields(resource result) Get the number of fields returned by the last query (int)
ingres_num_rows(resource result) Get the number of rows affected or returned by a query (int)
ingres_pconnect([string database, [string username, [string password, [array options]]]]) Open a persistent connection to an Ingres database (resource)
ingres_prepare(resource link, string query) Prepare a query for later execution (mixed)
ingres_query(resource link, string query, [array params, [string types]]) Send an SQL query to Ingres (mixed)
ingres_result_seek(resource result, integer position) Set the row position before fetching data (boolean)
ingres_rollback(resource link) Roll back a transaction (bool)
ingres_set_environment(resource link, array options) Set environment features controlling output options (bool)
ingres_unbuffered_query(resource link, string query, [array params, [string types]]) Send an unbuffered SQL query to Ingres (mixed)
inotify_add_watch(resource inotify_instance, string pathname, int mask) Add a watch to an initialized inotify instance (int)
inotify_init() Initialize an inotify instance (resource)
inotify_queue_len(resource inotify_instance) Return a number upper than zero if there are pending events (int)
inotify_read(resource inotify_instance) Read events from an inotify instance (array)
inotify_rm_watch(resource inotify_instance, int watch_descriptor) Remove an existing watch from an inotify instance (bool)
>asort(array &arr, [int sort_flag]) Sort array maintaining index association (Collator: bool)
collator_asort(Collator coll, array &arr, [int sort_flag]) Sort array maintaining index association (bool)
>compare(string str1, string str2) Compare two Unicode strings (Collator: int)
collator_compare(Collator coll, string str1, string str2) Compare two Unicode strings (int)
Collator(string locale) Create a collator (new)
>create(string locale) Create a collator (Collator: Collator)
collator_create(string locale) Create a collator (Collator)
>getAttribute(int attr) Get collation attribute value (Collator: int)
collator_get_attribute(Collator coll, int attr) Get collation attribute value (int)
>getErrorCode() Get collator's last error code (Collator: int)
collator_get_error_code(Collator coll) Get collator's last error code (int)
>getErrorMessage() Get text for collator's last error code (Collator: string)
collator_get_error_message(Collator coll) Get text for collator's last error code (string)
>getLocale([int type]) Get the locale name of the collator (Collator: string)
collator_get_locale(Collator coll, int type) Get the locale name of the collator (string)
>getStrength() Get current collation strength (Collator: int)
collator_get_strength(Collator coll) Get current collation strength (int)
>setAttribute(int attr, int val) Set collation attribute (Collator: bool)
collator_set_attribute(Collator coll, int attr, int val) Set collation attribute (bool)
>setStrength(int strength) Set collation strength (Collator: bool)
collator_set_strength(Collator coll, int strength) Set collation strength (bool)
>sortWithSortKeys(array &arr) Sort array using specified collator and sort keys (Collator: bool)
collator_sort_with_sort_keys(Collator coll, array &arr) Sort array using specified collator and sort keys (bool)
>sort(array &arr, [int sort_flag]) Sort array using specified collator (Collator: bool)
collator_sort(Collator coll, array &arr, [int sort_flag]) Sort array using specified collator (bool)
>create(string locale, int datetype, int timetype, [string timezone, [int calendar, [string pattern]]]) Create a date formatter (IntlDateFormatter: IntlDateFormatter)
IntlDateFormatter(string locale, int datetype, int timetype, [string timezone, [int calendar, [string pattern]]]) Create a date formatter (new)
datefmt_create(string locale, int datetype, int timetype, [string timezone, [int calendar, [string pattern]]]) Create a date formatter (IntlDateFormatter)
>format(mixed value) Format the date/time value as a string (IntlDateFormatter: string)
datefmt_format(IntlDateFormatter fmt, mixed value) Format the date/time value as a string (string)
>getCalendar() Get the calendar used for the IntlDateFormatter (IntlDateFormatter: int)
datefmt_get_calendar(IntlDateFormatter fmt) Get the calendar used for the IntlDateFormatter (int)
>getDateType() Get the datetype used for the IntlDateFormatter (IntlDateFormatter: int)
datefmt_get_datetype(IntlDateFormatter fmt) Get the datetype used for the IntlDateFormatter (int)
>getErrorCode() Get the error code from last operation (IntlDateFormatter: int)
datefmt_get_error_code(IntlDateFormatter fmt) Get the error code from last operation (int)
>getErrorMessage() Get the error text from the last operation. (IntlDateFormatter: string)
datefmt_get_error_message(IntlDateFormatter fmt) Get the error text from the last operation. (string)
>getLocale([int which]) Get the locale used by formatter (IntlDateFormatter: string)
datefmt_get_locale(IntlDateFormatter fmt, [int which]) Get the locale used by formatter (string)
>getPattern() Get the pattern used for the IntlDateFormatter (IntlDateFormatter: string)
datefmt_get_pattern(IntlDateFormatter fmt) Get the pattern used for the IntlDateFormatter (string)
>getTimeType() Get the timetype used for the IntlDateFormatter (IntlDateFormatter: int)
datefmt_get_timetype(IntlDateFormatter fmt) Get the timetype used for the IntlDateFormatter (int)
>getTimeZoneId() Get the timezone-id used for the IntlDateFormatter (IntlDateFormatter: string)
datefmt_get_timezone_id(IntlDateFormatter fmt) Get the timezone-id used for the IntlDateFormatter (string)
>isLenient() Get the lenient used for the IntlDateFormatter (IntlDateFormatter: bool)
datefmt_is_lenient(IntlDateFormatter fmt) Get the lenient used for the IntlDateFormatter (bool)
>localtime(string value, [int &position]) Parse string to a field-based time value (IntlDateFormatter: array)
datefmt_localtime(IntlDateFormatter fmt, string value, [int &position]) Parse string to a field-based time value (array)
>parse(string value) Parse string to a timestamp value (IntlDateFormatter: int)
datefmt_parse(IntlDateFormatter fmt, string value, [int &position]) Parse string to a timestamp value (int)
>setCalendar(int which) sets the calendar used to the appropriate calendar, which must be (IntlDateFormatter: bool)
datefmt_set_calendar(IntlDateFormatter fmt, int which) sets the calendar used to the appropriate calendar, which must be (bool)
>setLenient(bool lenient) Set the leniency of the parser (IntlDateFormatter: bool)
datefmt_set_lenient(IntlDateFormatter fmt, bool lenient) Set the leniency of the parser (bool)
>setPattern(string pattern) Set the pattern used for the IntlDateFormatter (IntlDateFormatter: bool)
datefmt_set_pattern(IntlDateFormatter fmt, string pattern) Set the pattern used for the IntlDateFormatter (bool)
>setTimeZoneId(string zone) Sets the time zone to use (IntlDateFormatter: bool)
datefmt_set_timezone_id(IntlDateFormatter fmt, string zone) Sets the time zone to use (bool)
intl_error_name(int error_code) Get symbolic name for a given error code (string)
intl_get_error_code() Get the last error code (int)
intl_get_error_message() Get description of the last error (string)
intl_is_failure(int error_code) Check whether the given error code indicates failure (bool)
grapheme_extract(string haystack, int size, [int extract_type, [int start, [int &next]]]) Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8. (string)
grapheme_stripos(string haystack, string needle, [int offset]) Find position (in grapheme units) of first occurrence of a case-insensitive string (int)
grapheme_stristr(string haystack, string needle, [bool before_needle]) Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack. (string)
grapheme_strlen(string input) Get string length in grapheme units (int)
grapheme_strpos(string haystack, string needle, [int offset]) Find position (in grapheme units) of first occurrence of a string (int)
grapheme_strripos(string haystack, string needle, [int offset]) Find position (in grapheme units) of last occurrence of a case-insensitive string (int)
grapheme_strrpos(string haystack, string needle, [int offset]) Find position (in grapheme units) of last occurrence of a string (int)
grapheme_strstr(string haystack, string needle, [bool before_needle]) Returns part of haystack string from the first occurrence of needle to the end of haystack. (string)
grapheme_substr(string string, int start, [int length]) Return part of a string (int)
idn_to_ascii(string domain, [int options]) Convert domain name to IDNA ASCII form. (string)
idn_to_unicode() Alias of idn_to_utf8
idn_to_utf8(string domain, [int options]) Convert domain name from IDNA ASCII to Unicode. (string)
>acceptFromHttp(string header) Tries to find out best available locale based on HTTP "Accept-Language" header (Locale: string)
locale_accept_from_http(string header) Tries to find out best available locale based on HTTP "Accept-Language" header (string)
>composeLocale(array subtags) Returns a correctly ordered and delimited locale ID (Locale: string)
locale_compose(array subtags) Returns a correctly ordered and delimited locale ID (string)
>filterMatches(string langtag, string locale, [bool canonicalize]) Checks if a language tag filter matches with locale (Locale: bool)
locale_filter_matches(string langtag, string locale, [bool canonicalize]) Checks if a language tag filter matches with locale (bool)
>getAllVariants(string locale) Gets the variants for the input locale (Locale: array)
locale_get_all_variants(string locale) Gets the variants for the input locale (array)
>getDefault() Gets the default locale value from the INTL global 'default_locale' (Locale: string)
locale_get_default() Gets the default locale value from the INTL global 'default_locale' (string)
>getDisplayLanguage(string locale, [string in_locale]) Returns an appropriately localized display name for language of the inputlocale (Locale: string)
locale_get_display_language(string locale, [string in_locale]) Returns an appropriately localized display name for language of the inputlocale (string)
>getDisplayName(string locale, [string in_locale]) Returns an appropriately localized display name for the input locale (Locale: string)
locale_get_display_name(string locale, [string in_locale]) Returns an appropriately localized display name for the input locale (string)
>getDisplayRegion(string locale, [string in_locale]) Returns an appropriately localized display name for region of the input locale (Locale: string)
locale_get_display_region(string locale, [string in_locale]) Returns an appropriately localized display name for region of the input locale (string)
>getDisplayScript(string locale, [string in_locale]) Returns an appropriately localized display name for script of the input locale (Locale: string)
locale_get_display_script(string locale, [string in_locale]) Returns an appropriately localized display name for script of the input locale (string)
>getDisplayVariant(string locale, [string in_locale]) Returns an appropriately localized display name for variants of the input locale (Locale: string)
locale_get_display_variant(string locale, [string in_locale]) Returns an appropriately localized display name for variants of the input locale (string)
>getKeywords(string locale) Gets the keywords for the input locale (Locale: array)
locale_get_keywords(string locale) Gets the keywords for the input locale (array)
>getPrimaryLanguage(string locale) Gets the primary language for the input locale (Locale: string)
locale_get_primary_language(string locale) Gets the primary language for the input locale (string)
>getRegion(string locale) Gets the region for the input locale (Locale: string)
locale_get_region(string locale) Gets the region for the input locale (string)
>getScript(string locale) Gets the script for the input locale (Locale: string)
locale_get_script(string locale) Gets the script for the input locale (string)
>lookup(array langtag, string locale, [bool canonicalize, [string default]]) Searches the language tag list for the best match to the language (Locale: string)
locale_lookup(array langtag, string locale, [bool canonicalize, [string default]]) Searches the language tag list for the best match to the language (string)
>parseLocale(string locale) Returns a key-value array of locale ID subtag elements. (Locale: array)
locale_parse(string locale) Returns a key-value array of locale ID subtag elements. (array)
>setDefault(string locale) sets the default runtime locale (Locale: bool)
locale_set_default(string locale) sets the default runtime locale (bool)
>create(string locale, string pattern) Constructs a new Message Formatter (MessageFormatter: MessageFormatter)
MessageFormatter(string locale, string pattern) Constructs a new Message Formatter (new)
msgfmt_create(string locale, string pattern) Constructs a new Message Formatter (MessageFormatter)
>formatMessage(string locale, string pattern, array args) Quick format message (MessageFormatter: string)
msgfmt_format_message(string locale, string pattern, array args) Quick format message (string)
>format(array args) Format the message (MessageFormatter: string)
msgfmt_format(MessageFormatter fmt, array args) Format the message (string)
>getErrorCode() Get the error code from last operation (MessageFormatter: int)
msgfmt_get_error_code(MessageFormatter fmt) Get the error code from last operation (int)
>getErrorMessage() Get the error text from the last operation (MessageFormatter: string)
msgfmt_get_error_message(MessageFormatter fmt) Get the error text from the last operation (string)
>getLocale() Get the locale for which the formatter was created. (MessageFormatter: string)
msgfmt_get_locale(NumberFormatter formatter) Get the locale for which the formatter was created. (string)
>getPattern() Get the pattern used by the formatter (MessageFormatter: string)
msgfmt_get_pattern(MessageFormatter fmt) Get the pattern used by the formatter (string)
>parseMessage(string locale, string value) Quick parse input string (MessageFormatter: array)
msgfmt_parse_message(string locale, string value) Quick parse input string (array)
>parse(string value) Parse input string according to pattern (MessageFormatter: array)
msgfmt_parse(MessageFormatter fmt, string value) Parse input string according to pattern (array)
>setPattern(string pattern) Set the pattern used by the formatter (MessageFormatter: bool)
msgfmt_set_pattern(MessageFormatter fmt, string pattern) Set the pattern used by the formatter (bool)
>isNormalized(string input, [string form]) Checks if the provided string is already in the specified normalization form. (Normalizer: bool)
normalizer_is_normalized(string input, [string form]) Checks if the provided string is already in the specified normalization form. (bool)
>normalize(string input, [string form]) Normalizes the input provided and returns the normalized string (Normalizer: string)
normalizer_normalize(string input, [string form]) Normalizes the input provided and returns the normalized string (string)
>create(string locale, int style, [string pattern]) Create a number formatter (NumberFormatter: NumberFormatter)
numfmt_create(string locale, int style, [string pattern]) Create a number formatter (NumberFormatter)
NumberFormatter(string locale, int style, [string pattern]) Create a number formatter (new)
>formatCurrency(float value, string currency) Format a currency value (NumberFormatter: string)
numfmt_format_currency(NumberFormatter fmt, float value, string currency) Format a currency value (string)
>format(number value, [int type]) Format a number (NumberFormatter: string)
numfmt_format(NumberFormatter fmt, number value, [int type]) Format a number (string)
>getAttribute(int attr) Get an attribute (NumberFormatter: int)
numfmt_get_attribute(NumberFormatter fmt, int attr) Get an attribute (int)
>getErrorCode() Get formatter's last error code. (NumberFormatter: int)
numfmt_get_error_code(NumberFormatter fmt) Get formatter's last error code. (int)
>getErrorMessage() Get formatter's last error message. (NumberFormatter: string)
numfmt_get_error_message(NumberFormatter fmt) Get formatter's last error message. (string)
>getLocale([int type]) Get formatter locale (NumberFormatter: string)
numfmt_get_locale(NumberFormatter fmt, [int type]) Get formatter locale (string)
>getPattern() Get formatter pattern (NumberFormatter: string)
numfmt_get_pattern(NumberFormatter fmt) Get formatter pattern (string)
>getSymbol(int attr) Get a symbol value (NumberFormatter: string)
numfmt_get_symbol(NumberFormatter fmt, int attr) Get a symbol value (string)
>getTextAttribute(int attr) Get a text attribute (NumberFormatter: string)
numfmt_get_text_attribute(NumberFormatter fmt, int attr) Get a text attribute (string)
>parseCurrency(string value, string &currency, [int &position]) Parse a currency number (NumberFormatter: float)
numfmt_parse_currency(NumberFormatter fmt, string value, string &currency, [int &position]) Parse a currency number (float)
>parse(string value, [int type, [int &position]]) Parse a number (NumberFormatter: mixed)
numfmt_parse(NumberFormatter fmt, string value, [int type, [int &position]]) Parse a number (mixed)
>setAttribute(int attr, int value) Set an attribute (NumberFormatter: bool)
numfmt_set_attribute(NumberFormatter fmt, int attr, int value) Set an attribute (bool)
>setPattern(string pattern) Set formatter pattern (NumberFormatter: bool)
numfmt_set_pattern(NumberFormatter fmt, string pattern) Set formatter pattern (bool)
>setSymbol(int attr, string value) Set a symbol value (NumberFormatter: bool)
numfmt_set_symbol(NumberFormatter fmt, int attr, string value) Set a symbol value (bool)
>setTextAttribute(int attr, string value) Set a text attribute (NumberFormatter: bool)
numfmt_set_text_attribute(NumberFormatter fmt, int attr, string value) Set a text attribute (bool)
java_last_exception_clear() Clear last Java exception (null)
java_last_exception_get() Get last Java exception (object)
json_decode(string json, [bool assoc, [int depth]]) Decodes a JSON string (mixed)
json_encode(mixed value, [int options]) Returns the JSON representation of a value (string)
json_last_error() Returns the last error occurred (int)
kadm5_chpass_principal(resource handle, string principal, string password) Changes the principal's password (bool)
kadm5_create_principal(resource handle, string principal, [string password, [array options]]) Creates a kerberos principal with the given parameters (bool)
kadm5_delete_principal(resource handle, string principal) Deletes a kerberos principal (bool)
kadm5_destroy(resource handle) Closes the connection to the admin server and releases all related resources (bool)
kadm5_flush(resource handle) Flush all changes to the Kerberos database (bool)
kadm5_get_policies(resource handle) Gets all policies from the Kerberos database (array)
kadm5_get_principal(resource handle, string principal) Gets the principal's entries from the Kerberos database (array)
kadm5_get_principals(resource handle) Gets all principals from the Kerberos database (array)
kadm5_init_with_password(string admin_server, string realm, string principal, string password) Opens a connection to the KADM5 library (resource)
kadm5_modify_principal(resource handle, string principal, array options) Modifies a kerberos principal with the given parameters (bool)
>getBitrate() Returns the bitrate of the MPEG file (KTaglib_MPEG_AudioProperties: int)
>getChannels() Returns the amount of channels of a MPEG file (KTaglib_MPEG_AudioProperties: int)
>getLayer() Returns the layer of a MPEG file (KTaglib_MPEG_AudioProperties: int)
>getLength() Returns the length of a MPEG file (KTaglib_MPEG_AudioProperties: int)
>getSampleBitrate() Returns the sample bitrate of a MPEG file (KTaglib_MPEG_AudioProperties: int)
>getVersion() Returns the version of a MPEG file (KTaglib_MPEG_AudioProperties: int)
>isCopyrighted() Returns the length of a MPEG file (KTaglib_MPEG_AudioProperties: bool)
>isOriginal() Returns the length of a MPEG file (KTaglib_MPEG_AudioProperties: bool)
>isProtectionEnabled() Returns the length of a MPEG file (KTaglib_MPEG_AudioProperties: bool)
>getDescription() Returns a description for the picture in a picture frame (KTaglib_ID3v2_AttachedPictureFrame: string)
>getMimeType() Returns the mime type of the picture (KTaglib_ID3v2_AttachedPictureFrame: string)
>getType() Returns the type of the image (KTaglib_ID3v2_AttachedPictureFrame: int)
>savePicture(string filename) Saves the picture to a file (KTaglib_ID3v2_AttachedPictureFrame: bool)
>getMimeType(string type) Set's the mime type of the picture (KTaglib_ID3v2_AttachedPictureFrame: string)
>setPicture(string filename) Sets the frame picture to the given image (KTaglib_ID3v2_AttachedPictureFrame: null)
>setType(int type) Set the type of the image (KTaglib_ID3v2_AttachedPictureFrame: null)
>getSize() Returns the size of the frame in bytes (KTaglib_ID3v2_Frame: int)
>__toString() Returns a string representation of the frame (KTaglib_ID3v2_Frame: string)
>addFrame(KTagLib_ID3v2_Frame frame) Add a frame to the ID3v2 tag (KTaglib_ID3v2_Tag: bool)
>getFrameList() Returns an array of ID3v2 frames, associated with the ID3v2 tag (KTaglib_ID3v2_Tag: array)
KTaglib_MPEG_File(string filename) Opens a new file (new)
>getAudioProperties() Returns an object that provides access to the audio properties (KTaglib_MPEG_File: KTaglib_MPEG_File:)
>getID3v1Tag([bool create]) Returns an object representing an ID3v1 tag (KTaglib_MPEG_File: KTaglib_ID3v1_Tag)
>getID3v2Tag([bool create]) Returns a ID3v2 object (KTaglib_MPEG_File: KTaglib_ID3v2_Tag)
>getAlbum() Returns the title string from a ID3 tag (KTaglib_Tag: string)
>getArtist() Returns the artist string from a ID3 tag (KTaglib_Tag: string)
>getComment() Returns the comment from a ID3 tag (KTaglib_Tag: string)
>getGenre() Returns the genre from a ID3 tag (KTaglib_Tag: string)
>getTitle() Returns the title string from a ID3 tag (KTaglib_Tag: string)
>getTrack() Returns the track number from a ID3 tag (KTaglib_Tag: int)
>getYear() Returns the year from a ID3 tag (KTaglib_Tag: int)
>isEmpty() Returns true if the tag is empty (KTaglib_Tag: bool)
ldap_8859_to_t61(string value) Translate 8859 characters to t61 characters (string)
ldap_add(resource link_identifier, string dn, array entry) Add entries to LDAP directory (bool)
ldap_bind(resource link_identifier, [string bind_rdn, [string bind_password]]) Bind to LDAP directory (bool)
ldap_close() Alias of ldap_unbind
ldap_compare(resource link_identifier, string dn, string attribute, string value) Compare value of attribute found in entry specified with DN (mixed)
ldap_connect([string hostname, [int port]]) Connect to an LDAP server (resource)
ldap_count_entries(resource link_identifier, resource result_identifier) Count the number of entries in a search (int)
ldap_delete(resource link_identifier, string dn) Delete an entry from a directory (bool)
ldap_dn2ufn(string dn) Convert DN to User Friendly Naming format (string)
ldap_err2str(int errno) Convert LDAP error number into string error message (string)
ldap_errno(resource link_identifier) Return the LDAP error number of the last LDAP command (int)
ldap_error(resource link_identifier) Return the LDAP error message of the last LDAP command (string)
ldap_explode_dn(string dn, int with_attrib) Splits DN into its component parts (array)
ldap_first_attribute(resource link_identifier, resource result_entry_identifier) Return first attribute (string)
ldap_first_entry(resource link_identifier, resource result_identifier) Return first result id (resource)
ldap_first_reference(resource link, resource result) Return first reference (resource)
ldap_free_result(resource result_identifier) Free result memory (bool)
ldap_get_attributes(resource link_identifier, resource result_entry_identifier) Get attributes from a search result entry (array)
ldap_get_dn(resource link_identifier, resource result_entry_identifier) Get the DN of a result entry (string)
ldap_get_entries(resource link_identifier, resource result_identifier) Get all result entries (array)
ldap_get_option(resource link_identifier, int option, mixed &retval) Get the current value for given option (bool)
ldap_get_values_len(resource link_identifier, resource result_entry_identifier, string attribute) Get all binary values from a result entry (array)
ldap_get_values(resource link_identifier, resource result_entry_identifier, string attribute) Get all values from a result entry (array)
ldap_list(resource link_identifier, string base_dn, string filter, [array attributes, [int attrsonly, [int sizelimit, [int timelimit, [int deref]]]]]) Single-level search (resource)
ldap_mod_add(resource link_identifier, string dn, array entry) Add attribute values to current attributes (bool)
ldap_mod_del(resource link_identifier, string dn, array entry) Delete attribute values from current attributes (bool)
ldap_mod_replace(resource link_identifier, string dn, array entry) Replace attribute values with new ones (bool)
ldap_modify(resource link_identifier, string dn, array entry) Modify an LDAP entry (bool)
ldap_next_attribute(resource link_identifier, resource result_entry_identifier) Get the next attribute in result (string)
ldap_next_entry(resource link_identifier, resource result_entry_identifier) Get next result entry (resource)
ldap_next_reference(resource link, resource entry) Get next reference (resource)
ldap_parse_reference(resource link, resource entry, array &referrals) Extract information from reference entry (bool)
ldap_parse_result(resource link, resource result, int &errcode, [string &matcheddn, [string &errmsg, [array &referrals]]]) Extract information from result (bool)
ldap_read(resource link_identifier, string base_dn, string filter, [array attributes, [int attrsonly, [int sizelimit, [int timelimit, [int deref]]]]]) Read an entry (resource)
ldap_rename(resource link_identifier, string dn, string newrdn, string newparent, bool deleteoldrdn) Modify the name of an entry (bool)
ldap_sasl_bind(resource link, [string binddn, [string password, [string sasl_mech, [string sasl_realm, [string sasl_authc_id, [string sasl_authz_id, [string props]]]]]]]) Bind to LDAP directory using SASL (bool)
ldap_search(resource link_identifier, string base_dn, string filter, [array attributes, [int attrsonly, [int sizelimit, [int timelimit, [int deref]]]]]) Search LDAP tree (resource)
ldap_set_option(resource link_identifier, int option, mixed newval) Set the value of the given option (bool)
ldap_set_rebind_proc(resource link, callback callback) Set a callback function to do re-binds on referral chasing (bool)
ldap_sort(resource link, resource result, string sortfilter) Sort LDAP result entries (bool)
ldap_start_tls(resource link) Start TLS (bool)
ldap_t61_to_8859(string value) Translate t61 characters to 8859 characters (string)
ldap_unbind(resource link_identifier) Unbind from LDAP directory (bool)
event_add(resource event, [int timeout]) Add an event to the set of monitored events (bool)
event_base_free(resource event_base) Destroy event base (null)
event_base_loop(resource event_base, [int flags]) Handle events (int)
event_base_loopbreak(resource event_base) Abort event loop (bool)
event_base_loopexit(resource event_base, [int timeout]) Exit loop after a time (bool)
event_base_new() Create and initialize new event base (resource)
event_base_priority_init(resource event_base, int npriorities) Set the number of event priority levels (bool)
event_base_set(resource event, resource event_base) Associate event base with an event (bool)
event_buffer_base_set(resource bevent, resource event_base) Associate buffered event with an event base (resource)
event_buffer_disable(resource bevent, int events) Disable a buffered event (bool)
event_buffer_enable(resource bevent, int events) Enable a buffered event (bool)
event_buffer_fd_set(resource bevent, resource fd) Change a buffered event file descriptor (null)
event_buffer_free(resource bevent) Destroy buffered event (null)
event_buffer_new(resource stream, mixed readcb, mixed writecb, mixed errorcb, [mixed arg]) Create new buffered event (resource)
event_buffer_priority_set(resource bevent, int priority) Assign a priority to a buffered event (resource)
event_buffer_read(resource bevent,  data_size) Read data from a buffered event (string)
event_buffer_timeout_set(resource bevent, int read_timeout, int write_timeout) Set read and write timeouts for a buffered event (null)
event_buffer_watermark_set(resource bevent, int events, int lowmark, int highmark) Set the watermarks for read and write events (bool)
event_buffer_write(resource bevent, string data, [int data_size]) Write data to a buffered event (bool)
event_del(resource event) Remove an event from the set of monitored events (bool)
event_free(resource event) Free event resource (bool)
event_new() Create new event (resource)
event_set(resource event, resource fd, int events, mixed callback, [mixed arg]) Prepare an event (bool)
libxml_clear_errors() Clear libxml error buffer (null)
libxml_disable_entity_loader([bool disable]) Disable the ability to load external entities (ReturnType)
libxml_get_errors() Retrieve array of errors (array)
libxml_get_last_error() Retrieve last error from libxml (LibXMLError)
libxml_set_streams_context(resource streams_context) Set the streams context for the next libxml document load or write (null)
libxml_use_internal_errors([bool use_errors]) Disable libxml errors and allow user to fetch error information as needed (bool)
lzf_compress(string data) LZF compression (string)
lzf_decompress(string data) LZF decompression (string)
lzf_optimized_for() Determines what LZF extension was optimized for (int)
ezmlm_hash(string addr) Calculate the hash value needed by EZMLM (int)
mail(string to, string subject, string message, [string additional_headers, [string additional_parameters]]) Send mail (bool)
mailparse_determine_best_xfer_encoding(resource fp) Gets the best way of encoding (string)
mailparse_msg_create() Create a mime mail resource (resource)
mailparse_msg_extract_part_file(resource mimemail, mixed filename, [callback callbackfunc]) Extracts/decodes a message section (string)
mailparse_msg_extract_part(resource mimemail, string msgbody, [callback callbackfunc]) Extracts/decodes a message section (null)
mailparse_msg_extract_whole_part_file(resource mimemail, string filename, [callback callbackfunc]) Extracts a message section including headers without decoding the transfer encoding (string)
mailparse_msg_free(resource mimemail) Frees a MIME resource (bool)
mailparse_msg_get_part_data(resource mimemail) Returns an associative array of info about the message (array)
mailparse_msg_get_part(resource mimemail, string mimesection) Returns a handle on a given section in a mimemessage (resource)
mailparse_msg_get_structure(resource mimemail) Returns an array of mime section names in the supplied message (array)
mailparse_msg_parse_file(string filename) Parses a file (resource)
mailparse_msg_parse(resource mimemail, string data) Incrementally parse data into buffer (bool)
mailparse_rfc822_parse_addresses(string addresses) Parse RFC 822 compliant addresses (array)
mailparse_stream_encode(resource sourcefp, resource destfp, string encoding) Streams data from source file pointer, apply encoding and write to destfp (bool)
mailparse_uudecode_all(resource fp) Scans the data from fp and extract each embedded uuencoded file (array)
abs(mixed number) Absolute value (number)
acos(float arg) Arc cosine (float)
acosh(float arg) Inverse hyperbolic cosine (float)
asin(float arg) Arc sine (float)
asinh(float arg) Inverse hyperbolic sine (float)
atan(float arg) Arc tangent (float)
atan2(float y, float x) Arc tangent of two variables (float)
atanh(float arg) Inverse hyperbolic tangent (float)
base_convert(string number, int frombase, int tobase) Convert a number between arbitrary bases (string)
bindec(string binary_string) Binary to decimal (number)
ceil(float value) Round fractions up (float)
cos(float arg) Cosine (float)
cosh(float arg) Hyperbolic cosine (float)
decbin(int number) Decimal to binary (string)
dechex(int number) Decimal to hexadecimal (string)
decoct(int number) Decimal to octal (string)
deg2rad(float number) Converts the number in degrees to the radian equivalent (float)
exp(float arg) Calculates the exponent of e (float)
expm1(float arg) Returns exp(number) - 1, computed in a way that is accurate even when the value of number is close to zero (float)
floor(float value) Round fractions down (float)
fmod(float x, float y) Returns the floating point remainder (modulo) of the division of the arguments (float)
getrandmax() Show largest possible random value (int)
hexdec(string hex_string) Hexadecimal to decimal (number)
hypot(float x, float y) Calculate the length of the hypotenuse of a right-angle triangle (float)
is_finite(float val) Finds whether a value is a legal finite number (bool)
is_infinite(float val) Finds whether a value is infinite (bool)
is_nan(float val) Finds whether a value is not a number (bool)
lcg_value() Combined linear congruential generator (float)
log(float arg, [float base]) Natural logarithm (float)
log10(float arg) Base-10 logarithm (float)
log1p(float number) Returns log(1 + number), computed in a way that is accurate even when the value of number is close to zero (float)
max(array values) Find highest value (mixed)
max(mixed value1, mixed value2, [mixed value3...]) Find highest value (mixed)
min(array values) Find lowest value (mixed)
min(mixed value1, mixed value2, [mixed value3...]) Find lowest value (mixed)
mt_getrandmax() Show largest possible random value (int)
mt_rand() Generate a better random value (int)
mt_rand(int min, int max) Generate a better random value (int)
mt_srand([int seed]) Seed the better random number generator (null)
octdec(string octal_string) Octal to decimal (number)
pi() Get value of pi (float)
pow(number base, number exp) Exponential expression (number)
rad2deg(float number) Converts the radian number to the equivalent number in degrees (float)
rand() Generate a random integer (int)
rand(int min, int max) Generate a random integer (int)
round(float val, [int precision, [int mode]]) Rounds a float (float)
sin(float arg) Sine (float)
sinh(float arg) Hyperbolic sine (float)
sqrt(float arg) Square root (float)
srand([int seed]) Seed the random number generator (null)
tan(float arg) Tangent (float)
tanh(float arg) Hyperbolic tangent (float)
maxdb_affected_rows(resource link) Gets the number of affected rows in a previous MaxDB operation (int)
>affected_rows
maxdb_autocommit(resource link, bool mode) Turns on or off auto-commiting database modifications (bool)
>auto_commit(bool mode) Turns on or off auto-commiting database modifications (maxdb: bool)
maxdb_bind_param() Alias of maxdb_stmt_bind_param
maxdb_bind_result() Alias of maxdb_stmt_bind_result
maxdb_change_user(resource link, string user, string password, string database) Changes the user of the specified database connection (bool)
>change_user(string user, string password, string database) Changes the user of the specified database connection (maxdb: bool)
maxdb_character_set_name(resource link) Returns the default character set for the database connection (string)
>character_set_name() Returns the default character set for the database connection (maxdb: string)
maxdb_client_encoding() Alias of maxdb_character_set_name
maxdb->close_long_data() Alias of maxdb_stmt_close_long_data
maxdb_close(resource link) Closes a previously opened database connection (bool)
>close() Closes a previously opened database connection (maxdb: bool)
maxdb_commit(resource link) Commits the current transaction (bool)
>commit() Commits the current transaction (maxdb: bool)
maxdb_connect_errno() Returns the error code from last connect call (int)
maxdb_connect_error() Returns a string description of the last connect error (string)
maxdb_connect([string host, [string username, [string passwd, [string dbname, [int port, [string socket]]]]]]) Open a new connection to the MaxDB server (resource)
maxdb([string host, [string username, [string passwd, [string dbname, [int port, [string socket]]]]]]) Open a new connection to the MaxDB server (new)
maxdb_data_seek(resource result, int offset) Adjusts the result pointer to an arbitary row in the result (bool)
>data_seek(int offset) Adjusts the result pointer to an arbitary row in the result (result: bool)
maxdb_debug(string debug) Performs debugging operations (null)
maxdb_disable_reads_from_master(resource link) Disable reads from master (bool)
>disable_reads_from_master() Disable reads from master (maxdb: null)
maxdb_disable_rpl_parse(resource link) Disable RPL parse (bool)
maxdb_dump_debug_info(resource link) Dump debugging information into the log (bool)
maxdb_embedded_connect([string dbname]) Open a connection to an embedded MaxDB server (resource)
maxdb_enable_reads_from_master(resource link) Enable reads from master (bool)
maxdb_enable_rpl_parse(resource link) Enable RPL parse (bool)
maxdb_errno(resource link) Returns the error code for the most recent function call (int)
>errno
maxdb_error(resource link) Returns a string description of the last error (string)
>error
maxdb_escape_string() Alias of maxdb_real_escape_string
maxdb_execute() Alias of maxdb_stmt_execute
maxdb_fetch_array(resource result, [int resulttype]) Fetch a result row as an associative, a numeric array, or both (mixed)
>fetch_array([int resulttype]) Fetch a result row as an associative, a numeric array, or both (result: mixed)
maxdb_fetch_assoc(resource result) Fetch a result row as an associative array (array)
>fetch_assoc() Fetch a result row as an associative array (result: array)
maxdb_fetch_field_direct(resource result, int fieldnr) Fetch meta-data for a single field (mixed)
>fetch_field_direct(int fieldnr) Fetch meta-data for a single field (result: mixed)
maxdb_fetch_field(resource result) Returns the next field in the result set (mixed)
>fetch_field() Returns the next field in the result set (result: mixed)
maxdb_fetch_fields(resource result) Returns an array of resources representing the fields in a result set (mixed)
>fetch_fields() Returns an array of resources representing the fields in a result set (result: mixed)
maxdb_fetch_lengths(resource result) Returns the lengths of the columns of the current row in the result set (array)
>lengths
maxdb_fetch_object(object result) Returns the current row of a result set as an object (object)
>fetch_object() Returns the current row of a result set as an object (result: object)
maxdb_fetch_row(resource result) Get a result row as an enumerated array (mixed)
>fetch_row() Get a result row as an enumerated array (result: mixed)
maxdb_fetch() Alias of maxdb_stmt_fetch
maxdb_field_count(resource link) Returns the number of columns for the most recent query (int)
>field_count() Returns the number of columns for the most recent query (maxdb: int)
maxdb_field_seek(resource result, int fieldnr) Set result pointer to a specified field offset (bool)
>field_seek(int fieldnr) Set result pointer to a specified field offset (result: bool)
maxdb_field_tell(resource result) Get current field offset of a result pointer (int)
>current_field
maxdb_free_result(resource result) Frees the memory associated with a result (null)
>free() Frees the memory associated with a result (result: null)
maxdb_get_client_info() Returns the MaxDB client version as a string (string)
maxdb_get_client_version() Get MaxDB client info (int)
maxdb_get_host_info(resource link) Returns a string representing the type of connection used (string)
>host_info
maxdb_get_metadata() Alias of maxdb_stmt_result_metadata
maxdb_get_proto_info(resource link) Returns the version of the MaxDB protocol used (int)
>protocol_version
maxdb_get_server_info(resource link) Returns the version of the MaxDB server (string)
>server_info
maxdb_get_server_version(resource link) Returns the version of the MaxDB server as an integer (int)
>server_version
maxdb_info(resource link) Retrieves information about the most recently executed query (string)
>info
maxdb_init() Initializes MaxDB and returns an resource for use with maxdb_real_connect (resource)
maxdb_insert_id(resource link) Returns the auto generated id used in the last query (mixed)
>insert_id
maxdb_kill(resource link, int processid) Disconnects from a MaxDB server (bool)
>kill(int processid) Disconnects from a MaxDB server (maxdb: bool)
maxdb_master_query(resource link, string query) Enforce execution of a query on the master in a master/slave setup (bool)
maxdb_more_results(resource link) Check if there any more query results from a multi query (bool)
maxdb_multi_query(resource link, string query) Performs a query on the database (bool)
>multi_query(string query) Performs a query on the database (maxdb: bool)
maxdb_next_result(resource link) Prepare next result from multi_query (bool)
maxdb_num_fields(resource result) Get the number of fields in a result (int)
>field_count
maxdb_num_rows(resource result) Gets the number of rows in a result (int)
>num_rows
maxdb_options(resource link, int option, mixed value) Set options (bool)
>options(int option, mixed value) Set options (maxdb: bool)
maxdb_param_count() Alias of maxdb_stmt_param_count
maxdb_ping(resource link) Pings a server connection, or tries to reconnect if the connection has gone down (bool)
>ping() Pings a server connection, or tries to reconnect if the connection has gone down (maxdb: bool)
maxdb_prepare(resource link, string query) Prepare a SQL statement for execution (resource)
>prepare(string query) Prepare a SQL statement for execution (stmt: resource)
maxdb_query(resource link, string query, [int resultmode]) Performs a query on the database (mixed)
>query(string query) Performs a query on the database (maxdb: mixed)
maxdb_real_connect(resource link, [string hostname, [string username, [string passwd, [string dbname, [int port, [string socket]]]]]]) Opens a connection to a MaxDB server (bool)
>real_connect([string hostname, [string username, [string passwd, [string dbname, [int port, [string socket]]]]]]) Opens a connection to a MaxDB server (maxdb: bool)
maxdb_real_escape_string(resource link, string escapestr) Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection (string)
>real_escape_sring(string escapestr) Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection (maxdb: string)
maxdb_real_query(resource link, string query) Execute an SQL query (bool)
>real_query(string query) Execute an SQL query (maxdb: bool)
maxdb_report(int flags) Enables or disables internal report functions (bool)
maxdb_rollback(resource link) Rolls back current transaction (bool)
>rollback() Rolls back current transaction (maxdb: bool)
maxdb_rpl_parse_enabled(resource link) Check if RPL parse is enabled (int)
maxdb_rpl_probe(resource link) RPL probe (bool)
maxdb_rpl_query_type(resource link) Returns RPL query type (int)
>rpl_query_type() Returns RPL query type (maxdb: int)
maxdb_select_db(resource link, string dbname) Selects the default database for database queries (bool)
maxdb_send_long_data() Alias of maxdb_stmt_send_long_data
maxdb_send_query(resource link, string query) Send the query and return (bool)
>send_query(string query) Send the query and return (maxdb: bool)
maxdb_server_end() Shut down the embedded server (null)
maxdb_server_init([array server, [array groups]]) Initialize embedded server (bool)
maxdb_set_opt() Alias of maxdb_options
maxdb_sqlstate(resource link) Returns the SQLSTATE error from previous MaxDB operation (string)
>sqlstate
maxdb_ssl_set(resource link, string key, string cert, string ca, string capath, string cipher) Used for establishing secure connections using SSL (bool)
>ssl_set(string key, string cert, string ca, string capath, string cipher) Used for establishing secure connections using SSL (maxdb: bool)
maxdb_stat(resource link) Gets the current system status (string)
>stat() Gets the current system status (maxdb::maxdb: string)
maxdb_stmt_affected_rows(resource stmt) Returns the total number of rows changed, deleted, or inserted by the last executed statement (int)
>affected_rows
maxdb_stmt_bind_param(resource stmt, string types, mixed &var1, [mixed &...]) Binds variables to a prepared statement as parameters (bool)
>bind_param(string types, mixed &var1, [mixed &...]) Binds variables to a prepared statement as parameters (stmt: bool)
maxdb_stmt_bind_param(resource stmt, string types, array &var) Binds variables to a prepared statement as parameters (bool)
>bind_param(string types, array &var) Binds variables to a prepared statement as parameters (stmt: bool)
maxdb_stmt_bind_result(resource stmt, mixed &var1, [mixed &...]) Binds variables to a prepared statement for result storage (bool)
>bind_result(mixed &var1, [mixed &...]) Binds variables to a prepared statement for result storage (stmt: bool)
maxdb_stmt_close_long_data(resource stmt, int param_nr) Ends a sequence of maxdb_stmt_send_long_data (bool)
>close_long_data() Ends a sequence of maxdb_stmt_send_long_data (maxdb_stmt::maxdb_stmt: bool)
maxdb_stmt_close(resource stmt) Closes a prepared statement (bool)
>close() Closes a prepared statement (maxdb_stmt::maxdb_stmt: bool)
maxdb_stmt_data_seek(resource statement, int offset) Seeks to an arbitray row in statement result set (bool)
>data_seek(int offset) Seeks to an arbitray row in statement result set (stmt: bool)
maxdb_stmt_errno(resource stmt) Returns the error code for the most recent statement call (int)
>errno
maxdb_stmt_error(resource stmt) Returns a string description for last statement error (string)
>error
maxdb_stmt_execute(resource stmt) Executes a prepared Query (bool)
>execute() Executes a prepared Query (stmt: bool)
maxdb_stmt_fetch(resource stmt) Fetch results from a prepared statement into the bound variables (bool)
>fetch() Fetch results from a prepared statement into the bound variables (stmt: bool)
maxdb_stmt_free_result(resource stmt) Frees stored result memory for the given statement handle (null)
>free_result() Frees stored result memory for the given statement handle (stmt: null)
maxdb_stmt_init(resource link) Initializes a statement and returns an resource for use with maxdb_stmt_prepare (resource)
>stmt_init() Initializes a statement and returns an resource for use with maxdb_stmt_prepare (maxdb: object)
maxdb_stmt_num_rows(resource stmt) Return the number of rows in statements result set (int)
>num_rows
maxdb_stmt_param_count(resource stmt) Returns the number of parameter for the given statement (int)
>param_count
maxdb_stmt_prepare(resource stmt, string query) Prepare a SQL statement for execution (bool)
>prepare(string query) Prepare a SQL statement for execution (stmt: mixed)
maxdb_stmt_reset(resource stmt) Resets a prepared statement (bool)
>reset() Resets a prepared statement (stmt: bool)
maxdb_stmt_result_metadata(resource stmt) Returns result set metadata from a prepared statement (resource)
>result_metadata() Returns result set metadata from a prepared statement (stmt: resource)
maxdb_stmt_send_long_data(resource stmt, int param_nr, string data) Send data in blocks (bool)
>stmt_send_long_data(int param_nr, string data) Send data in blocks (stmt: bool)
maxdb_stmt_sqlstate(resource stmt) Returns SQLSTATE error from previous statement operation (string)
maxdb_stmt_store_result(resource stmt) Transfers a result set from a prepared statement (bool)
>store_result() Transfers a result set from a prepared statement (maxdb: object)
maxdb_store_result(resource link) Transfers a result set from the last query (resource)
>store_result() Transfers a result set from the last query (maxdb: object)
maxdb_thread_id(resource link) Returns the thread ID for the current connection (int)
>thread_id
maxdb_thread_safe() Returns whether thread safety is given or not (bool)
maxdb_use_result(resource link) Initiate a result set retrieval (resource)
>use_result() Initiate a result set retrieval (maxdb: resource)
maxdb_warning_count(resource link) Returns the number of warnings from the last query for the given link (int)
>warning_count
mb_check_encoding([string var, [string encoding]]) Check if the string is valid for the specified encoding (bool)
mb_convert_case(string str, int mode, [string encoding]) Perform case folding on a string (string)
mb_convert_encoding(string str, string to_encoding, [mixed from_encoding]) Convert character encoding (string)
mb_convert_kana(string str, [string option, [string encoding]]) Convert "kana" one from another ("zen-kaku", "han-kaku" and more) (string)
mb_convert_variables(string to_encoding, mixed from_encoding, mixed &vars, [mixed &...]) Convert character code in variable(s) (string)
mb_decode_mimeheader(string str) Decode string in MIME header field (string)
mb_decode_numericentity(string str, array convmap, string encoding) Decode HTML numeric string reference to character (string)
mb_detect_encoding(string str, [mixed encoding_list, [bool strict]]) Detect character encoding (string)
mb_detect_order([mixed encoding_list]) Set/Get character encoding detection order (mixed)
mb_encode_mimeheader(string str, [string charset, [string transfer_encoding, [string linefeed, [int indent]]]]) Encode string for MIME header (string)
mb_encode_numericentity(string str, array convmap, string encoding) Encode character to HTML numeric string reference (string)
mb_ereg_match(string pattern, string string, [string option]) Regular expression match for multibyte string (bool)
mb_ereg_replace(string pattern, string replacement, string string, [string option]) Replace regular expression with multibyte support (string)
mb_ereg_search_getpos() Returns start point for next regular expression match (int)
mb_ereg_search_getregs() Retrieve the result from the last multibyte regular expression match (array)
mb_ereg_search_init(string string, [string pattern, [string option]]) Setup string and regular expression for a multibyte regular expression match (bool)
mb_ereg_search_pos([string pattern, [string option]]) Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string (array)
mb_ereg_search_regs([string pattern, [string option]]) Returns the matched part of a multibyte regular expression (array)
mb_ereg_search_setpos(int position) Set start point of next regular expression match (bool)
mb_ereg_search([string pattern, [string option]]) Multibyte regular expression match for predefined multibyte string (bool)
mb_ereg(string pattern, string string, [array regs]) Regular expression match with multibyte support (int)
mb_eregi_replace(string pattern, string replace, string string, [string option]) Replace regular expression with multibyte support ignoring case (string)
mb_eregi(string pattern, string string, [array regs]) Regular expression match ignoring case with multibyte support (int)
mb_get_info([string type]) Get internal settings of mbstring (mixed)
mb_http_input([string type]) Detect HTTP input character encoding (mixed)
mb_http_output([string encoding]) Set/Get HTTP output character encoding (mixed)
mb_internal_encoding([string encoding]) Set/Get internal character encoding (mixed)
mb_language([string language]) Set/Get current language (mixed)
mb_list_encodings() Returns an array of all supported encodings (array)
mb_output_handler(string contents, int status) Callback function converts character encoding in output buffer (string)
mb_parse_str(string encoded_string, [array &result]) Parse GET/POST/COOKIE data and set global variable (bool)
mb_preferred_mime_name(string encoding) Get MIME charset string (string)
mb_regex_encoding([string encoding]) Returns current encoding for multibyte regex as string (mixed)
mb_regex_set_options([string options]) Set/Get the default options for mbregex functions (string)
mb_send_mail(string to, string subject, string message, [string additional_headers, [string additional_parameter]]) Send encoded mail (bool)
mb_split(string pattern, string string, [int limit]) Split multibyte string using regular expression (array)
mb_strcut(string str, int start, [int length, [string encoding]]) Get part of string (string)
mb_strimwidth(string str, int start, int width, [string trimmarker, [string encoding]]) Get truncated string with specified width (string)
mb_stripos(string haystack, string needle, [int offset, [string encoding]]) Finds position of first occurrence of a string within another, case insensitive (int)
mb_stristr(string haystack, string needle, [bool part, [string encoding]]) Finds first occurrence of a string within another, case insensitive (string)
mb_strlen(string str, [string encoding]) Get string length (int)
mb_strpos(string haystack, string needle, [int offset, [string encoding]]) Find position of first occurrence of string in a string (int)
mb_strrchr(string haystack, string needle, [bool part, [string encoding]]) Finds the last occurrence of a character in a string within another (string)
mb_strrichr(string haystack, string needle, [bool part, [string encoding]]) Finds the last occurrence of a character in a string within another, case insensitive (string)
mb_strripos(string haystack, string needle, [int offset, [string encoding]]) Finds position of last occurrence of a string within another, case insensitive (int)
mb_strrpos(string haystack, string needle, [int offset, [string encoding]]) Find position of last occurrence of a string in a string (int)
mb_strstr(string haystack, string needle, [bool part, [string encoding]]) Finds first occurrence of a string within another (string)
mb_strtolower(string str, [string encoding]) Make a string lowercase (string)
mb_strtoupper(string str, [string encoding]) Make a string uppercase (string)
mb_strwidth(string str, [string encoding]) Return width of string (int)
mb_substitute_character([mixed substrchar]) Set/Get substitution character (mixed)
mb_substr_count(string haystack, string needle, [string encoding]) Count the number of substring occurrences (int)
mb_substr(string str, int start, [int length, [string encoding]]) Get part of string (string)
mcrypt_cbc(int cipher, string key, string data, int mode, [string iv]) Encrypt/decrypt data in CBC mode (string)
mcrypt_cbc(string cipher, string key, string data, int mode, [string iv]) Encrypt/decrypt data in CBC mode (string)
mcrypt_cfb(int cipher, string key, string data, int mode, string iv) Encrypt/decrypt data in CFB mode (string)
mcrypt_cfb(string cipher, string key, string data, int mode, [string iv]) Encrypt/decrypt data in CFB mode (string)
mcrypt_create_iv(int size, [int source]) Create an initialization vector (IV) from a random source (string)
mcrypt_decrypt(string cipher, string key, string data, string mode, [string iv]) Decrypts crypttext with given parameters (string)
mcrypt_ecb(int cipher, string key, string data, int mode) Deprecated: Encrypt/decrypt data in ECB mode (string)
mcrypt_ecb(string cipher, string key, string data, int mode, [string iv]) Deprecated: Encrypt/decrypt data in ECB mode (string)
mcrypt_enc_get_algorithms_name(resource td) Returns the name of the opened algorithm (string)
mcrypt_enc_get_block_size(resource td) Returns the blocksize of the opened algorithm (int)
mcrypt_enc_get_iv_size(resource td) Returns the size of the IV of the opened algorithm (int)
mcrypt_enc_get_key_size(resource td) Returns the maximum supported keysize of the opened mode (int)
mcrypt_enc_get_modes_name(resource td) Returns the name of the opened mode (string)
mcrypt_enc_get_supported_key_sizes(resource td) Returns an array with the supported keysizes of the opened algorithm (array)
mcrypt_enc_is_block_algorithm_mode(resource td) Checks whether the encryption of the opened mode works on blocks (bool)
mcrypt_enc_is_block_algorithm(resource td) Checks whether the algorithm of the opened mode is a block algorithm (bool)
mcrypt_enc_is_block_mode(resource td) Checks whether the opened mode outputs blocks (bool)
mcrypt_enc_self_test(resource td) Runs a self test on the opened module (int)
mcrypt_encrypt(string cipher, string key, string data, string mode, [string iv]) Encrypts plaintext with given parameters (string)
mcrypt_generic_deinit(resource td) This function deinitializes an encryption module (bool)
mcrypt_generic_end(resource td) This function terminates encryption (bool)
mcrypt_generic_init(resource td, string key, string iv) This function initializes all buffers needed for encryption (int)
mcrypt_generic(resource td, string data) This function encrypts data (string)
mcrypt_get_block_size(int cipher) Get the block size of the specified cipher (int)
mcrypt_get_block_size(string cipher, string module) Get the block size of the specified cipher (int)
mcrypt_get_cipher_name(int cipher) Get the name of the specified cipher (string)
mcrypt_get_cipher_name(string cipher) Get the name of the specified cipher (string)
mcrypt_get_iv_size(string cipher, string mode) Returns the size of the IV belonging to a specific cipher/mode combination (int)
mcrypt_get_key_size(int cipher) Get the key size of the specified cipher (int)
mcrypt_get_key_size(string cipher, string module) Get the key size of the specified cipher (int)
mcrypt_list_algorithms([string lib_dir]) Get an array of all supported ciphers (array)
mcrypt_list_modes([string lib_dir]) Get an array of all supported modes (array)
mcrypt_module_close(resource td) Close the mcrypt module (bool)
mcrypt_module_get_algo_block_size(string algorithm, [string lib_dir]) Returns the blocksize of the specified algorithm (int)
mcrypt_module_get_algo_key_size(string algorithm, [string lib_dir]) Returns the maximum supported keysize of the opened mode (int)
mcrypt_module_get_supported_key_sizes(string algorithm, [string lib_dir]) Returns an array with the supported keysizes of the opened algorithm (array)
mcrypt_module_is_block_algorithm_mode(string mode, [string lib_dir]) Returns if the specified module is a block algorithm or not (bool)
mcrypt_module_is_block_algorithm(string algorithm, [string lib_dir]) This function checks whether the specified algorithm is a block algorithm (bool)
mcrypt_module_is_block_mode(string mode, [string lib_dir]) Returns if the specified mode outputs blocks or not (bool)
mcrypt_module_open(string algorithm, string algorithm_directory, string mode, string mode_directory) Opens the module of the algorithm and the mode to be used (resource)
mcrypt_module_self_test(string algorithm, [string lib_dir]) This function runs a self test on the specified module (bool)
mcrypt_ofb(int cipher, string key, string data, int mode, string iv) Encrypt/decrypt data in OFB mode (string)
mcrypt_ofb(string cipher, string key, string data, int mode, [string iv]) Encrypt/decrypt data in OFB mode (string)
mdecrypt_generic(resource td, string data) Decrypt data (string)
m_checkstatus(resource conn, int identifier) Check to see if a transaction has completed (int)
m_completeauthorizations(resource conn, int &array) Number of complete authorizations in queue, returning an array of their identifiers (int)
m_connect(resource conn) Establish the connection to MCVE (int)
m_connectionerror(resource conn) Get a textual representation of why a connection failed (string)
m_deletetrans(resource conn, int identifier) Delete specified transaction from MCVE_CONN structure (bool)
m_destroyconn(resource conn) Destroy the connection and MCVE_CONN structure (bool)
m_destroyengine() Free memory associated with IP/SSL connectivity (null)
m_getcell(resource conn, int identifier, string column, int row) Get a specific cell from a comma delimited response by column name (string)
m_getcellbynum(resource conn, int identifier, int column, int row) Get a specific cell from a comma delimited response by column number (string)
m_getcommadelimited(resource conn, int identifier) Get the RAW comma delimited data returned from MCVE (string)
m_getheader(resource conn, int identifier, int column_num) Get the name of the column in a comma-delimited response (string)
m_initconn() Create and initialize an MCVE_CONN structure (resource)
m_initengine(string location) Ready the client for IP/SSL Communication (int)
m_iscommadelimited(resource conn, int identifier) Checks to see if response is comma delimited (int)
m_maxconntimeout(resource conn, int secs) The maximum amount of time the API will attempt a connection to MCVE (bool)
m_monitor(resource conn) Perform communication with MCVE (send/receive data) Non-blocking (int)
m_numcolumns(resource conn, int identifier) Number of columns returned in a comma delimited response (int)
m_numrows(resource conn, int identifier) Number of rows returned in a comma delimited response (int)
m_parsecommadelimited(resource conn, int identifier) Parse the comma delimited response so m_getcell, etc will work (int)
m_responsekeys(resource conn, int identifier) Returns array of strings which represents the keys that can be used for response parameters on this transaction (array)
m_responseparam(resource conn, int identifier, string key) Get a custom response parameter (string)
m_returnstatus(resource conn, int identifier) Check to see if the transaction was successful (int)
m_setblocking(resource conn, int tf) Set blocking/non-blocking mode for connection (int)
m_setdropfile(resource conn, string directory) Set the connection method to Drop-File (int)
m_setip(resource conn, string host, int port) Set the connection method to IP (int)
m_setssl_cafile(resource conn, string cafile) Set SSL CA (Certificate Authority) file for verification of server certificate (int)
m_setssl_files(resource conn, string sslkeyfile, string sslcertfile) Set certificate key files and certificates if server requires client certificate verification (int)
m_setssl(resource conn, string host, int port) Set the connection method to SSL (int)
m_settimeout(resource conn, int seconds) Set maximum transaction time (per trans) (int)
m_sslcert_gen_hash(string filename) Generate hash for SSL client certificate verification (string)
m_transactionssent(resource conn) Check to see if outgoing buffer is clear (int)
m_transinqueue(resource conn) Number of transactions in client-queue (int)
m_transkeyval(resource conn, int identifier, string key, string value) Add key/value pair to a transaction. Replaces deprecated transparam() (int)
m_transnew(resource conn) Start a new transaction (int)
m_transsend(resource conn, int identifier) Finalize and send the transaction (int)
m_uwait(int microsecs) Wait x microsecs (int)
m_validateidentifier(resource conn, int tf) Whether or not to validate the passed identifier on any transaction it is passed to (int)
m_verifyconnection(resource conn, int tf) Set whether or not to PING upon connect to verify connection (bool)
m_verifysslcert(resource conn, int tf) Set whether or not to verify the server ssl certificate (bool)
>add(string key, mixed var, [int flag, [int expire]]) Add an item to the server (Memcache: bool)
>addServer(string host, [int port, [bool persistent, [int weight, [int timeout, [int retry_interval, [bool status, [callback failure_callback, [int timeoutms]]]]]]]]) Add a memcached server to connection pool (Memcache: bool)
>close() Close memcached server connection (Memcache: bool)
>connect(string host, [int port, [int timeout]]) Open memcached server connection (Memcache: bool)
memcache_debug(bool on_off) Turn debug output on/off (bool)
>decrement(string key, [int value]) Decrement item's value (Memcache: int)
>delete(string key, [int timeout]) Delete item from the server (Memcache: bool)
>flush() Flush all existing items at the server (Memcache: bool)
>get(string key, [int &flags]) Retrieve item from the server (Memcache: string)
>get(array keys, [array &flags]) Retrieve item from the server (Memcache: array)
>getExtendedStats([string type, [int slabid, [int limit]]]) Get statistics from all servers in pool (Memcache: array)
>getServerStatus(string host, [int port]) Returns server status (Memcache: int)
>getStats([string type, [int slabid, [int limit]]]) Get statistics of the server (Memcache: array)
>getVersion() Return version of the server (Memcache: string)
>increment(string key, [int value]) Increment item's value (Memcache: int)
>pconnect(string host, [int port, [int timeout]]) Open memcached server persistent connection (Memcache: bool)
>replace(string key, mixed var, [int flag, [int expire]]) Replace value of the existing item (Memcache: bool)
>set(string key, mixed var, [int flag, [int expire]]) Store data at the server (Memcache: bool)
>setCompressThreshold(int threshold, [float min_savings]) Enable automatic compression of large values (Memcache: bool)
>setServerParams(string host, [int port, [int timeout, [int retry_interval, [bool status, [callback failure_callback]]]]]) Changes server parameters and status at runtime (Memcache: bool)
>add(string key, mixed value, [int expiration]) Add an item under a new key (Memcached: bool)
>addByKey(string server_key, string key, mixed value, [int expiration]) Add an item under a new key on a specific server (Memcached: bool)
>addServer(string host, int port, [int weight]) Add a server to the server pool (Memcached: bool)
>addServers(array servers) Add multiple servers to the server pool (Memcached: bool)
>append(string key, string value) Append data to an existing item (Memcached: bool)
>appendByKey(string server_key, string key, string value) Append data to an existing item on a specific server (Memcached: bool)
>cas(double cas_token, string key, mixed value, [int expiration]) Compare and swap an item (Memcached: bool)
>casByKey(double cas_token, string server_key, string key, mixed value, [int expiration]) Compare and swap an item on a specific server (Memcached: bool)
Memcached([string persistent_id]) Create a Memcached instance (new)
>decrement(string key, [int offset]) Decrement numeric item's value (Memcached: int)
>delete(string key, [int time]) Delete an item (Memcached: bool)
>deleteByKey(string server_key, string key, [int time]) Delete an item from a specific server (Memcached: bool)
>fetch() Fetch the next result (Memcached: mixed)
>fetchAll() Fetch all the remaining results (Memcached: mixed)
>flush([int delay]) Invalidate all items in the cache (Memcached: bool)
>get(string key, [callback cache_cb, [double &cas_token]]) Retrieve an item (Memcached: mixed)
>getByKey(string server_key, string key, [callback cache_cb, [double &cas_token]]) Retrieve an item from a specific server (Memcached: mixed)
>getDelayed(array keys, [bool with_cas, [callback value_cb]]) Request multiple items (Memcached: bool)
>getDelayedByKey(string server_key, array keys, [bool with_cas, [callback value_cb]]) Request multiple items from a specific server (Memcached: bool)
>getMulti(array keys, [array &cas_tokens, [integer flags]]) Retrieve multiple items (Memcached: mixed)
>getMultiByKey(string server_key, array keys, [string &cas_tokens, [integer flags]]) Retrieve multiple items from a specific server (Memcached: null)
>getOption(int option) Retrieve a Memcached option value (Memcached: null)
>getResultCode() Return the result code of the last operation (Memcached: int)
>getResultMessage() Return the message describing the result of the last operation (Memcached: string)
>getServerByKey(string server_key) Map a key to a server (Memcached: array)
>getServerList() Get the list of the servers in the pool (Memcached: array)
>getStats() Get server pool statistics (Memcached: array)
>getVersion() Get server pool version info (Memcached: array)
>increment(string key, [int offset]) Increment numeric item's value (Memcached: int)
>prepend(string key, string value) Prepend data to an existing item (Memcached: bool)
>prependByKey(string server_key, string key, string value) Prepend data to an existing item on a specific server (Memcached: bool)
>replace(string key, mixed value, [int expiration]) Replace the item under an existing key (Memcached: bool)
>replaceByKey(string server_key, string key, mixed value, [int expiration]) Replace the item under an existing key on a specific server (Memcached: bool)
>set(string key, mixed value, [int expiration]) Store an item (Memcached: bool)
>setByKey(string server_key, string key, mixed value, [int expiration]) Store an item on a specific server (Memcached: bool)
>setMulti(array items, [int expiration]) Store multiple items (Memcached: bool)
>setMultiByKey(string server_key, array items, [int expiration]) Store multiple items on a specific server (Memcached: bool)
>setOption(int option, mixed value) Set a Memcached option (Memcached: bool)
mhash_count() Get the highest available hash id (int)
mhash_get_block_size(int hash) Get the block size of the specified hash (int)
mhash_get_hash_name(int hash) Get the name of the specified hash (string)
mhash_keygen_s2k(int hash, string password, string salt, int bytes) Generates a key (string)
mhash(int hash, string data, [string key]) Compute hash (string)
mime_content_type(string filename) Detect MIME Content-type for a file (deprecated) (string)
ming_keypress(string char) Returns the action flag for keyPress(char) (int)
ming_setcubicthreshold(int threshold) Set cubic threshold (null)
ming_setscale(float scale) Set the global scaling factor. (null)
ming_setswfcompression(int level) Sets the SWF output compression (null)
ming_useconstants(int use) Use constant pool (null)
ming_useswfversion(int version) Sets the SWF version (null)
SWFAction(string script) Creates a new SWFAction (new)
SWFBitmap(mixed file, [mixed alphafile]) Loads Bitmap object (new)
>getHeight() Returns the bitmap's height (SWFBitmap: float)
>getWidth() Returns the bitmap's width (SWFBitmap: float)
>addAction(SWFAction action, int flags) Adds an action (SWFButton: null)
>addASound(SWFSound sound, int flags) Associates a sound with a button transition (SWFButton: SWFSoundInstance)
>addShape(SWFShape shape, int flags) Adds a shape to a button (SWFButton: null)
SWFButton() Creates a new Button (new)
>setAction(SWFAction action) Sets the action (SWFButton: null)
>setDown(SWFShape shape) Alias for addShape(shape, SWFBUTTON_DOWN) (SWFButton: null)
>setHit(SWFShape shape) Alias for addShape(shape, SWFBUTTON_HIT) (SWFButton: null)
>setMenu(int flag) enable track as menu button behaviour (SWFButton: null)
>setOver(SWFShape shape) Alias for addShape(shape, SWFBUTTON_OVER) (SWFButton: null)
>setUp(SWFShape shape) Alias for addShape(shape, SWFBUTTON_UP) (SWFButton: null)
>addAction(SWFAction action, int flags) Adds this SWFAction to the given SWFSprite instance (SWFDisplayItem: null)
>addColor(int red, int green, int blue, [int a]) Adds the given color to this item's color transform (SWFDisplayItem: null)
>endMask() Another way of defining a MASK layer (SWFDisplayItem: null)
>getRot()  (SWFDisplayItem: float)
>getX()  (SWFDisplayItem: float)
>getXScale()  (SWFDisplayItem: float)
>getXSkew()  (SWFDisplayItem: float)
>getY()  (SWFDisplayItem: float)
>getYScale()  (SWFDisplayItem: float)
>getYSkew()  (SWFDisplayItem: float)
>move(float dx, float dy) Moves object in relative coordinates (SWFDisplayItem: null)
>moveTo(float x, float y) Moves object in global coordinates (SWFDisplayItem: null)
>multColor(float red, float green, float blue, [float a]) Multiplies the item's color transform (SWFDisplayItem: null)
>remove() Removes the object from the movie (SWFDisplayItem: null)
>rotate(float angle) Rotates in relative coordinates (SWFDisplayItem: null)
>rotateTo(float angle) Rotates the object in global coordinates (SWFDisplayItem: null)
>scale(float dx, float dy) Scales the object in relative coordinates (SWFDisplayItem: null)
>scaleTo(float x, [float y]) Scales the object in global coordinates (SWFDisplayItem: null)
>setDepth(int depth) Sets z-order (SWFDisplayItem: null)
>setMaskLevel(int level) Defines a MASK layer at level (SWFDisplayItem: null)
>setMatrix(float a, float b, float c, float d, float x, float y) Sets the item's transform matrix (SWFDisplayItem: null)
>setName(string name) Sets the object's name (SWFDisplayItem: null)
>setRatio(float ratio) Sets the object's ratio (SWFDisplayItem: null)
>skewX(float ddegrees) Sets the X-skew (SWFDisplayItem: null)
>skewXTo(float degrees) Sets the X-skew (SWFDisplayItem: null)
>skewY(float ddegrees) Sets the Y-skew (SWFDisplayItem: null)
>skewYTo(float degrees) Sets the Y-skew (SWFDisplayItem: null)
>moveTo(float x, float y) Moves fill origin (SWFFill: null)
>rotateTo(float angle) Sets fill's rotation (SWFFill: null)
>scaleTo(float x, [float y]) Sets fill's scale (SWFFill: null)
>skewXTo(float x) Sets fill x-skew (SWFFill: null)
>skewYTo(float y) Sets fill y-skew (SWFFill: null)
SWFFont(string filename) Loads a font definition (new)
>getAscent() Returns the ascent of the font, or 0 if not available (SWFFont: float)
>getDescent() Returns the descent of the font, or 0 if not available (SWFFont: float)
>getLeading() Returns the leading of the font, or 0 if not available (SWFFont: float)
>getShape(int code) Returns the glyph shape of a char as a text string (SWFFont: string)
>getUTF8Width(string string) Calculates the width of the given string in this font at full height (SWFFont: float)
>getWidth(string string) Returns the string's width (SWFFont: float)
>addChars(string char) Adds characters to a font for exporting font (SWFFontChar: null)
>addUTF8Chars(string char) Adds characters to a font for exporting font (SWFFontChar: null)
>addEntry(float ratio, int red, int green, int blue, [int alpha]) Adds an entry to the gradient list (SWFGradient: null)
SWFGradient() Creates a gradient object (new)
SWFMorph() Creates a new SWFMorph object (new)
>getShape1() Gets a handle to the starting shape (SWFMorph: SWFShape)
>getShape2() Gets a handle to the ending shape (SWFMorph: SWFShape)
>add(object instance) Adds any type of data to a movie (SWFMovie: mixed)
>addExport(SWFCharacter char, string name)  (SWFMovie: null)
>addFont(SWFFont font)  (SWFMovie: mixed)
SWFMovie([int version]) Creates a new movie object, representing an SWF version 4 movie (new)
>importChar(string libswf, string name)  (SWFMovie: SWFSprite)
>importFont(string libswf, string name)  (SWFMovie: SWFFontChar)
>labelFrame(string label) Labels a frame (SWFMovie: null)
>nextFrame() Moves to the next frame of the animation (SWFMovie: null)
>output([int compression]) Dumps your lovingly prepared movie out (SWFMovie: int)
>remove(object instance) Removes the object instance from the display list (SWFMovie: null)
>save(string filename, [int compression]) Saves the SWF movie in a file (SWFMovie: int)
>saveToFile(resource x, [int compression])  (SWFMovie: int)
>setbackground(int red, int green, int blue) Sets the background color (SWFMovie: null)
>setDimension(float width, float height) Sets the movie's width and height (SWFMovie: null)
>setFrames(int number) Sets the total number of frames in the animation (SWFMovie: null)
>setRate(float rate) Sets the animation's frame rate (SWFMovie: null)
>startSound(SWFSound sound)  (SWFMovie: SWFSoundInstance)
>stopSound(SWFSound sound)  (SWFMovie: null)
>streamMP3(mixed mp3file, [float skip]) Streams a MP3 file (SWFMovie: int)
>writeExports()  (SWFMovie: null)
SWFPrebuiltClip(mixed file) Returns a SWFPrebuiltClip object (new)
>addFill(int red, int green, int blue, [int alpha]) Adds a solid fill to the shape (SWFShape: SWFFill)
addFill(SWFBitmap bitmap, [int flags]) Adds a solid fill to the shape (SWFFill)
addFill(SWFGradient gradient, [int flags]) Adds a solid fill to the shape (SWFFill)
SWFShape() Creates a new shape object (new)
>drawArc(float r, float startAngle, float endAngle) Draws an arc of radius r centered at the current location, from angle startAngle to angle endAngle measured clockwise from 12 o'clock (SWFShape: null)
>drawCircle(float r) Draws a circle of radius r centered at the current location, in a counter-clockwise fashion (SWFShape: null)
>drawCubic(float bx, float by, float cx, float cy, float dx, float dy) Draws a cubic bezier curve using the current position and the three given points as control points (SWFShape: int)
>drawCubicTo(float bx, float by, float cx, float cy, float dx, float dy) Draws a cubic bezier curve using the current position and the three given points as control points (SWFShape: int)
>drawCurve(float controldx, float controldy, float anchordx, float anchordy, [float targetdx], float targetdy) Draws a curve (relative) (SWFShape: int)
>drawCurveTo(float controlx, float controly, float anchorx, float anchory, [float targetx], float targety) Draws a curve (SWFShape: int)
>drawGlyph(SWFFont font, string character, [int size]) Draws the first character in the given string into the shape using the glyph definition from the given font (SWFShape: null)
>drawLine(float dx, float dy) Draws a line (relative) (SWFShape: null)
>drawLineTo(float x, float y) Draws a line (SWFShape: null)
>movePen(float dx, float dy) Moves the shape's pen (relative) (SWFShape: null)
>movePenTo(float x, float y) Moves the shape's pen (SWFShape: null)
>setLeftFill(SWFGradient fill) Sets left rasterizing color (SWFShape: null)
setLeftFill(int red, int green, int blue, [int a]) Sets left rasterizing color (null)
>setLine(SWFShape shape) Sets the shape's line style (SWFShape: null)
setLine(int width, int red, int green, int blue, [int a]) Sets the shape's line style (null)
>setRightFill(SWFGradient fill) Sets right rasterizing color (SWFShape: null)
setRightFill(int red, int green, int blue, [int a]) Sets right rasterizing color (null)
SWFSound(string filename, [int flags]) Returns a new SWFSound object from given file (new)
>loopCount(int point)  (SWFSoundInstance: null)
>loopInPoint(int point)  (SWFSoundInstance: null)
>loopOutPoint(int point)  (SWFSoundInstance: null)
>noMultiple()  (SWFSoundInstance: null)
>add(object object) Adds an object to a sprite (SWFSprite: null)
SWFSprite() Creates a movie clip (a sprite) (new)
>labelFrame(string label) Labels frame (SWFSprite: null)
>nextFrame() Moves to the next frame of the animation (SWFSprite: null)
>remove(object object) Removes an object to a sprite (SWFSprite: null)
>setFrames(int number) Sets the total number of frames in the animation (SWFSprite: null)
>startSound(SWFSound sount)  (SWFSprite: SWFSoundInstance)
>stopSound(SWFSound sount)  (SWFSprite: null)
>addString(string string) Draws a string (SWFText: null)
>addUTF8String(string text) Writes the given text into this SWFText object at the current pen position, using the current font, height, spacing, and color (SWFText: null)
SWFText() Creates a new SWFText object (new)
>getAscent() Returns the ascent of the current font at its current size, or 0 if not available (SWFText: float)
>getDescent() Returns the descent of the current font at its current size, or 0 if not available (SWFText: float)
>getLeading() Returns the leading of the current font at its current size, or 0 if not available (SWFText: float)
>getUTF8Width(string string) calculates the width of the given string in this text objects current font and size (SWFText: float)
>getWidth(string string) Computes string's width (SWFText: float)
>moveTo(float x, float y) Moves the pen (SWFText: null)
>setColor(int red, int green, int blue, [int a]) Sets the current text color (SWFText: null)
>setFont(SWFFont font) Sets the current font (SWFText: null)
>setHeight(float height) Sets the current font height (SWFText: null)
>setSpacing(float spacing) Sets the current font spacing (SWFText: null)
>addChars(string chars) adds characters to a font that will be available within a textfield (SWFTextField: null)
>addString(string string) Concatenates the given string to the text field (SWFTextField: null)
>align(int alignement) Sets the text field alignment (SWFTextField: null)
SWFTextField([int flags]) Creates a text field object (new)
>setBounds(float width, float height) Sets the text field width and height (SWFTextField: null)
>setColor(int red, int green, int blue, [int a]) Sets the color of the text field (SWFTextField: null)
>setFont(SWFFont font) Sets the text field font (SWFTextField: null)
>setHeight(float height) Sets the font height of this text field font (SWFTextField: null)
>setIndentation(float width) Sets the indentation of the first line (SWFTextField: null)
>setLeftMargin(float width) Sets the left margin width of the text field (SWFTextField: null)
>setLineSpacing(float height) Sets the line spacing of the text field (SWFTextField: null)
>setMargins(float left, float right) Sets the margins width of the text field (SWFTextField: null)
>setName(string name) Sets the variable name (SWFTextField: null)
>setPadding(float padding) Sets the padding of this textfield (SWFTextField: null)
>setRightMargin(float width) Sets the right margin width of the text field (SWFTextField: null)
SWFVideoStream([string file]) Returns a SWFVideoStream object (new)
>getNumFrames() Returns the number of frames in the video (SWFVideoStream: int)
>setDimension(int x, int y) Sets video dimension (SWFVideoStream: null)
connection_aborted() Check whether client disconnected (int)
connection_status() Returns connection status bitfield (int)
connection_timeout() Check if the script timed out (int)
constant(string name) Returns the value of a constant (mixed)
define(string name, mixed value, [bool case_insensitive]) Defines a named constant (bool)
defined(string name) Checks whether a given named constant exists (bool)
die() Equivalent to exit
eval(string code_str) Evaluate a string as PHP code (mixed)
exit([string status]) Output a message and terminate the current script (null)
exit(int status) Output a message and terminate the current script (null)
get_browser([string user_agent, [bool return_array]]) Tells what the user's browser is capable of (mixed)
__halt_compiler() Halts the compiler execution (null)
highlight_file(string filename, [bool return]) Syntax highlighting of a file (mixed)
highlight_string(string str, [bool return]) Syntax highlighting of a string (mixed)
ignore_user_abort([string value]) Set whether a client disconnect should abort script execution (int)
pack(string format, [mixed args, [mixed ...]]) Pack data into binary string (string)
php_check_syntax(string filename, [string &error_message]) Check the PHP syntax of (and execute) the specified file (bool)
php_strip_whitespace(string filename) Return source with stripped comments and whitespace (string)
show_source() Alias of highlight_file
sleep(int seconds) Delay execution (int)
sys_getloadavg() Gets system load average (array)
time_nanosleep(int seconds, int nanoseconds) Delay for a number of seconds and nanoseconds (mixed)
time_sleep_until(float timestamp) Make the script sleep until the specified time (bool)
uniqid([string prefix, [bool more_entropy]]) Generate a unique ID (string)
unpack(string format, string data) Unpack data from binary string (array)
usleep(int micro_seconds) Delay execution in microseconds (null)
udm_add_search_limit(resource agent, int var, string val) Add various search limits (bool)
udm_alloc_agent_array(array databases) Allocate mnoGoSearch session (resource)
udm_alloc_agent(string dbaddr, [string dbmode]) Allocate mnoGoSearch session (resource)
udm_api_version() Get mnoGoSearch API version (int)
udm_cat_list(resource agent, string category) Get all the categories on the same level with the current one (array)
udm_cat_path(resource agent, string category) Get the path to the current category (array)
udm_check_charset(resource agent, string charset) Check if the given charset is known to mnogosearch (bool)
udm_check_stored(resource agent, int link, string doc_id) Check connection to stored (int)
udm_clear_search_limits(resource agent) Clear all mnoGoSearch search restrictions (bool)
udm_close_stored(resource agent, int link) Close connection to stored (int)
udm_crc32(resource agent, string str) Return CRC32 checksum of given string (int)
udm_errno(resource agent) Get mnoGoSearch error number (int)
udm_error(resource agent) Get mnoGoSearch error message (string)
udm_find(resource agent, string query) Perform search (resource)
udm_free_agent(resource agent) Free mnoGoSearch session (int)
udm_free_ispell_data(int agent) Free memory allocated for ispell data (bool)
udm_free_res(resource res) Free mnoGoSearch result (bool)
udm_get_doc_count(resource agent) Get total number of documents in database (int)
udm_get_res_field(resource res, int row, int field) Fetch a result field (string)
udm_get_res_param(resource res, int param) Get mnoGoSearch result parameters (string)
udm_hash32(resource agent, string str) Return Hash32 checksum of gived string (int)
udm_load_ispell_data(resource agent, int var, string val1, string val2, int flag) Load ispell data (bool)
udm_open_stored(resource agent, string storedaddr) Open connection to stored (int)
udm_set_agent_param(resource agent, int var, string val) Set mnoGoSearch agent session parameters (bool)
>close() Closes this database connection (Mongo: boolean)
>connect() Connects to a database server (Mongo: boolean)
>connectUtil(string username, string password) Connects with a database server (Mongo: boolean)
Mongo([string server, [boolean connect, [boolean persistent, [boolean paired]]]]) Creates a new database connection object (new)
>dropDB(mixed db) Drops a database (Mongo: array)
>lastError() Check if there was an error on the most recent db operation performed (Mongo: string)
>pairConnect() Connects to paired database server (Mongo: boolean)
>pairPersistConnect([string username, [string password]]) Creates a persistent connection with paired database servers (Mongo: boolean)
>persistConnect([string username, [string password]]) Creates a persistent connection with a database server (Mongo: boolean)
>prevError() Checks for the last error thrown during a database operation (Mongo: array)
>repairDB(MongoDB db, [boolean preserve_cloned_files, [boolean backup_original_files]]) Repairs and compacts a database (Mongo: array)
>resetError() Clears any flagged errors on the connection (Mongo: array)
>selectDB(string dbname) Gets a database (Mongo: MongoDB)
>__toString() String representation of this connection (Mongo: string)
MongoBinData(string data, [int type]) Creates a new binary data object. (new)
>__toString() The string representation of this binary data object. (MongoBinData: string)
MongoCode(string code, [array scope]) Creates a new code object (new)
>__toString() Returns this code as a string (MongoCode: string)
>batchInsert(array a) Inserts multiple documents into this collection (MongoCollection: boolean)
MongoCollection(MongoDB db, string name) Creates a new collection (new)
>count([array query, [array fields]]) Counts the number of documents in this collection (MongoCollection: int)
>createDBRef(array a) Creates a database reference (MongoCollection: array)
>deleteIndex(string|array keys) Deletes an index from this collection (MongoCollection: array)
>deleteIndexes() Delete all indices for this collection (MongoCollection: array)
>drop() Drops this collection (MongoCollection: array)
>ensureIndex(string|array keys) Creates an index on the given field(s), or does nothing if the index already exists (MongoCollection: boolean)
>find([array query, [array fields]]) Querys this collection (MongoCollection: MongoCursor)
>findOne([array query, [array fields]]) Querys this collection, returning a single element (MongoCollection: array)
>getDBRef(array ref) Fetches the document pointed to by a database reference (MongoCollection: array)
>getIndexInfo() Returns an array of index names for this collection (MongoCollection: array)
>getName() Returns this collection's name (MongoCollection: string)
>group(array keys, array initial, string reduce, [array condition]) Performs an operation similar to SQL's GROUP BY command (MongoCollection: array)
>insert(array a) Inserts an array into the collection (MongoCollection: boolean)
>remove(array criteria, [boolean justOne]) Remove records from this collection (MongoCollection: boolean)
>save(array a) Saves an object to this collection (MongoCollection: boolean)
>__toString() String representation of this collection (MongoCollection: string)
>update(array criteria, array newobj, [boolean upsert]) Update records based on a given criteria (MongoCollection: boolean)
>validate([bool scan_data]) Validates this collection (MongoCollection: array)
MongoCursor(resource connection, string ns, [array query, [array fields]]) Create a new cursor (new)
>count() Counts the number of results for this query (MongoCursor: int)
>current() Returns the current result (MongoCursor: array)
>doQuery() Execute the query. (MongoCursor: null)
>explain() Return an explanation of the query, often useful for optimization and debugging (MongoCursor: array)
>getNext() Return the next object to which this cursor points, and advance the cursor (MongoCursor: array)
>hasNext() Checks if there are any more elements in this cursor (MongoCursor: boolean)
>hint(array key_pattern) Gives the database a hint about the query (MongoCursor: MongoCursor)
>key() Returns the current result's _id (MongoCursor: string)
>limit(int num) Limits the number of results returned (MongoCursor: MongoCursor)
>next() Advances the cursor to the next result (MongoCursor: null)
>reset() Clears the cursor (MongoCursor: null)
>rewind() Returns the cursor to the beginning of the result set (MongoCursor: null)
>skip(int num) Skips a number of results (MongoCursor: MongoCursor)
>slaveOkay([boolean okay]) Sets whether this query can be done on a slave (MongoCursor: MongoCursor)
>sort(array fields) Sorts the results by given fields (MongoCursor: MongoCursor)
>tailable([boolean tail]) Sets whether this cursor will be left open after fetching the last results (MongoCursor: MongoCursor)
>valid() Checks if the cursor is reading a valid result. (MongoCursor: boolean)
MongoDate([long sec, [long usec]]) Creates a new date. (new)
>__toString() Returns a string representation of this date (MongoDate: string)
>command(array data) Execute a database command (MongoDB: array)
MongoDB(Mongo conn, string name) Creates a new database (new)
>createCollection(string name, [bool capped, [int size, [int max]]]) Creates a collection (MongoDB: MongoCollection)
>createDBRef(mixed ns, mixed a) Creates a database reference (MongoDB: array)
>drop() Drops this database (MongoDB: array)
>dropCollection(mixed coll) Drops a collection (MongoDB: array)
>execute(mixed code, [array args]) Runs JavaScript code on the database server. (MongoDB: array)
>getCursorInfo() Gets information from the database about cursors (MongoDB: array)
>getDBRef(array ref) Fetches the document pointed to by a database reference (MongoDB: array)
>getGridFS([string arg1, [string arg2]]) Fetches toolkit for dealing with files stored in this database (MongoDB: MongoGridFS)
>getProfilingLevel() Gets this database's profiling level (MongoDB: int)
>listCollections() Get a list of collections in this database (MongoDB: array)
>repair([bool preserve_cloned_files, [bool backup_original_files]]) Repairs and compacts this database (MongoDB: array)
>selectCollection(string name) Gets a collection (MongoDB: MongoCollection)
>setProfilingLevel(int level) Sets this database's profiling level (MongoDB: int)
>__toString() The name of this database (MongoDB: string)
>create(string ns, mixed id) Creates a new database reference (MongoDBRef: array)
>get(MongoDB db, array ref) Fetches the object pointed to by a reference (MongoDBRef: array)
>isRef(array ref) Checks if an array is a database reference (MongoDBRef: boolean)
MongoGridFS(MongoDB db, [string files, [string chunks]]) Creates new file collections (new)
>drop() Drops the files and chunks collections (MongoGridFS: array)
>find([array query, [array fields]]) Queries for files (MongoGridFS: MongoGridFSCursor)
>findOne([mixed query]) Returns a single file matching the criteria (MongoGridFS: MongoGridFSFile)
>remove([array criteria, [boolean just_one]]) Removes files from the collections (MongoGridFS: boolean)
>storeBytes(string bytes, [array extra]) Chunkifies and stores bytes in the database (MongoGridFS: mixed)
>storeFile(string filename, [array extra]) Stores a file in the database (MongoGridFS: mixed)
>storeUpload(string name, [string filename]) Saves an uploaded file to the database (MongoGridFS: mixed)
MongoGridFSCursor(MongoGridFS gridfs, resource connection, string ns, [array query, [array fields]]) Create a new cursor (new)
>current() Returns the current file (MongoGridFSCursor: MongoGridFSFile)
>getNext() Return the next file to which this cursor points, and advance the cursor (MongoGridFSCursor: MongoGridFSFile)
>key() Returns the current result's filename (MongoGridFSCursor: string)
MongoGridfsFile(MongoGridFS gridfs, array file) Create a new GridFS file (new)
>getBytes() Returns this file's contents as a string of bytes (MongoGridFSFile: string)
>getFilename() Returns this file's filename (MongoGridFSFile: string)
>getSize() Returns this file's size (MongoGridFSFile: int)
>write([string filename]) Writes this file to the filesystem (MongoGridFSFile: int)
MongoId([string id]) Creates a new id (new)
>__toString() Returns a hexidecimal representation of this id (MongoId: string)
MongoRegex(string regex) Creates a new regular expression (new)
>__toString() A string representation of this regular expression (MongoRegex: string)
>toIndexString(string|array keys) Converts a field or array of fields into an underscore-separated string (MongoUtil: string)
mqseries_back(resource hconn, resource &compCode, resource &reason) MQSeries MQBACK (null)
mqseries_begin(resource hconn, array beginOptions, resource &compCode, resource &reason) MQseries MQBEGIN (null)
mqseries_close(resource hconn, resource hobj, int options, resource &compCode, resource &reason) MQSeries MQCLOSE (null)
mqseries_cmit(resource hconn, resource &compCode, resource &reason) MQSeries MQCMIT (null)
mqseries_conn(string qManagerName, resource &hconn, resource &compCode, resource &reason) MQSeries MQCONN (null)
mqseries_connx(string qManagerName, array &connOptions, resource &hconn, resource &compCode, resource &reason) MQSeries MQCONNX (null)
mqseries_disc(resource hconn, resource &compCode, resource &reason) MQSeries MQDISC (null)
mqseries_get(resource hConn, resource hObj, array &md, array &gmo, int &bufferLength, string &msg, int &data_length, resource &compCode, resource &reason) MQSeries MQGET (null)
mqseries_inq(resource hconn, resource hobj, int selectorCount, array selectors, int intAttrCount, resource &intAttr, int charAttrLength, resource &charAttr, resource &compCode, resource &reason) MQSeries MQINQ (null)
mqseries_open(resource hconn, array &objDesc, int option, resource &hobj, resource &compCode, resource &reason) MQSeries MQOPEN (null)
mqseries_put(resource hConn, resource hObj, array &md, array &pmo, string message, resource &compCode, resource &reason) MQSeries MQPUT (null)
mqseries_put1(resource hconn, resource &objDesc, resource &msgDesc, resource &pmo, string buffer, resource &compCode, resource &reason) MQSeries MQPUT1 (null)
mqseries_set(resource hconn, resource hobj, int selectorcount, array selectors, int intattrcount, array intattrs, int charattrlength, array charattrs, resource &compCode, resource &reason) MQSeries MQSET (null)
mqseries_strerror(int reason) Returns the error message corresponding to a result code (MQRC). (string)
msession_connect(string host, string port) Connect to msession server (bool)
msession_count() Get session count (int)
msession_create(string session, [string classname, [string data]]) Create a session (bool)
msession_destroy(string name) Destroy a session (bool)
msession_disconnect() Close connection to msession server (null)
msession_find(string name, string value) Find all sessions with name and value (array)
msession_get_array(string session) Get array of msession variables (array)
msession_get_data(string session) Get data session unstructured data (string)
msession_get(string session, string name, string value) Get value from session (string)
msession_inc(string session, string name) Increment value in session (string)
msession_list() List all sessions (array)
msession_listvar(string name) List sessions with variable (array)
msession_lock(string name) Lock a session (int)
msession_plugin(string session, string val, [string param]) Call an escape function within the msession personality plugin (string)
msession_randstr(int param) Get random string (string)
msession_set_array(string session, array tuples) Set msession variables from an array (null)
msession_set_data(string session, string value) Set data session unstructured data (bool)
msession_set(string session, string name, string value) Set value in session (bool)
msession_timeout(string session, [int param]) Set/get session timeout (int)
msession_uniq(int param, [string classname, [string data]]) Get unique id (string)
msession_unlock(string session, int key) Unlock a session (int)
msql_affected_rows(resource result) Returns number of affected rows (int)
msql_close([resource link_identifier]) Close mSQL connection (bool)
msql_connect([string hostname]) Open mSQL connection (resource)
msql_create_db(string database_name, [resource link_identifier]) Create mSQL database (bool)
msql_createdb() Alias of msql_create_db
msql_data_seek(resource result, int row_number) Move internal row pointer (bool)
msql_db_query(string database, string query, [resource link_identifier]) Send mSQL query (resource)
msql_dbname() Alias of msql_result
msql_drop_db(string database_name, [resource link_identifier]) Drop (delete) mSQL database (bool)
msql_error() Returns error message of last msql call (string)
msql_fetch_array(resource result, [int result_type]) Fetch row as array (array)
msql_fetch_field(resource result, [int field_offset]) Get field information (object)
msql_fetch_object(resource result, [int result_type]) Fetch row as object (object)
msql_fetch_row(resource result, [int result_type]) Get row as enumerated array (array)
msql_field_flags(resource result, int field_offset) Get field flags (string)
msql_field_len(resource result, int field_offset) Get field length (int)
msql_field_name(resource result, int field_offset) Get the name of the specified field in a result (string)
msql_field_seek(resource result, int field_offset) Set field offset (bool)
msql_field_table(resource result, int field_offset) Get table name for field (int)
msql_field_type(resource result, int field_offset) Get field type (string)
msql_fieldflags() Alias of msql_field_flags
msql_fieldlen() Alias of msql_field_len
msql_fieldname() Alias of msql_field_name
msql_fieldtable() Alias of msql_field_table
msql_fieldtype() Alias of msql_field_type
msql_free_result(resource result) Free result memory (bool)
msql_list_dbs([resource link_identifier]) List mSQL databases on server (resource)
msql_list_fields(string database, string tablename, [resource link_identifier]) List result fields (resource)
msql_list_tables(string database, [resource link_identifier]) List tables in an mSQL database (resource)
msql_num_fields(resource result) Get number of fields in result (int)
msql_num_rows(resource query_identifier) Get number of rows in result (int)
msql_numfields() Alias of msql_num_fields
msql_numrows() Alias of msql_num_rows
msql_pconnect([string hostname]) Open persistent mSQL connection (resource)
msql_query(string query, [resource link_identifier]) Send mSQL query (resource)
msql_regcase() Alias of sql_regcase
msql_result(resource result, int row, [mixed field]) Get result data (string)
msql_select_db(string database_name, [resource link_identifier]) Select mSQL database (bool)
msql_tablename() Alias of msql_result
msql() Alias of msql_db_query
mssql_bind(resource stmt, string param_name, mixed &var, int type, [bool is_output, [bool is_null, [int maxlen]]]) Adds a parameter to a stored procedure or a remote stored procedure (bool)
mssql_close([resource link_identifier]) Close MS SQL Server connection (bool)
mssql_connect([string servername, [string username, [string password, [bool new_link]]]]) Open MS SQL server connection (resource)
mssql_data_seek(resource result_identifier, int row_number) Moves internal row pointer (bool)
mssql_execute(resource stmt, [bool skip_results]) Executes a stored procedure on a MS SQL server database (mixed)
mssql_fetch_array(resource result, [int result_type]) Fetch a result row as an associative array, a numeric array, or both (array)
mssql_fetch_assoc(resource result_id) Returns an associative array of the current row in the result (array)
mssql_fetch_batch(resource result) Returns the next batch of records (int)
mssql_fetch_field(resource result, [int field_offset]) Get field information (object)
mssql_fetch_object(resource result) Fetch row as object (object)
mssql_fetch_row(resource result) Get row as enumerated array (array)
mssql_field_length(resource result, [int offset]) Get the length of a field (int)
mssql_field_name(resource result, [int offset]) Get the name of a field (string)
mssql_field_seek(resource result, int field_offset) Seeks to the specified field offset (bool)
mssql_field_type(resource result, [int offset]) Gets the type of a field (string)
mssql_free_result(resource result) Free result memory (bool)
mssql_free_statement(resource stmt) Free statement memory (bool)
mssql_get_last_message() Returns the last message from the server (string)
mssql_guid_string(string binary, [bool short_format]) Converts a 16 byte binary GUID to a string (string)
mssql_init(string sp_name, [resource link_identifier]) Initializes a stored procedure or a remote stored procedure (resource)
mssql_min_error_severity(int severity) Sets the minimum error severity (null)
mssql_min_message_severity(int severity) Sets the minimum message severity (null)
mssql_next_result(resource result_id) Move the internal result pointer to the next result (bool)
mssql_num_fields(resource result) Gets the number of fields in result (int)
mssql_num_rows(resource result) Gets the number of rows in result (int)
mssql_pconnect([string servername, [string username, [string password, [bool new_link]]]]) Open persistent MS SQL connection (resource)
mssql_query(string query, [resource link_identifier, [int batch_size]]) Send MS SQL query (mixed)
mssql_result(resource result, int row, mixed field) Get result data (string)
mssql_rows_affected(resource link_identifier) Returns the number of records affected by the query (int)
mssql_select_db(string database_name, [resource link_identifier]) Select MS SQL database (bool)
mysql_affected_rows([resource link_identifier]) Get number of affected rows in previous MySQL operation (int)
mysql_change_user(string user, string password, [string database, [resource link_identifier]]) Change logged in user of the active connection (int)
mysql_client_encoding([resource link_identifier]) Returns the name of the character set (string)
mysql_close([resource link_identifier]) Close MySQL connection (bool)
mysql_connect([string server, [string username, [string password, [bool new_link, [int client_flags]]]]]) Open a connection to a MySQL Server (resource)
mysql_create_db(string database_name, [resource link_identifier]) Create a MySQL database (bool)
mysql_data_seek(resource result, int row_number) Move internal result pointer (bool)
mysql_db_name(resource result, int row, [mixed field]) Get result data (string)
mysql_db_query(string database, string query, [resource link_identifier]) Send a MySQL query (resource)
mysql_drop_db(string database_name, [resource link_identifier]) Drop (delete) a MySQL database (bool)
mysql_errno([resource link_identifier]) Returns the numerical value of the error message from previous MySQL operation (int)
mysql_error([resource link_identifier]) Returns the text of the error message from previous MySQL operation (string)
mysql_escape_string(string unescaped_string) Escapes a string for use in a mysql_query (string)
mysql_fetch_array(resource result, [int result_type]) Fetch a result row as an associative array, a numeric array, or both (array)
mysql_fetch_assoc(resource result) Fetch a result row as an associative array (array)
mysql_fetch_field(resource result, [int field_offset]) Get column information from a result and return as an object (object)
mysql_fetch_lengths(resource result) Get the length of each output in a result (array)
mysql_fetch_object(resource result, [string class_name, [array params]]) Fetch a result row as an object (object)
mysql_fetch_row(resource result) Get a result row as an enumerated array (array)
mysql_field_flags(resource result, int field_offset) Get the flags associated with the specified field in a result (string)
mysql_field_len(resource result, int field_offset) Returns the length of the specified field (int)
mysql_field_name(resource result, int field_offset) Get the name of the specified field in a result (string)
mysql_field_seek(resource result, int field_offset) Set result pointer to a specified field offset (bool)
mysql_field_table(resource result, int field_offset) Get name of the table the specified field is in (string)
mysql_field_type(resource result, int field_offset) Get the type of the specified field in a result (string)
mysql_free_result(resource result) Free result memory (bool)
mysql_get_client_info() Get MySQL client info (string)
mysql_get_host_info([resource link_identifier]) Get MySQL host info (string)
mysql_get_proto_info([resource link_identifier]) Get MySQL protocol info (int)
mysql_get_server_info([resource link_identifier]) Get MySQL server info (string)
mysql_info([resource link_identifier]) Get information about the most recent query (string)
mysql_insert_id([resource link_identifier]) Get the ID generated from the previous INSERT operation (int)
mysql_list_dbs([resource link_identifier]) List databases available on a MySQL server (resource)
mysql_list_fields(string database_name, string table_name, [resource link_identifier]) List MySQL table fields (resource)
mysql_list_processes([resource link_identifier]) List MySQL processes (resource)
mysql_list_tables(string database, [resource link_identifier]) List tables in a MySQL database (resource)
mysql_num_fields(resource result) Get number of fields in result (int)
mysql_num_rows(resource result) Get number of rows in result (int)
mysql_pconnect([string server, [string username, [string password, [int client_flags]]]]) Open a persistent connection to a MySQL server (resource)
mysql_pconnect([string server, [string username, [string password, [bool new_link, [int client_flags]]]]]) Open a persistent connection to a MySQL server (resource)
mysql_ping([resource link_identifier]) Ping a server connection or reconnect if there is no connection (bool)
mysql_query(string query, [resource link_identifier]) Send a MySQL query (resource)
mysql_real_escape_string(string unescaped_string, [resource link_identifier]) Escapes special characters in a string for use in a SQL statement (string)
mysql_result(resource result, int row, [mixed field]) Get result data (string)
mysql_select_db(string database_name, [resource link_identifier]) Select a MySQL database (bool)
mysql_set_charset(string charset, [resource link_identifier]) Sets the client character set (bool)
mysql_stat([resource link_identifier]) Get current system status (string)
mysql_tablename(resource result, int i) Get table name of field (string)
mysql_thread_id([resource link_identifier]) Return the current thread ID (int)
mysql_unbuffered_query(string query, [resource link_identifier]) Send an SQL query to MySQL, without fetching and buffering the result rows (resource)
mysqli_bind_param() Alias for mysqli_stmt_bind_param
mysqli_bind_result() Alias for mysqli_stmt_bind_result
mysqli_client_encoding() Alias of mysqli_character_set_name
mysqli_disable_reads_from_master(mysqli link) Disable reads from master (bool)
>disable_reads_from_master() Disable reads from master (mysqli: null)
mysqli_disable_rpl_parse(mysqli link) Disable RPL parse (bool)
mysqli_enable_reads_from_master(mysqli link) Enable reads from master (bool)
mysqli_enable_rpl_parse(mysqli link) Enable RPL parse (bool)
mysqli_escape_string() Alias of mysqli_real_escape_string
mysqli_execute() Alias for mysqli_stmt_execute
mysqli_fetch() Alias for mysqli_stmt_fetch
mysqli_get_metadata() Alias for mysqli_stmt_result_metadata
mysqli_master_query(mysqli link, string query) Enforce execution of a query on the master in a master/slave setup (bool)
mysqli_param_count() Alias for mysqli_stmt_param_count
mysqli_report(int flags) Enables or disables internal report functions (bool)
mysqli_rpl_parse_enabled(mysqli link) Check if RPL parse is enabled (int)
mysqli_rpl_probe(mysqli link) RPL probe (bool)
mysqli_rpl_query_type(mysqli link, string query) Returns RPL query type (int)
>rpl_query_type(string query) Returns RPL query type (mysqli: int)
mysqli_send_long_data() Alias for mysqli_stmt_send_long_data
mysqli_send_query(mysqli link, string query) Send the query and return (bool)
>send_query(string query) Send the query and return (mysqli: bool)
mysqli_set_opt() Alias of mysqli_options
mysqli_slave_query(mysqli link, string query) Force execution of a query on a slave in a master/slave setup (bool)
mysqli_affected_rows(mysqli link) Gets the number of affected rows in a previous MySQL operation (int)
>affected_rows
>autocommit(bool mode) Turns on or off auto-commiting database modifications (mysqli: bool)
mysqli_autocommit(mysqli link, bool mode) Turns on or off auto-commiting database modifications (bool)
>change_user(string user, string password, string database) Changes the user of the specified database connection (mysqli: bool)
mysqli_change_user(mysqli link, string user, string password, string database) Changes the user of the specified database connection (bool)
>character_set_name() Returns the default character set for the database connection (mysqli: string)
mysqli_character_set_name(mysqli link) Returns the default character set for the database connection (string)
>close() Closes a previously opened database connection (mysqli: bool)
mysqli_close(mysqli link) Closes a previously opened database connection (bool)
>commit() Commits the current transaction (mysqli: bool)
mysqli_commit(mysqli link) Commits the current transaction (bool)
mysqli_connect_errno() Returns the error code from last connect call (int)
>connect_errno
mysqli_connect_error() Returns a string description of the last connect error (string)
>connect_error
mysqli([string host, [string username, [string passwd, [string dbname, [int port, [string socket]]]]]]) Open a new connection to the MySQL server (new)
mysqli_connect([string host, [string username, [string passwd, [string dbname, [int port, [string socket]]]]]]) Open a new connection to the MySQL server (mysqli)
>debug(string message) Performs debugging operations (mysqli: bool)
mysqli_debug(string message) Performs debugging operations (bool)
>dump_debug_info() Dump debugging information into the log (mysqli: bool)
mysqli_dump_debug_info(mysqli link) Dump debugging information into the log (bool)
mysqli_errno(mysqli link) Returns the error code for the most recent function call (int)
>errno
mysqli_error(mysqli link) Returns a string description of the last error (string)
>error
mysqli_field_count(mysqli link) Returns the number of columns for the most recent query (int)
>field_count
>get_cache_stats() Returns client Zval cache statistics (mysqli: bool)
mysqli_get_cache_stats() Returns client Zval cache statistics (array)
>get_charset() Returns a character set object (mysqli: object)
mysqli_get_charset(mysqli link) Returns a character set object (object)
>get_client_info() Returns the MySQL client version as a string (mysqli: string)
mysqli_get_client_info() Returns the MySQL client version as a string (string)
>get_client_stats() Returns client per-process statistics (mysqli: bool)
mysqli_get_client_stats() Returns client per-process statistics (array)
>get_client_version() Get MySQL client info (mysqli: int)
mysqli_get_client_version() Get MySQL client info (int)
>get_connection_stats() Returns statistics about the client connection (mysqli: bool)
mysqli_get_connection_stats(mysqli link) Returns statistics about the client connection (array)
mysqli_get_host_info(mysqli link) Returns a string representing the type of connection used (string)
>host_info
mysqli_get_proto_info(mysqli link) Returns the version of the MySQL protocol used (int)
>protocol_version
mysqli_get_server_info(mysqli link) Returns the version of the MySQL server (string)
>server_info
mysqli_get_server_version(mysqli link) Returns the version of the MySQL server as an integer (int)
>server_version
>get_warnings() Get result of SHOW WARNINGS (mysqli: object)
mysqli_get_warnings(mysqli link) Get result of SHOW WARNINGS (object)
mysqli_info(mysqli link) Retrieves information about the most recently executed query (string)
>info
>init() Initializes MySQLi and returns a resource for use with mysqli_real_connect() (mysqli: mysqli)
mysqli_init() Initializes MySQLi and returns a resource for use with mysqli_real_connect() (mysqli)
mysqli_insert_id(mysqli link) Returns the auto generated id used in the last query (mixed)
>insert_id
>kill(int processid) Asks the server to kill a MySQL thread (mysqli: bool)
mysqli_kill(mysqli link, int processid) Asks the server to kill a MySQL thread (bool)
>more_results() Check if there are any more query results from a multi query (mysqli: bool)
mysqli_more_results(mysqli link) Check if there are any more query results from a multi query (bool)
>multi_query(string query) Performs a query on the database (mysqli: bool)
mysqli_multi_query(mysqli link, string query) Performs a query on the database (bool)
>next_result() Prepare next result from multi_query (mysqli: bool)
mysqli_next_result(mysqli link) Prepare next result from multi_query (bool)
>options(int option, mixed value) Set options (mysqli: bool)
mysqli_options(mysqli link, int option, mixed value) Set options (bool)
>ping() Pings a server connection, or tries to reconnect if the connection has gone down (mysqli: bool)
mysqli_ping(mysqli link) Pings a server connection, or tries to reconnect if the connection has gone down (bool)
>poll(array &read, array &error, array &reject, int sec, [int usec]) Poll connections (mysqli: int)
mysqli_poll(array &read, array &error, array &reject, int sec, [int usec]) Poll connections (int)
>prepare(string query) Prepare a SQL statement for execution (mysqli: mysqli_stmt)
mysqli_prepare(mysqli link, string query) Prepare a SQL statement for execution (mysqli_stmt)
>query(string query, [int resultmode]) Performs a query on the database (mysqli: mixed)
mysqli_query(mysqli link, string query, [int resultmode]) Performs a query on the database (mixed)
>real_connect([string host, [string username, [string passwd, [string dbname, [int port, [string socket, [int flags]]]]]]]) Opens a connection to a mysql server (mysqli: bool)
mysqli_real_connect(mysqli link, [string host, [string username, [string passwd, [string dbname, [int port, [string socket, [int flags]]]]]]]) Opens a connection to a mysql server (bool)
>escape_string(string escapestr) Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection (mysqli: string)
>real_escape_string(string escapestr) Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection (mysqli: string)
mysqli_real_escape_string(mysqli link, string escapestr) Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection (string)
>real_query(string query) Execute an SQL query (mysqli: bool)
mysqli_real_query(mysqli link, string query) Execute an SQL query (bool)
>reap_async_query() Get result from async query (mysqli: mysqli_result)
mysqli_reap_async_query(mysql link) Get result from async query (mysqli_result)
>rollback() Rolls back current transaction (mysqli: bool)
mysqli_rollback(mysqli link) Rolls back current transaction (bool)
>select_db(string dbname) Selects the default database for database queries (mysqli: bool)
mysqli_select_db(mysqli link, string dbname) Selects the default database for database queries (bool)
>set_charset(string charset) Sets the default client character set (mysqli: bool)
mysqli_set_charset(mysqli link, string charset) Sets the default client character set (bool)
mysqli_set_local_infile_default(mysqli link) Unsets user defined handler for load local infile command (null)
mysqli_set_local_infile_handler(mysqli link, callback read_func) Set callback function for LOAD DATA LOCAL INFILE command (bool)
>set_local_infile_handler(mysqli link, callback read_func) Set callback function for LOAD DATA LOCAL INFILE command (mysqli: bool)
mysqli_sqlstate(mysqli link) Returns the SQLSTATE error from previous MySQL operation (string)
>sqlstate
>ssl_set(string key, string cert, string ca, string capath, string cipher) Used for establishing secure connections using SSL (mysqli: bool)
mysqli_ssl_set(mysqli link, string key, string cert, string ca, string capath, string cipher) Used for establishing secure connections using SSL (bool)
>stat() Gets the current system status (mysqli: string)
mysqli_stat(mysqli link) Gets the current system status (string)
>stmt_init() Initializes a statement and returns an object for use with mysqli_stmt_prepare (mysqli: mysqli_stmt)
mysqli_stmt_init(mysqli link) Initializes a statement and returns an object for use with mysqli_stmt_prepare (mysqli_stmt)
>store_result() Transfers a result set from the last query (mysqli: mysqli_result)
mysqli_store_result(mysqli link) Transfers a result set from the last query (mysqli_result)
mysqli_thread_id(mysqli link) Returns the thread ID for the current connection (int)
>thread_id
mysqli_thread_safe() Returns whether thread safety is given or not (bool)
>use_result() Initiate a result set retrieval (mysqli: mysqli_result)
mysqli_use_result(mysqli link) Initiate a result set retrieval (mysqli_result)
mysqli_warning_count(mysqli link) Returns the number of warnings from the last query for the given link (int)
>warning_count
>embedded_server_end() Stop embedded server (mysqli_driver: null)
mysqli_embedded_server_end() Stop embedded server (null)
>embedded_server_start(bool start, array arguments, array groups) Initialize and start embedded server (mysqli_driver: bool)
mysqli_embedded_server_start(bool start, array arguments, array groups) Initialize and start embedded server (bool)
mysqli_field_tell(mysqli_result result) Get current field offset of a result pointer (int)
>current_field
>data_seek(int offset) Adjusts the result pointer to an arbitary row in the result (mysqli_result: bool)
mysqli_data_seek(mysqli_result result, int offset) Adjusts the result pointer to an arbitary row in the result (bool)
>fetch_all([int resulttype]) Fetches all result rows as an associative array, a numeric array, or both (mysqli_result: mixed)
mysqli_fetch_all(mysqli_result result, [int resulttype]) Fetches all result rows as an associative array, a numeric array, or both (mixed)
>fetch_array([int resulttype]) Fetch a result row as an associative, a numeric array, or both (mysqli_result: mixed)
mysqli_fetch_array(mysqli_result result, [int resulttype]) Fetch a result row as an associative, a numeric array, or both (mixed)
>fetch_assoc() Fetch a result row as an associative array (mysqli_result: array)
mysqli_fetch_assoc(mysqli_result result) Fetch a result row as an associative array (array)
>fetch_field_direct(int fieldnr) Fetch meta-data for a single field (mysqli_result: object)
mysqli_fetch_field_direct(mysqli_result result, int fieldnr) Fetch meta-data for a single field (object)
>fetch_field() Returns the next field in the result set (mysqli_result: object)
mysqli_fetch_field(mysqli_result result) Returns the next field in the result set (object)
>fetch_fields() Returns an array of objects representing the fields in a result set (mysqli_result: array)
mysqli_fetch_fields(mysqli_result result) Returns an array of objects representing the fields in a result set (array)
>fetch_object([string class_name, [array params]]) Returns the current row of a result set as an object (mysqli_result: object)
mysqli_fetch_object(mysqli_result result, [string class_name, [array params]]) Returns the current row of a result set as an object (object)
>fetch_row() Get a result row as an enumerated array (mysqli_result: mixed)
mysqli_fetch_row(mysqli_result result) Get a result row as an enumerated array (mixed)
mysqli_num_fields(mysqli_result result) Get the number of fields in a result (int)
>field_count
>field_seek(int fieldnr) Set result pointer to a specified field offset (mysqli_result: bool)
mysqli_field_seek(mysqli_result result, int fieldnr) Set result pointer to a specified field offset (bool)
>free() Frees the memory associated with a result (mysqli_result: null)
>close() Frees the memory associated with a result (mysqli_result: null)
>free_result() Frees the memory associated with a result (mysqli_result: null)
mysqli_free_result(mysqli_result result) Frees the memory associated with a result (null)
mysqli_fetch_lengths(mysqli_result result) Returns the lengths of the columns of the current row in the result set (array)
>lengths
mysqli_num_rows(mysqli_result result) Gets the number of rows in a result (int)
>num_rows
mysqli_stmt_affected_rows(mysqli_stmt stmt) Returns the total number of rows changed, deleted, or inserted by the last executed statement (int)
>affected_rows
>attr_get(int attr) Used to get the current value of a statement attribute (mysqli_stmt: int)
mysqli_stmt_attr_get(mysqli_stmt stmt, int attr) Used to get the current value of a statement attribute (int)
>attr_set(int attr, int mode) Used to modify the behavior of a prepared statement (mysqli_stmt: bool)
mysqli_stmt_attr_set(mysqli_stmt stmt, int attr, int mode) Used to modify the behavior of a prepared statement (bool)
>bind_param(string types, mixed &var1, [mixed &...]) Binds variables to a prepared statement as parameters (mysqli_stmt: bool)
mysqli_stmt_bind_param(mysqli_stmt stmt, string types, mixed &var1, [mixed &...]) Binds variables to a prepared statement as parameters (bool)
>bind_result(mixed &var1, [mixed &...]) Binds variables to a prepared statement for result storage (mysqli_stmt: bool)
mysqli_stmt_bind_result(mysqli_stmt stmt, mixed &var1, [mixed &...]) Binds variables to a prepared statement for result storage (bool)
>close() Closes a prepared statement (mysqli_stmt: bool)
mysqli_stmt_close(mysqli_stmt stmt) Closes a prepared statement (bool)
>data_seek(int offset) Seeks to an arbitrary row in statement result set (mysqli_stmt: null)
mysqli_stmt_data_seek(mysqli_stmt stmt, int offset) Seeks to an arbitrary row in statement result set (null)
mysqli_stmt_errno(mysqli_stmt stmt) Returns the error code for the most recent statement call (int)
>errno
mysqli_stmt_error(mysqli_stmt stmt) Returns a string description for last statement error (string)
>error
>execute() Executes a prepared Query (mysqli_stmt: bool)
mysqli_stmt_execute(mysqli_stmt stmt) Executes a prepared Query (bool)
>fetch() Fetch results from a prepared statement into the bound variables (mysqli_stmt: bool)
mysqli_stmt_fetch(mysqli_stmt stmt) Fetch results from a prepared statement into the bound variables (bool)
mysqli_stmt_field_count(mysqli_stmt stmt) Returns the number of field in the given statement (int)
>field_count
>free_result() Frees stored result memory for the given statement handle (mysqli_stmt: null)
mysqli_stmt_free_result(mysqli_stmt stmt) Frees stored result memory for the given statement handle (null)
>get_warnings(mysqli_stmt stmt) Get result of SHOW WARNINGS (mysqli_stmt: object)
mysqli_stmt_get_warnings(mysqli_stmt stmt) Get result of SHOW WARNINGS (object)
mysqli_stmt_insert_id(mysqli_stmt stmt) Get the ID generated from the previous INSERT operation (mixed)
>insert_id
mysqli_stmt_num_rows(mysqli_stmt stmt) Return the number of rows in statements result set (int)
>num_rows
mysqli_stmt_param_count(mysqli_stmt stmt) Returns the number of parameter for the given statement (int)
>param_count
>prepare(string query) Prepare a SQL statement for execution (mysqli_stmt: mixed)
mysqli_stmt_prepare(mysqli_stmt stmt, string query) Prepare a SQL statement for execution (bool)
>reset() Resets a prepared statement (mysqli_stmt: bool)
mysqli_stmt_reset(mysqli_stmt stmt) Resets a prepared statement (bool)
>result_metadata() Returns result set metadata from a prepared statement (mysqli_stmt: mysqli_result)
mysqli_stmt_result_metadata(mysqli_stmt stmt) Returns result set metadata from a prepared statement (mysqli_result)
>send_long_data(int param_nr, string data) Send data in blocks (mysqli_stmt: bool)
mysqli_stmt_send_long_data(mysqli_stmt stmt, int param_nr, string data) Send data in blocks (bool)
mysqli_stmt_sqlstate(mysqli_stmt stmt) Returns SQLSTATE error from previous statement operation (string)
>sqlstate
>store_result() Transfers a result set from a prepared statement (mysqli_stmt: bool)
mysqli_stmt_store_result(mysqli_stmt stmt) Transfers a result set from a prepared statement (bool)
ncurses_addch(int ch) Add character at current position and advance cursor (int)
ncurses_addchnstr(string s, int n) Add attributed string with specified length at current position (int)
ncurses_addchstr(string s) Add attributed string at current position (int)
ncurses_addnstr(string s, int n) Add string with specified length at current position (int)
ncurses_addstr(string text) Output text at current position (int)
ncurses_assume_default_colors(int fg, int bg) Define default colors for color 0 (int)
ncurses_attroff(int attributes) Turn off the given attributes (int)
ncurses_attron(int attributes) Turn on the given attributes (int)
ncurses_attrset(int attributes) Set given attributes (int)
ncurses_baudrate() Returns baudrate of terminal (int)
ncurses_beep() Let the terminal beep (int)
ncurses_bkgd(int attrchar) Set background property for terminal screen (int)
ncurses_bkgdset(int attrchar) Control screen background (null)
ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner) Draw a border around the screen using attributed characters (int)
ncurses_bottom_panel(resource panel) Moves a visible panel to the bottom of the stack (int)
ncurses_can_change_color() Checks if terminal color definitions can be changed (bool)
ncurses_cbreak() Switch of input buffering (bool)
ncurses_clear() Clear screen (bool)
ncurses_clrtobot() Clear screen from current position to bottom (bool)
ncurses_clrtoeol() Clear screen from current position to end of line (bool)
ncurses_color_content(int color, int &r, int &g, int &b) Retrieves RGB components of a color (int)
ncurses_color_set(int pair) Set active foreground and background colors (int)
ncurses_curs_set(int visibility) Set cursor state (int)
ncurses_def_prog_mode() Saves terminals (program) mode (bool)
ncurses_def_shell_mode() Saves terminals (shell) mode (bool)
ncurses_define_key(string definition, int keycode) Define a keycode (int)
ncurses_del_panel(resource panel) Remove panel from the stack and delete it (but not the associated window) (bool)
ncurses_delay_output(int milliseconds) Delay output on terminal using padding characters (int)
ncurses_delch() Delete character at current position, move rest of line left (bool)
ncurses_deleteln() Delete line at current position, move rest of screen up (bool)
ncurses_delwin(resource window) Delete a ncurses window (bool)
ncurses_doupdate() Write all prepared refreshes to terminal (bool)
ncurses_echo() Activate keyboard input echo (bool)
ncurses_echochar(int character) Single character output including refresh (int)
ncurses_end() Stop using ncurses, clean up the screen (int)
ncurses_erase() Erase terminal screen (bool)
ncurses_erasechar() Returns current erase character (string)
ncurses_filter() Set LINES for iniscr() and newterm() to 1 (null)
ncurses_flash() Flash terminal screen (visual bell) (bool)
ncurses_flushinp() Flush keyboard input buffer (bool)
ncurses_getch() Read a character from keyboard (int)
ncurses_getmaxyx(resource window, int &y, int &x) Returns the size of a window (null)
ncurses_getmouse(array &mevent) Reads mouse event (bool)
ncurses_getyx(resource window, int &y, int &x) Returns the current cursor position for a window (null)
ncurses_halfdelay(int tenth) Put terminal into halfdelay mode (int)
ncurses_has_colors() Checks if terminal has color capabilities (bool)
ncurses_has_ic() Check for insert- and delete-capabilities (bool)
ncurses_has_il() Check for line insert- and delete-capabilities (bool)
ncurses_has_key(int keycode) Check for presence of a function key on terminal keyboard (int)
ncurses_hide_panel(resource panel) Remove panel from the stack, making it invisible (int)
ncurses_hline(int charattr, int n) Draw a horizontal line at current position using an attributed character and max. n characters long (int)
ncurses_inch() Get character and attribute at current position (string)
ncurses_init_color(int color, int r, int g, int b) Define a terminal color (int)
ncurses_init_pair(int pair, int fg, int bg) Define a color pair (int)
ncurses_init() Initialize ncurses (null)
ncurses_insch(int character) Insert character moving rest of line including character at current position (int)
ncurses_insdelln(int count) Insert lines before current line scrolling down (negative numbers delete and scroll up) (int)
ncurses_insertln() Insert a line, move rest of screen down (int)
ncurses_insstr(string text) Insert string at current position, moving rest of line right (int)
ncurses_instr(string &buffer) Reads string from terminal screen (int)
ncurses_isendwin() Ncurses is in endwin mode, normal screen output may be performed (bool)
ncurses_keyok(int keycode, bool enable) Enable or disable a keycode (int)
ncurses_keypad(resource window, bool bf) Turns keypad on or off (int)
ncurses_killchar() Returns current line kill character (string)
ncurses_longname() Returns terminals description (string)
ncurses_meta(resource window, bool 8bit) Enables/Disable 8-bit meta key information (int)
ncurses_mouse_trafo(int &y, int &x, bool toscreen) Transforms coordinates (bool)
ncurses_mouseinterval(int milliseconds) Set timeout for mouse button clicks (int)
ncurses_mousemask(int newmask, int &oldmask) Sets mouse options (int)
ncurses_move_panel(resource panel, int startx, int starty) Moves a panel so that its upper-left corner is at [startx, starty] (int)
ncurses_move(int y, int x) Move output position (int)
ncurses_mvaddch(int y, int x, int c) Move current position and add character (int)
ncurses_mvaddchnstr(int y, int x, string s, int n) Move position and add attributed string with specified length (int)
ncurses_mvaddchstr(int y, int x, string s) Move position and add attributed string (int)
ncurses_mvaddnstr(int y, int x, string s, int n) Move position and add string with specified length (int)
ncurses_mvaddstr(int y, int x, string s) Move position and add string (int)
ncurses_mvcur(int old_y, int old_x, int new_y, int new_x) Move cursor immediately (int)
ncurses_mvdelch(int y, int x) Move position and delete character, shift rest of line left (int)
ncurses_mvgetch(int y, int x) Move position and get character at new position (int)
ncurses_mvhline(int y, int x, int attrchar, int n) Set new position and draw a horizontal line using an attributed character and max. n characters long (int)
ncurses_mvinch(int y, int x) Move position and get attributed character at new position (int)
ncurses_mvvline(int y, int x, int attrchar, int n) Set new position and draw a vertical line using an attributed character and max. n characters long (int)
ncurses_mvwaddstr(resource window, int y, int x, string text) Add string at new position in window (int)
ncurses_napms(int milliseconds) Sleep (int)
ncurses_new_panel(resource window) Create a new panel and associate it with window (resource)
ncurses_newpad(int rows, int cols) Creates a new pad (window) (resource)
ncurses_newwin(int rows, int cols, int y, int x) Create a new window (resource)
ncurses_nl() Translate newline and carriage return / line feed (bool)
ncurses_nocbreak() Switch terminal to cooked mode (bool)
ncurses_noecho() Switch off keyboard input echo (bool)
ncurses_nonl() Do not translate newline and carriage return / line feed (bool)
ncurses_noqiflush() Do not flush on signal characters (null)
ncurses_noraw() Switch terminal out of raw mode (bool)
ncurses_pair_content(int pair, int &f, int &b) Retrieves foreground and background colors of a color pair (int)
ncurses_panel_above(resource panel) Returns the panel above panel (resource)
ncurses_panel_below(resource panel) Returns the panel below panel (resource)
ncurses_panel_window(resource panel) Returns the window associated with panel (resource)
ncurses_pnoutrefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol) Copies a region from a pad into the virtual screen (int)
ncurses_prefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol) Copies a region from a pad into the virtual screen (int)
ncurses_putp(string text) Apply padding information to the string and output it (int)
ncurses_qiflush() Flush on signal characters (null)
ncurses_raw() Switch terminal into raw mode (bool)
ncurses_refresh(int ch) Refresh screen (int)
ncurses_replace_panel(resource panel, resource window) Replaces the window associated with panel (int)
ncurses_reset_prog_mode() Resets the prog mode saved by def_prog_mode (int)
ncurses_reset_shell_mode() Resets the shell mode saved by def_shell_mode (int)
ncurses_resetty() Restores saved terminal state (bool)
ncurses_savetty() Saves terminal state (bool)
ncurses_scr_dump(string filename) Dump screen content to file (int)
ncurses_scr_init(string filename) Initialize screen from file dump (int)
ncurses_scr_restore(string filename) Restore screen from file dump (int)
ncurses_scr_set(string filename) Inherit screen from file dump (int)
ncurses_scrl(int count) Scroll window content up or down without changing current position (int)
ncurses_show_panel(resource panel) Places an invisible panel on top of the stack, making it visible (int)
ncurses_slk_attr() Returns current soft label key attribute (int)
ncurses_slk_attroff(int intarg) Turn off the given attributes for soft function-key labels (int)
ncurses_slk_attron(int intarg) Turn on the given attributes for soft function-key labels (int)
ncurses_slk_attrset(int intarg) Set given attributes for soft function-key labels (int)
ncurses_slk_clear() Clears soft labels from screen (bool)
ncurses_slk_color(int intarg) Sets color for soft label keys (int)
ncurses_slk_init(int format) Initializes soft label key functions (bool)
ncurses_slk_noutrefresh() Copies soft label keys to virtual screen (bool)
ncurses_slk_refresh() Copies soft label keys to screen (int)
ncurses_slk_restore() Restores soft label keys (int)
ncurses_slk_set(int labelnr, string label, int format) Sets function key labels (bool)
ncurses_slk_touch() Forces output when ncurses_slk_noutrefresh is performed (int)
ncurses_standend() Stop using 'standout' attribute (int)
ncurses_standout() Start using 'standout' attribute (int)
ncurses_start_color() Initializes color functionality (int)
ncurses_termattrs() Returns a logical OR of all attribute flags supported by terminal (bool)
ncurses_termname() Returns terminals (short)-name (string)
ncurses_timeout(int millisec) Set timeout for special key sequences (null)
ncurses_top_panel(resource panel) Moves a visible panel to the top of the stack (int)
ncurses_typeahead(int fd) Specify different filedescriptor for typeahead checking (int)
ncurses_ungetch(int keycode) Put a character back into the input stream (int)
ncurses_ungetmouse(array mevent) Pushes mouse event to queue (bool)
ncurses_update_panels() Refreshes the virtual screen to reflect the relations between panels in the stack (null)
ncurses_use_default_colors() Assign terminal default colors to color id -1 (bool)
ncurses_use_env(bool flag) Control use of environment information about terminal size (null)
ncurses_use_extended_names(bool flag) Control use of extended names in terminfo descriptions (int)
ncurses_vidattr(int intarg) Display the string on the terminal in the video attribute mode (int)
ncurses_vline(int charattr, int n) Draw a vertical line at current position using an attributed character and max. n characters long (int)
ncurses_waddch(resource window, int ch) Adds character at current position in a window and advance cursor (int)
ncurses_waddstr(resource window, string str, [int n]) Outputs text at current postion in window (int)
ncurses_wattroff(resource window, int attrs) Turns off attributes for a window (int)
ncurses_wattron(resource window, int attrs) Turns on attributes for a window (int)
ncurses_wattrset(resource window, int attrs) Set the attributes for a window (int)
ncurses_wborder(resource window, int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner) Draws a border around the window using attributed characters (int)
ncurses_wclear(resource window) Clears window (int)
ncurses_wcolor_set(resource window, int color_pair) Sets windows color pairings (int)
ncurses_werase(resource window) Erase window contents (int)
ncurses_wgetch(resource window) Reads a character from keyboard (window) (int)
ncurses_whline(resource window, int charattr, int n) Draws a horizontal line in a window at current position using an attributed character and max. n characters long (int)
ncurses_wmouse_trafo(resource window, int &y, int &x, bool toscreen) Transforms window/stdscr coordinates (bool)
ncurses_wmove(resource window, int y, int x) Moves windows output position (int)
ncurses_wnoutrefresh(resource window) Copies window to virtual screen (int)
ncurses_wrefresh(resource window) Refresh window on terminal screen (int)
ncurses_wstandend(resource window) End standout mode for a window (int)
ncurses_wstandout(resource window) Enter standout mode for a window (int)
ncurses_wvline(resource window, int charattr, int n) Draws a vertical line in a window at current position using an attributed character and max. n characters long (int)
gopher_parsedir(string dirent) Translate a gopher formatted directory entry into an associative array. (array)
checkdnsrr(string host, [string type]) Check DNS records corresponding to a given Internet host name or IP address (bool)
closelog() Close connection to system logger (bool)
define_syslog_variables() Initializes all syslog related variables (null)
dns_check_record() Alias of checkdnsrr
dns_get_mx() Alias of getmxrr
dns_get_record(string hostname, [int type, [array &authns, [array &addtl]]]) Fetch DNS Resource Records associated with a hostname (array)
fsockopen(string hostname, [int port, [int &errno, [string &errstr, [float timeout]]]]) Open Internet or Unix domain socket connection (resource)
gethostbyaddr(string ip_address) Get the Internet host name corresponding to a given IP address (string)
gethostbyname(string hostname) Get the IPv4 address corresponding to a given Internet host name (string)
gethostbynamel(string hostname) Get a list of IPv4 addresses corresponding to a given Internet host name (array)
gethostname() Gets the host name (string)
getmxrr(string hostname, array &mxhosts, [array &weight]) Get MX records corresponding to a given Internet host name (bool)
getprotobyname(string name) Get protocol number associated with protocol name (int)
getprotobynumber(int number) Get protocol name associated with protocol number (string)
getservbyname(string service, string protocol) Get port number associated with an Internet service and protocol (int)
getservbyport(int port, string protocol) Get Internet service which corresponds to port and protocol (string)
header_remove([string name]) Remove previously set headers (null)
header(string string, [bool replace, [int http_response_code]]) Send a raw HTTP header (null)
headers_list() Returns a list of response headers sent (or ready to send) (array)
headers_sent([string &file, [int &line]]) Checks if or where headers have been sent (bool)
inet_ntop(string in_addr) Converts a packed internet address to a human readable representation (string)
inet_pton(string address) Converts a human readable IP address to its packed in_addr representation (string)
ip2long(string ip_address) Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address (int)
long2ip(string proper_address) Converts an (IPv4) Internet network address into a string in Internet standard dotted format (string)
openlog(string ident, int option, int facility) Open connection to system logger (bool)
pfsockopen(string hostname, [int port, [int &errno, [string &errstr, [float timeout]]]]) Open persistent Internet or Unix domain socket connection (resource)
setcookie(string name, [string value, [int expire, [string path, [string domain, [bool secure, [bool httponly]]]]]]) Send a cookie (bool)
setrawcookie(string name, [string value, [int expire, [string path, [string domain, [bool secure, [bool httponly]]]]]]) Send a cookie without urlencoding the cookie value (bool)
socket_get_status() Alias of stream_get_meta_data
socket_set_blocking() Alias of stream_set_blocking
socket_set_timeout() Alias of stream_set_timeout
syslog(int priority, string message) Generate a system log message (bool)
newt_bell() Send a beep to the terminal (null)
newt_button_bar(array &buttons) This function returns a grid containing the buttons created. (resource)
newt_button(int left, int top, string text) Create a new button (resource)
newt_centered_window(int width, int height, [string title]) Open a centered window of the specified size (int)
newt_checkbox_get_value(resource checkbox) Retreives value of checkox resource (string)
newt_checkbox_set_flags(resource checkbox, int flags, int sense) Configures checkbox resource (null)
newt_checkbox_set_value(resource checkbox, string value) Sets the value of the checkbox (null)
newt_checkbox_tree_add_item(resource checkboxtree, string text, mixed data, int flags, int index, [int ...]) Adds new item to the checkbox tree (null)
newt_checkbox_tree_find_item(resource checkboxtree, mixed data) Finds an item in the checkbox tree (array)
newt_checkbox_tree_get_current(resource checkboxtree) Returns checkbox tree selected item (mixed)
newt_checkbox_tree_get_entry_value(resource checkboxtree, mixed data)  (string)
newt_checkbox_tree_get_multi_selection(resource checkboxtree, string seqnum)  (array)
newt_checkbox_tree_get_selection(resource checkboxtree)  (array)
newt_checkbox_tree_multi(int left, int top, int height, string seq, [int flags])  (resource)
newt_checkbox_tree_set_current(resource checkboxtree, mixed data)  (null)
newt_checkbox_tree_set_entry_value(resource checkboxtree, mixed data, string value)  (null)
newt_checkbox_tree_set_entry(resource checkboxtree, mixed data, string text)  (null)
newt_checkbox_tree_set_width(resource checkbox_tree, int width)  (null)
newt_checkbox_tree(int left, int top, int height, [int flags])  (resource)
newt_checkbox(int left, int top, string text, string def_value, [string seq])  (resource)
newt_clear_key_buffer() Discards the contents of the terminal's input buffer without waiting for additional input (null)
newt_cls()  (null)
newt_compact_button(int left, int top, string text)  (resource)
newt_component_add_callback(resource component, mixed func_name, mixed data)  (null)
newt_component_takes_focus(resource component, bool takes_focus)  (null)
newt_create_grid(int cols, int rows)  (resource)
newt_cursor_off()  (null)
newt_cursor_on()  (null)
newt_delay(int microseconds)  (null)
newt_draw_form(resource form)  (null)
newt_draw_root_text(int left, int top, string text) Displays the string text at the position indicated (null)
newt_entry_get_value(resource entry)  (string)
newt_entry_set_filter(resource entry, callback filter, mixed data)  (null)
newt_entry_set_flags(resource entry, int flags, int sense)  (null)
newt_entry_set(resource entry, string value, [bool cursor_at_end])  (null)
newt_entry(int left, int top, int width, [string init_value, [int flags]])  (resource)
newt_finished() Uninitializes newt interface (int)
newt_form_add_component(resource form, resource component) Adds a single component to the form (null)
newt_form_add_components(resource form, array components) Add several components to the form (null)
newt_form_add_hot_key(resource form, int key)  (null)
newt_form_destroy(resource form) Destroys a form (null)
newt_form_get_current(resource form)  (resource)
newt_form_run(resource form, array &exit_struct) Runs a form (null)
newt_form_set_background(resource from, int background)  (null)
newt_form_set_height(resource form, int height)  (null)
newt_form_set_size(resource form)  (null)
newt_form_set_timer(resource form, int milliseconds)  (null)
newt_form_set_width(resource form, int width)  (null)
newt_form_watch_fd(resource form, resource stream, [int flags])  (null)
newt_form([resource vert_bar, [string help, [int flags]]]) Create a form (resource)
newt_get_screen_size(int &cols, int &rows) Fills in the passed references with the current size of the terminal (null)
newt_grid_add_components_to_form(resource grid, resource form, bool recurse)  (null)
newt_grid_basic_window(resource text, resource middle, resource buttons)  (resource)
newt_grid_free(resource grid, bool recurse)  (null)
newt_grid_get_size(resouce grid, int &width, int &height)  (null)
newt_grid_h_close_stacked(int element1_type, resource element1, [int ..., [resource ...]])  (resource)
newt_grid_h_stacked(int element1_type, resource element1, [int ..., [resource ...]])  (resource)
newt_grid_place(resource grid, int left, int top)  (null)
newt_grid_set_field(resource grid, int col, int row, int type, resource val, int pad_left, int pad_top, int pad_right, int pad_bottom, int anchor, [int flags])  (null)
newt_grid_simple_window(resource text, resource middle, resource buttons)  (resource)
newt_grid_v_close_stacked(int element1_type, resource element1, [int ..., [resource ...]])  (resource)
newt_grid_v_stacked(int element1_type, resource element1, [int ..., [resource ...]])  (resource)
newt_grid_wrapped_window_at(resource grid, string title, int left, int top)  (null)
newt_grid_wrapped_window(resource grid, string title)  (null)
newt_init() Initialize newt (int)
newt_label_set_text(resource label, string text)  (null)
newt_label(int left, int top, string text)  (resource)
newt_listbox_append_entry(resource listbox, string text, mixed data)  (null)
newt_listbox_clear_selection(resource listbox)  (null)
newt_listbox_clear(resource listobx)  (null)
newt_listbox_delete_entry(resource listbox, mixed key)  (null)
newt_listbox_get_current(resource listbox)  (string)
newt_listbox_get_selection(resource listbox)  (array)
newt_listbox_insert_entry(resource listbox, string text, mixed data, mixed key)  (null)
newt_listbox_item_count(resource listbox)  (int)
newt_listbox_select_item(resource listbox, mixed key, int sense)  (null)
newt_listbox_set_current_by_key(resource listbox, mixed key)  (null)
newt_listbox_set_current(resource listbox, int num)  (null)
newt_listbox_set_data(resource listbox, int num, mixed data)  (null)
newt_listbox_set_entry(resource listbox, int num, string text)  (null)
newt_listbox_set_width(resource listbox, int width)  (null)
newt_listbox(int left, int top, int height, [int flags])  (resource)
newt_listitem_get_data(resource item)  (mixed)
newt_listitem_set(resource item, string text)  (null)
newt_listitem(int left, int top, string text, bool is_default, resouce prev_item, mixed data, [int flags])  (resource)
newt_open_window(int left, int top, int width, int height, [string title]) Open a window of the specified size and position (int)
newt_pop_help_line() Replaces the current help line with the one from the stack (null)
newt_pop_window() Removes the top window from the display (null)
newt_push_help_line([string text]) Saves the current help line on a stack, and displays the new line (null)
newt_radio_get_current(resource set_member)  (resource)
newt_radiobutton(int left, int top, string text, bool is_default, [resource prev_button])  (resource)
newt_redraw_help_line()  (null)
newt_reflow_text(string text, int width, int flex_down, int flex_up, int &actual_width, int &actual_height)  (string)
newt_refresh() Updates modified portions of the screen (null)
newt_resize_screen([bool redraw])  (null)
newt_resume() Resume using the newt interface after calling newt_suspend (null)
newt_run_form(resource form) Runs a form (resource)
newt_scale_set(resource scale, int amount)  (null)
newt_scale(int left, int top, int width, int full_value)  (resource)
newt_scrollbar_set(resource scrollbar, int where, int total)  (null)
newt_set_help_callback(mixed function)  (null)
newt_set_suspend_callback(callback function, mixed data) Set a callback function which gets invoked when user presses the suspend key (null)
newt_suspend() Tells newt to return the terminal to its initial state (null)
newt_textbox_get_num_lines(resource textbox)  (int)
newt_textbox_reflowed(int left, int top, char *text, int width, int flex_down, int flex_up, [int flags])  (resource)
newt_textbox_set_height(resource textbox, int height)  (null)
newt_textbox_set_text(resource textbox, string text)  (null)
newt_textbox(int left, int top, int width, int height, [int flags])  (resource)
newt_vertical_scrollbar(int left, int top, int height, [int normal_colorset, [int thumb_colorset]])  (resource)
newt_wait_for_key() Doesn't return until a key has been pressed (null)
newt_win_choice(string title, string button1_text, string button2_text, string format, [mixed args, [mixed ...]])  (int)
newt_win_entries(string title, string text, int suggested_width, int flex_down, int flex_up, int data_width, array &items, string button1, [string ...])  (int)
newt_win_menu(string title, string text, int suggestedWidth, int flexDown, int flexUp, int maxListHeight, array items, int &listItem, [string button1, [string ...]])  (int)
newt_win_message(string title, string button_text, string format, [mixed args, [mixed ...]])  (null)
newt_win_messagev(string title, string button_text, string format, array args)  (null)
newt_win_ternary(string title, string button1_text, string button2_text, string button3_text, string format, [mixed args, [mixed ...]])  (int)
yp_all(string domain, string map, string callback) Traverse the map and call a function on each entry (null)
yp_cat(string domain, string map) Return an array containing the entire map (array)
yp_err_string(int errorcode) Returns the error string associated with the given error code (string)
yp_errno() Returns the error code of the previous operation (int)
yp_first(string domain, string map) Returns the first key-value pair from the named map (array)
yp_get_default_domain() Fetches the machine's default NIS domain (string)
yp_master(string domain, string map) Returns the machine name of the master NIS server for a map (string)
yp_match(string domain, string map, string key) Returns the matched line (string)
yp_next(string domain, string map, string key) Returns the next key-value pair in the named map (array)
yp_order(string domain, string map) Returns the order number for a map (int)
notes_body(string server, string mailbox, int msg_number) Open the message msg_number in the specified mailbox on the specified server (leave serv (array)
notes_copy_db(string from_database_name, string to_database_name) Copy a Lotus Notes database (bool)
notes_create_db(string database_name) Create a Lotus Notes database (bool)
notes_create_note(string database_name, string form_name) Create a note using form form_name (bool)
notes_drop_db(string database_name) Drop a Lotus Notes database (bool)
notes_find_note(string database_name, string name, [string type]) Returns a note id found in database_name (int)
notes_header_info(string server, string mailbox, int msg_number) Open the message msg_number in the specified mailbox on the specified server (leave serv (object)
notes_list_msgs(string db) Returns the notes from a selected database_name (bool)
notes_mark_read(string database_name, string user_name, string note_id) Mark a note_id as read for the User user_name (bool)
notes_mark_unread(string database_name, string user_name, string note_id) Mark a note_id as unread for the User user_name (bool)
notes_nav_create(string database_name, string name) Create a navigator name, in database_name (bool)
notes_search(string database_name, string keywords) Find notes that match keywords in database_name (array)
notes_unread(string database_name, string user_name) Returns the unread note id's for the current User user_name (array)
notes_version(string database_name) Get the version Lotus Notes (float)
nsapi_request_headers() Fetch all HTTP request headers (array)
nsapi_response_headers() Fetch all HTTP response headers (array)
nsapi_virtual(string uri) Perform an NSAPI sub-request (bool)
oauth_get_sbs(string http_method, string uri, array request_parameters) Generate a Signature Base String (string)
oauth_urlencode(string uri) Encode a URI to RFC3686 (string)
OAuth(string consumer_key, string consumer_secret, [string signature_method, [string auth_type]]) Create a new OAuth object (new)
>disableDebug() Turn off verbose debugging (OAuth: bool)
>disableSSLChecks() Turn off SSL checks (OAuth: bool)
>enableDebug() Turn on verbose debugging (OAuth: bool)
>enableSSLChecks() Turn on SSL checks (OAuth: bool)
>fetch(string protected_resource_url, [array extra_parameters, [int http_method, [array http_headers]]]) Fetch an OAuth protected resource (OAuth: bool)
>getAccessToken(string access_token_url, [string auth_session_handle, [string verifier_token]]) The getAccessToken purpose (OAuth: array)
>getLastResponse() Get the last response (OAuth: string)
>getLastResponseInfo() Get HTTP information about the last response (OAuth: array)
>getRequestToken(string request_token_url, string callback_url) Fetch a request token (OAuth: array)
>setAuthType(string auth_type) The setAuthType purpose (OAuth: bool)
>setNonce(string nonce) Set the nonce for subsequent requests (OAuth: bool)
>setToken(string token, string token_secret) Sets the token and secret (OAuth: bool)
>setVersion(string version) Set the OAuth version (OAuth: bool)
aggregate_info(object object) Gets aggregation information for a given object (array)
aggregate_methods_by_list(object object, string class_name, array methods_list, [bool exclude]) Selective dynamic class methods aggregation to an object (null)
aggregate_methods_by_regexp(object object, string class_name, string regexp, [bool exclude]) Selective class methods aggregation to an object using a regular expression (null)
aggregate_methods(object object, string class_name) Dynamic class and object aggregation of methods (null)
aggregate_properties_by_list(object object, string class_name, array properties_list, [bool exclude]) Selective dynamic class properties aggregation to an object (null)
aggregate_properties_by_regexp(object object, string class_name, string regexp, [bool exclude]) Selective class properties aggregation to an object using a regular expression (null)
aggregate_properties(object object, string class_name) Dynamic aggregation of class properties to an object (null)
aggregate(object object, string class_name) Dynamic class and object aggregation of methods and properties (null)
aggregation_info() Alias of aggregate_info
deaggregate(object object, [string class_name]) Removes the aggregated methods and properties from an object (null)
oci_bind_array_by_name(resource statement, string name, array &var_array, int max_table_length, [int max_item_length, [int type]]) Binds PHP array to Oracle PL/SQL array by name (bool)
oci_bind_by_name(resource statement, string ph_name, mixed &variable, [int maxlength, [int type]]) Binds the PHP variable to the Oracle placeholder (bool)
oci_cancel(resource statement) Cancels reading from cursor (bool)
oci_close(resource connection) Closes Oracle connection (bool)
>append(mixed value) Appends element to the collection (OCI-Collection: bool)
>assign(OCI-Collection from) Assigns a value to the collection from another existing collection (OCI-Collection: bool)
>assignElem(int index, mixed value) Assigns a value to the element of the collection (OCI-Collection: bool)
>free() Frees the resources associated with the collection object (OCI-Collection: bool)
>getElem(int index) Returns value of the element (OCI-Collection: mixed)
>max() Returns the maximum number of elements in the collection (OCI-Collection: int)
>size() Returns size of the collection (OCI-Collection: int)
>trim(int num) Trims elements from the end of the collection (OCI-Collection: bool)
oci_commit(resource connection) Commits outstanding statements (bool)
oci_connect(string username, string password, [string db, [string charset, [int session_mode]]]) Establishes a connection to the Oracle server (resource)
oci_define_by_name(resource statement, string column_name, mixed &variable, [int type]) Uses a PHP variable for the define-step during a SELECT (bool)
oci_error([resource source]) Returns the last error found (array)
oci_execute(resource statement, [int mode]) Executes a statement (bool)
oci_fetch_all(resource statement, array &output, [int skip, [int maxrows, [int flags]]]) Fetches all rows of result data into an array (int)
oci_fetch_array(resource statement, [int mode]) Returns the next row from the result data as an associative or numeric array, or both (array)
oci_fetch_assoc(resource statement) Returns the next row from the result data as an associative array (array)
oci_fetch_object(resource statement) Returns the next row from the result data as an object (object)
oci_fetch_row(resource statement) Returns the next row from the result data as a numeric array (array)
oci_fetch(resource statement) Fetches the next row into result-buffer (bool)
oci_field_is_null(resource statement, mixed field) Checks if the field is NULL (bool)
oci_field_name(resource statement, int field) Returns the name of a field from the statement (string)
oci_field_precision(resource statement, int field) Tell the precision of a field (int)
oci_field_scale(resource statement, int field) Tell the scale of the field (int)
oci_field_size(resource statement, mixed field) Returns field's size (int)
oci_field_type_raw(resource statement, int field) Tell the raw Oracle data type of the field (int)
oci_field_type(resource statement, int field) Returns field's data type (mixed)
oci_free_statement(resource statement) Frees all resources associated with statement or cursor (bool)
oci_internal_debug(bool onoff) Enables or disables internal debug output (null)
>append(OCI-Lob lob_from) Appends data from the large object to another large object (OCI-Lob: bool)
>close() Closes LOB descriptor (OCI-Lob: bool)
oci_lob_copy(OCI-Lob lob_to, OCI-Lob lob_from, [int length]) Copies large object (bool)
>eof() Tests for end-of-file on a large object's descriptor (OCI-Lob: bool)
>erase([int offset, [int length]]) Erases a specified portion of the internal LOB data (OCI-Lob: int)
>export(string filename, [int start, [int length]]) Exports LOB's contents to a file (OCI-Lob: bool)
>flush([int flag]) Flushes/writes buffer of the LOB to the server (OCI-Lob: bool)
>free() Frees resources associated with the LOB descriptor (OCI-Lob: bool)
>getBuffering() Returns current state of buffering for the large object (OCI-Lob: bool)
>import(string filename) Imports file data to the LOB (OCI-Lob: bool)
oci_lob_is_equal(OCI-Lob lob1, OCI-Lob lob2) Compares two LOB/FILE locators for equality (bool)
>load() Returns large object's contents (OCI-Lob: string)
>read(int length) Reads part of the large object (OCI-Lob: string)
>rewind() Moves the internal pointer to the beginning of the large object (OCI-Lob: bool)
>save(string data, [int offset]) Saves data to the large object (OCI-Lob: bool)
OCI-Lob->saveFile() Alias of oci_lob_import
>seek(int offset, [int whence]) Sets the internal pointer of the large object (OCI-Lob: bool)
>setBuffering(bool on_off) Changes current state of buffering for the large object (OCI-Lob: bool)
>size() Returns size of large object (OCI-Lob: int)
>tell() Returns current position of internal pointer of large object (OCI-Lob: int)
>truncate([int length]) Truncates large object (OCI-Lob: bool)
>write(string data, [int length]) Writes data to the large object (OCI-Lob: int)
>writeTemporary(string data, [int lob_type]) Writes temporary large object (OCI-Lob: bool)
OCI-Lob->writeToFile() Alias of oci_lob_export
oci_new_collection(resource connection, string tdo, [string schema]) Allocates new collection object (OCI-Collection)
oci_new_connect(string username, string password, [string db, [string charset, [int session_mode]]]) Establishes a new connection to the Oracle server (resource)
oci_new_cursor(resource connection) Allocates and returns a new cursor (statement handle) (resource)
oci_new_descriptor(resource connection, [int type]) Initializes a new empty LOB or FILE descriptor (OCI-Lob)
oci_num_fields(resource statement) Returns the number of result columns in a statement (int)
oci_num_rows(resource statement) Returns number of rows affected during statement execution (int)
oci_parse(resource connection, string query) Prepares Oracle statement for execution (resource)
oci_password_change(resource connection, string username, string old_password, string new_password) Changes password of Oracle's user (bool)
oci_password_change(string dbname, string username, string old_password, string new_password) Changes password of Oracle's user (resource)
oci_pconnect(string username, string password, [string db, [string charset, [int session_mode]]]) Connect to an Oracle database using a persistent connection (resource)
oci_result(resource statement, mixed field) Returns field's value from the fetched row (mixed)
oci_rollback(resource connection) Rolls back outstanding transaction (bool)
oci_server_version(resource connection) Returns server version (string)
oci_set_prefetch(resource statement, int rows) Sets number of rows to be prefetched (bool)
oci_statement_type(resource statement) Returns the type of an OCI statement (string)
ocibindbyname() Alias of oci_bind_by_name
ocicancel() Alias of oci_cancel
ocicloselob() Alias of
ocicollappend() Alias of
ocicollassign() Alias of
ocicollassignelem() Alias of
ocicollgetelem() Alias of
ocicollmax() Alias of
ocicollsize() Alias of
ocicolltrim() Alias of
ocicolumnisnull() Alias of oci_field_is_null
ocicolumnname() Alias of oci_field_name
ocicolumnprecision() Alias of oci_field_precision
ocicolumnscale() Alias of oci_field_scale
ocicolumnsize() Alias of oci_field_size
ocicolumntype() Alias of oci_field_type
ocicolumntyperaw() Alias of oci_field_type_raw
ocicommit() Alias of oci_commit
ocidefinebyname() Alias of oci_define_by_name
ocierror() Alias of oci_error
ociexecute() Alias of oci_execute
ocifetch() Alias of oci_fetch
ocifetchinto(resource statement, array &result, [int mode]) Fetches the next row into an array (deprecated) (int)
ocifetchstatement() Alias of oci_fetch_all
ocifreecollection() Alias of
ocifreecursor() Alias of oci_free_statement
ocifreedesc() Alias of
ocifreestatement() Alias of oci_free_statement
ociinternaldebug() Alias of oci_internal_debug
ociloadlob() Alias of
ocilogoff() Alias of oci_close
ocilogon() Alias of oci_connect
ocinewcollection() Alias of oci_new_collection
ocinewcursor() Alias of oci_new_cursor
ocinewdescriptor() Alias of oci_new_descriptor
ocinlogon() Alias of oci_new_connect
ocinumcols() Alias of oci_num_fields
ociparse() Alias of oci_parse
ociplogon() Alias of oci_pconnect
ociresult() Alias of oci_result
ocirollback() Alias of oci_rollback
ocirowcount() Alias of oci_num_rows
ocisavelob() Alias of
ocisavelobfile() Alias of
ociserverversion() Alias of oci_server_version
ocisetprefetch() Alias of oci_set_prefetch
ocistatementtype() Alias of oci_statement_type
ociwritelobtofile() Alias of
ociwritetemporarylob() Alias of
openal_buffer_create() Generate OpenAL buffer (resource)
openal_buffer_data(resource buffer, int format, string data, int freq) Load a buffer with data (bool)
openal_buffer_destroy(resource buffer) Destroys an OpenAL buffer (bool)
openal_buffer_get(resource buffer, int property) Retrieve an OpenAL buffer property (int)
openal_buffer_loadwav(resource buffer, string wavfile) Load a .wav file into a buffer (bool)
openal_context_create(resource device) Create an audio processing context (resource)
openal_context_current(resource context) Make the specified context current (bool)
openal_context_destroy(resource context) Destroys a context (bool)
openal_context_process(resource context) Process the specified context (bool)
openal_context_suspend(resource context) Suspend the specified context (bool)
openal_device_close(resource device) Close an OpenAL device (bool)
openal_device_open([string device_desc]) Initialize the OpenAL audio layer (resource)
openal_listener_get(int property) Retrieve a listener property (mixed)
openal_listener_set(int property, mixed setting) Set a listener property (bool)
openal_source_create() Generate a source resource (resource)
openal_source_destroy(resource source) Destroy a source resource (bool)
openal_source_get(resource source, int property) Retrieve an OpenAL source property (mixed)
openal_source_pause(resource source) Pause the source (bool)
openal_source_play(resource source) Start playing the source (bool)
openal_source_rewind(resource source) Rewind the source (bool)
openal_source_set(resource source, int property, mixed setting) Set source property (bool)
openal_source_stop(resource source) Stop playing the source (bool)
openal_stream(resource source, int format, int rate) Begin streaming on a source (resource)
openssl_csr_export_to_file(resource csr, string outfilename, [bool notext]) Exports a CSR to a file (bool)
openssl_csr_export(resource csr, string &out, [bool notext]) Exports a CSR as a string (bool)
openssl_csr_get_public_key(mixed csr, [bool use_shortnames]) Returns the public key of a CERT (resource)
openssl_csr_get_subject(mixed csr, [bool use_shortnames]) Returns the subject of a CERT (array)
openssl_csr_new(array dn, resource &privkey, [array configargs, [array extraattribs]]) Generates a CSR (mixed)
openssl_csr_sign(mixed csr, mixed cacert, mixed priv_key, int days, [array configargs, [int serial]]) Sign a CSR with another certificate (or itself) and generate a certificate (resource)
openssl_decrypt(string data, string method, string password, [string raw_input]) Decrypts data (string)
openssl_dh_compute_key(string pub_key, resource dh_key) Computes shared secret for public value of remote DH key and local DH key (string)
openssl_digest(string data, string method, [bool raw_output]) Computes a digest (string)
openssl_encrypt(string data, string method, string password, [bool raw_output]) Encrypts data (string)
openssl_error_string() Return openSSL error message (string)
openssl_free_key(resource key_identifier) Free key resource (null)
openssl_get_cipher_methods([bool aliases]) Gets available cipher methods (array)
openssl_get_md_methods([bool aliases]) Gets available digest methods (array)
openssl_get_privatekey() Alias of openssl_pkey_get_private
openssl_get_publickey() Alias of openssl_pkey_get_public
openssl_open(string sealed_data, string &open_data, string env_key, mixed priv_key_id) Open sealed data (bool)
openssl_pkcs12_export_to_file(mixed x509, string filename, mixed priv_key, string pass, [array args]) Exports a PKCS#12 Compatible Certificate Store File (bool)
openssl_pkcs12_export(mixed x509, string &out, mixed priv_key, string pass, [array args]) Exports a PKCS#12 Compatible Certificate Store File to variable. (bool)
openssl_pkcs12_read(string pkcs12, array &certs, string pass) Parse a PKCS#12 Certificate Store into an array (bool)
openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert, [mixed recipkey]) Decrypts an S/MIME encrypted message (bool)
openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers, [int flags, [int cipherid]]) Encrypt an S/MIME message (bool)
openssl_pkcs7_sign(string infilename, string outfilename, mixed signcert, mixed privkey, array headers, [int flags, [string extracerts]]) Sign an S/MIME message (bool)
openssl_pkcs7_verify(string filename, int flags, [string outfilename, [array cainfo, [string extracerts, [string content]]]]) Verifies the signature of an S/MIME signed message (mixed)
openssl_pkey_export_to_file(mixed key, string outfilename, [string passphrase, [array configargs]]) Gets an exportable representation of a key into a file (bool)
openssl_pkey_export(mixed key, string &out, [string passphrase, [array configargs]]) Gets an exportable representation of a key into a string (bool)
openssl_pkey_free(resource key) Frees a private key (null)
openssl_pkey_get_details(resource key) Returns an array with the key details (array)
openssl_pkey_get_private(mixed key, [string passphrase]) Get a private key (resource)
openssl_pkey_get_public(mixed certificate) Extract public key from certificate and prepare it for use (resource)
openssl_pkey_new([array configargs]) Generates a new private key (resource)
openssl_private_decrypt(string data, string &decrypted, mixed key, [int padding]) Decrypts data with private key (bool)
openssl_private_encrypt(string data, string &crypted, mixed key, [int padding]) Encrypts data with private key (bool)
openssl_public_decrypt(string data, string &decrypted, mixed key, [int padding]) Decrypts data with public key (bool)
openssl_public_encrypt(string data, string &crypted, mixed key, [int padding]) Encrypts data with public key (bool)
openssl_random_pseudo_bytes(string length, string strong) Generate a pseudo-random string (bool)
openssl_seal(string data, string &sealed_data, array &env_keys, array pub_key_ids) Seal (encrypt) data (int)
openssl_sign(string data, string &signature, mixed priv_key_id, [int signature_alg]) Generate signature (bool)
openssl_verify(string data, string signature, mixed pub_key_id, [int signature_alg]) Verify signature (int)
openssl_x509_check_private_key(mixed cert, mixed key) Checks if a private key corresponds to a certificate (bool)
openssl_x509_checkpurpose(mixed x509cert, int purpose, [array cainfo, [string untrustedfile]]) Verifies if a certificate can be used for a particular purpose (int)
openssl_x509_export_to_file(mixed x509, string outfilename, [bool notext]) Exports a certificate to file (bool)
openssl_x509_export(mixed x509, string &output, [bool notext]) Exports a certificate as a string (bool)
openssl_x509_free(resource x509cert) Free certificate resource (null)
openssl_x509_parse(mixed x509cert, [bool shortnames]) Parse an X509 certificate and return the information as an array (array)
openssl_x509_read(mixed x509certdata) Parse an X.509 certificate and return a resource identifier for it (resource)
flush() Flush the output buffer (null)
ob_clean() Clean (erase) the output buffer (null)
ob_end_clean() Clean (erase) the output buffer and turn off output buffering (bool)
ob_end_flush() Flush (send) the output buffer and turn off output buffering (bool)
ob_flush() Flush (send) the output buffer (null)
ob_get_clean() Get current buffer contents and delete current output buffer (string)
ob_get_contents() Return the contents of the output buffer (string)
ob_get_flush() Flush the output buffer, return it as a string and turn off output buffering (string)
ob_get_length() Return the length of the output buffer (int)
ob_get_level() Return the nesting level of the output buffering mechanism (int)
ob_get_status([bool full_status]) Get status of output buffers (array)
ob_gzhandler(string buffer, int mode) ob_start callback function to gzip output buffer (string)
ob_implicit_flush([int flag]) Turn implicit flush on/off (null)
ob_list_handlers() List all output handlers in use (array)
ob_start([callback output_callback, [int chunk_size, [bool erase]]]) Turn on output buffering (bool)
output_add_rewrite_var(string name, string value) Add URL rewriter values (bool)
output_reset_rewrite_vars() Reset URL rewriter values (bool)
overload(string class_name) Enable property and method call overloading for a class (null)
ovrimos_close(int connection) Closes the connection to ovrimos (null)
ovrimos_commit(int connection_id) Commits the transaction (bool)
ovrimos_connect(string host, string dborport, string user, string password) Connect to the specified database (int)
ovrimos_cursor(int result_id) Returns the name of the cursor (string)
ovrimos_exec(int connection_id, string query) Executes an SQL statement (int)
ovrimos_execute(int result_id, [array parameters_array]) Executes a prepared SQL statement (bool)
ovrimos_fetch_into(int result_id, array &result_array, [string how, [int rownumber]]) Fetches a row from the result set (bool)
ovrimos_fetch_row(int result_id, [int how, [int row_number]]) Fetches a row from the result set (bool)
ovrimos_field_len(int result_id, int field_number) Returns the length of the output column (int)
ovrimos_field_name(int result_id, int field_number) Returns the output column name (string)
ovrimos_field_num(int result_id, string field_name) Returns the (1-based) index of the output column (int)
ovrimos_field_type(int result_id, int field_number) Returns the type of the output column (int)
ovrimos_free_result(int result_id) Frees the specified result_id (bool)
ovrimos_longreadlen(int result_id, int length) Specifies how many bytes are to be retrieved from long datatypes (bool)
ovrimos_num_fields(int result_id) Returns the number of columns (int)
ovrimos_num_rows(int result_id) Returns the number of rows affected by update operations (int)
ovrimos_prepare(int connection_id, string query) Prepares an SQL statement (int)
ovrimos_result_all(int result_id, [string format]) Prints the whole result set as an HTML table (int)
ovrimos_result(int result_id, mixed field) Retrieves the output column (string)
ovrimos_rollback(int connection_id) Rolls back the transaction (bool)
px_close(resource pxdoc) Closes a paradox database (bool)
px_create_fp(resource pxdoc, resource file, array fielddesc) Create a new paradox database (bool)
px_date2string(resource pxdoc, int value, string format) Converts a date into a string. (string)
px_delete_record(resource pxdoc, int num) Deletes record from paradox database (bool)
px_delete(resource pxdoc) Deletes resource of paradox database (bool)
px_get_field(resource pxdoc, int fieldno) Returns the specification of a single field (array)
px_get_info(resource pxdoc) Return lots of information about a paradox file (array)
px_get_parameter(resource pxdoc, string name) Gets a parameter (string)
px_get_record(resource pxdoc, int num, [int mode]) Returns record of paradox database (array)
px_get_schema(resource pxdoc, [int mode]) Returns the database schema (array)
px_get_value(resource pxdoc, string name) Gets a value (float)
px_insert_record(resource pxdoc, array data) Inserts record into paradox database (int)
px_new() Create a new paradox object (resource)
px_numfields(resource pxdoc) Returns number of fields in a database (int)
px_numrecords(resource pxdoc) Returns number of records in a database (int)
px_open_fp(resource pxdoc, resource file) Open paradox database (bool)
px_put_record(resource pxdoc, array record, [int recpos]) Stores record into paradox database (bool)
px_retrieve_record(resource pxdoc, int num, [int mode]) Returns record of paradox database (array)
px_set_blob_file(resource pxdoc, string filename) Sets the file where blobs are read from (bool)
px_set_parameter(resource pxdoc, string name, string value) Sets a parameter (bool)
px_set_tablename(resource pxdoc, string name) Sets the name of a table (deprecated) (null)
px_set_targetencoding(resource pxdoc, string encoding) Sets the encoding for character fields (deprecated) (bool)
px_set_value(resource pxdoc, string name, float value) Sets a value (bool)
px_timestamp2string(resource pxdoc, float value, string format) Converts the timestamp into a string. (string)
px_update_record(resource pxdoc, array data, int num) Updates record in paradox database (bool)
parsekit_compile_file(string filename, [array &errors, [int options]]) Compile a string of PHP code and return the resulting op array (array)
parsekit_compile_string(string phpcode, [array &errors, [int options]]) Compile a string of PHP code and return the resulting op array (array)
parsekit_func_arginfo(mixed function) Return information regarding function argument(s) (array)
pcntl_alarm(int seconds) Set an alarm clock for delivery of a signal (int)
pcntl_exec(string path, [array args, [array envs]]) Executes specified program in current process space (null)
pcntl_fork() Forks the currently running process (int)
pcntl_getpriority([int pid, [int process_identifier]]) Get the priority of any process (int)
pcntl_setpriority(int priority, [int pid, [int process_identifier]]) Change the priority of any process (bool)
pcntl_signal_dispatch() Calls signal handlers for pending signals (bool)
pcntl_signal(int signo, callback handler, [bool restart_syscalls]) Installs a signal handler (bool)
pcntl_sigprocmask(int how, array set, [array &oldset]) Sets and retrieves blocked signals (bool)
pcntl_sigtimedwait(array set, [array &siginfo, [int seconds, [int nanoseconds]]]) Waits for signals, with a timeout (int)
pcntl_sigwaitinfo(array set, [array &siginfo]) Waits for signals (int)
pcntl_wait(int &status, [int options]) Waits on or returns the status of a forked child (int)
pcntl_waitpid(int pid, int &status, [int options]) Waits on or returns the status of a forked child (int)
pcntl_wexitstatus(int status) Returns the return code of a terminated child (int)
pcntl_wifexited(int status) Checks if status code represents a normal exit (bool)
pcntl_wifsignaled(int status) Checks whether the status code represents a termination due to a signal (bool)
pcntl_wifstopped(int status) Checks whether the child process is currently stopped (bool)
pcntl_wstopsig(int status) Returns the signal which caused the child to stop (int)
pcntl_wtermsig(int status) Returns the signal which caused the child to terminate (int)
preg_filter(mixed pattern, mixed replacement, mixed subject, [int limit, [int &count]]) Perform a regular expression search and replace (mixed)
preg_grep(string pattern, array input, [int flags]) Return array entries that match the pattern (array)
preg_last_error() Returns the error code of the last PCRE regex execution (int)
preg_match_all(string pattern, string subject, array &matches, [int flags, [int offset]]) Perform a global regular expression match (int)
preg_match(string pattern, string subject, [array &matches, [int flags, [int offset]]]) Perform a regular expression match (int)
preg_quote(string str, [string delimiter]) Quote regular expression characters (string)
preg_replace_callback(mixed pattern, callback callback, mixed subject, [int limit, [int &count]]) Perform a regular expression search and replace using a callback (mixed)
preg_replace(mixed pattern, mixed replacement, mixed subject, [int limit, [int &count]]) Perform a regular expression search and replace (mixed)
preg_split(string pattern, string subject, [int limit, [int flags]]) Split string by a regular expression (array)
PDF_activate_item(resource pdfdoc, int id) Activate structure element or other content item (bool)
PDF_add_annotation() Add annotation [deprecated]
PDF_add_bookmark() Add bookmark for current page [deprecated]
PDF_add_launchlink(resource pdfdoc, float llx, float lly, float urx, float ury, string filename) Add launch annotation for current page [deprecated] (bool)
PDF_add_locallink(resource pdfdoc, float lowerleftx, float lowerlefty, float upperrightx, float upperrighty, int page, string dest) Add link annotation for current page [deprecated] (bool)
PDF_add_nameddest(resource pdfdoc, string name, string optlist) Create named destination (bool)
PDF_add_note(resource pdfdoc, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open) Set annotation for current page [deprecated] (bool)
PDF_add_outline() Add bookmark for current page [deprecated]
PDF_add_pdflink(resource pdfdoc, float bottom_left_x, float bottom_left_y, float up_right_x, float up_right_y, string filename, int page, string dest) Add file link annotation for current page [deprecated] (bool)
PDF_add_table_cell(resource pdfdoc, int table, int column, int row, string text, string optlist) Add a cell to a new or existing table (int)
PDF_add_textflow(resource pdfdoc, int textflow, string text, string optlist) Create Textflow or add text to existing Textflow (int)
PDF_add_thumbnail(resource pdfdoc, int image) Add thumbnail for current page (bool)
PDF_add_weblink(resource pdfdoc, float lowerleftx, float lowerlefty, float upperrightx, float upperrighty, string url) Add weblink for current page [deprecated] (bool)
PDF_arc(resource p, float x, float y, float r, float alpha, float beta) Draw a counterclockwise circular arc segment (bool)
PDF_arcn(resource p, float x, float y, float r, float alpha, float beta) Draw a clockwise circular arc segment (bool)
PDF_attach_file(resource pdfdoc, float llx, float lly, float urx, float ury, string filename, string description, string author, string mimetype, string icon) Add file attachment for current page [deprecated] (bool)
PDF_begin_document(resource pdfdoc, string filename, string optlist) Create new PDF file (int)
PDF_begin_font(resource pdfdoc, string filename, float a, float b, float c, float d, float e, float f, string optlist) Start a Type 3 font definition (bool)
PDF_begin_glyph(resource pdfdoc, string glyphname, float wx, float llx, float lly, float urx, float ury) Start glyph definition for Type 3 font (bool)
PDF_begin_item(resource pdfdoc, string tag, string optlist) Open structure element or other content item (int)
PDF_begin_layer(resource pdfdoc, int layer) Start layer (bool)
PDF_begin_page_ext(resource pdfdoc, float width, float height, string optlist) Start new page (bool)
PDF_begin_page(resource pdfdoc, float width, float height) Start new page [deprecated] (bool)
PDF_begin_pattern(resource pdfdoc, float width, float height, float xstep, float ystep, int painttype) Start pattern definition (int)
PDF_begin_template_ext(resource pdfdoc, float width, float height, string optlist) Start template definition (int)
PDF_begin_template(resource pdfdoc, float width, float height) Start template definition [deprecated] (int)
PDF_circle(resource pdfdoc, float x, float y, float r) Draw a circle (bool)
PDF_clip(resource p) Clip to current path (bool)
PDF_close_image(resource p, int image) Close image (bool)
PDF_close_pdi_page(resource p, int page) Close the page handle (bool)
PDF_close_pdi(resource p, int doc) Close the input PDF document [deprecated] (bool)
PDF_close(resource p) Close pdf resource [deprecated] (bool)
PDF_closepath_fill_stroke(resource p) Close, fill and stroke current path (bool)
PDF_closepath_stroke(resource p) Close and stroke path (bool)
PDF_closepath(resource p) Close current path (bool)
PDF_concat(resource p, float a, float b, float c, float d, float e, float f) Concatenate a matrix to the CTM (bool)
PDF_continue_text(resource p, string text) Output text in next line (bool)
PDF_create_3dview(resource pdfdoc, string username, string optlist) Create 3D view (int)
PDF_create_action(resource pdfdoc, string type, string optlist) Create action for objects or events (int)
PDF_create_annotation(resource pdfdoc, float llx, float lly, float urx, float ury, string type, string optlist) Create rectangular annotation (bool)
PDF_create_bookmark(resource pdfdoc, string text, string optlist) Create bookmark (int)
PDF_create_field(resource pdfdoc, float llx, float lly, float urx, float ury, string name, string type, string optlist) Create form field (bool)
PDF_create_fieldgroup(resource pdfdoc, string name, string optlist) Create form field group (bool)
PDF_create_gstate(resource pdfdoc, string optlist) Create graphics state object (int)
PDF_create_pvf(resource pdfdoc, string filename, string data, string optlist) Create PDFlib virtual file (bool)
PDF_create_textflow(resource pdfdoc, string text, string optlist) Create textflow object (int)
PDF_curveto(resource p, float x1, float y1, float x2, float y2, float x3, float y3) Draw Bezier curve (bool)
PDF_define_layer(resource pdfdoc, string name, string optlist) Create layer definition (int)
PDF_delete_pvf(resource pdfdoc, string filename) Delete PDFlib virtual file (int)
PDF_delete_table(resource pdfdoc, int table, string optlist) Delete table object (bool)
PDF_delete_textflow(resource pdfdoc, int textflow) Delete textflow object (bool)
PDF_delete(resource pdfdoc) Delete PDFlib object (bool)
PDF_encoding_set_char(resource pdfdoc, string encoding, int slot, string glyphname, int uv) Add glyph name and/or Unicode value (bool)
PDF_end_document(resource pdfdoc, string optlist) Close PDF file (bool)
PDF_end_font(resource pdfdoc) Terminate Type 3 font definition (bool)
PDF_end_glyph(resource pdfdoc) Terminate glyph definition for Type 3 font (bool)
PDF_end_item(resource pdfdoc, int id) Close structure element or other content item (bool)
PDF_end_layer(resource pdfdoc) Deactivate all active layers (bool)
PDF_end_page_ext(resource pdfdoc, string optlist) Finish page (bool)
PDF_end_page(resource p) Finish page (bool)
PDF_end_pattern(resource p) Finish pattern (bool)
PDF_end_template(resource p) Finish template (bool)
PDF_endpath(resource p) End current path (bool)
PDF_fill_imageblock(resource pdfdoc, int page, string blockname, int image, string optlist) Fill image block with variable data (int)
PDF_fill_pdfblock(resource pdfdoc, int page, string blockname, int contents, string optlist) Fill PDF block with variable data (int)
PDF_fill_stroke(resource p) Fill and stroke path (bool)
PDF_fill_textblock(resource pdfdoc, int page, string blockname, string text, string optlist) Fill text block with variable data (int)
PDF_fill(resource p) Fill current path (bool)
PDF_findfont(resource p, string fontname, string encoding, int embed) Prepare font for later use [deprecated] (int)
PDF_fit_image(resource pdfdoc, int image, float x, float y, string optlist) Place image or template (bool)
PDF_fit_pdi_page(resource pdfdoc, int page, float x, float y, string optlist) Place imported PDF page (bool)
PDF_fit_table(resource pdfdoc, int table, float llx, float lly, float urx, float ury, string optlist) Place table on page (string)
PDF_fit_textflow(resource pdfdoc, int textflow, float llx, float lly, float urx, float ury, string optlist) Format textflow in rectangular area (string)
PDF_fit_textline(resource pdfdoc, string text, float x, float y, string optlist) Place single line of text (bool)
PDF_get_apiname(resource pdfdoc) Get name of unsuccessfull API function (string)
PDF_get_buffer(resource p) Get PDF output buffer (string)
PDF_get_errmsg(resource pdfdoc) Get error text (string)
PDF_get_errnum(resource pdfdoc) Get error number (int)
PDF_get_font() Get font [deprecated]
PDF_get_fontname() Get font name [deprecated]
PDF_get_fontsize() Font handling [deprecated]
PDF_get_image_height() Get image height [deprecated]
PDF_get_image_width() Get image width [deprecated]
PDF_get_majorversion() Get major version number [deprecated] (int)
PDF_get_minorversion() Get minor version number [deprecated] (int)
PDF_get_parameter(resource p, string key, float modifier) Get string parameter (string)
PDF_get_pdi_parameter(resource p, string key, int doc, int page, int reserved) Get PDI string parameter [deprecated] (string)
PDF_get_pdi_value(resource p, string key, int doc, int page, int reserved) Get PDI numerical parameter [deprecated] (float)
PDF_get_value(resource p, string key, float modifier) Get numerical parameter (float)
PDF_info_font(resource pdfdoc, int font, string keyword, string optlist) Query detailed information about a loaded font (float)
PDF_info_matchbox(resource pdfdoc, string boxname, int num, string keyword) Query matchbox information (float)
PDF_info_table(resource pdfdoc, int table, string keyword) Retrieve table information (float)
PDF_info_textflow(resource pdfdoc, int textflow, string keyword) Query textflow state (float)
PDF_info_textline(resource pdfdoc, string text, string keyword, string optlist) Perform textline formatting and query metrics (float)
PDF_initgraphics(resource p) Reset graphic state (bool)
PDF_lineto(resource p, float x, float y) Draw a line (bool)
PDF_load_3ddata(resource pdfdoc, string filename, string optlist) Load 3D model (int)
PDF_load_font(resource pdfdoc, string fontname, string encoding, string optlist) Search and prepare font (int)
PDF_load_iccprofile(resource pdfdoc, string profilename, string optlist) Search and prepare ICC profile (int)
PDF_load_image(resource pdfdoc, string imagetype, string filename, string optlist) Open image file (int)
PDF_makespotcolor(resource p, string spotname) Make spot color (int)
PDF_moveto(resource p, float x, float y) Set current point (bool)
PDF_new() Create PDFlib object (resource)
PDF_open_ccitt(resource pdfdoc, string filename, int width, int height, int BitReverse, int k, int Blackls1) Open raw CCITT image [deprecated] (int)
PDF_open_file(resource p, string filename) Create PDF file [deprecated] (bool)
PDF_open_gif() Open GIF image [deprecated]
PDF_open_image_file(resource p, string imagetype, string filename, string stringparam, int intparam) Read image from file [deprecated] (int)
PDF_open_image(resource p, string imagetype, string source, string data, int length, int width, int height, int components, int bpc, string params) Use image data [deprecated] (int)
PDF_open_jpeg() Open JPEG image [deprecated]
PDF_open_memory_image(resource p, resource image) Open image created with PHP's image functions [not supported] (int)
PDF_open_pdi_page(resource p, int doc, int pagenumber, string optlist) Prepare a page (int)
PDF_open_pdi(resource pdfdoc, string filename, string optlist, int len) Open PDF file [deprecated] (int)
PDF_open_tiff() Open TIFF image [deprecated]
PDF_pcos_get_number(resource p, int doc, string path) Get value of pCOS path with type number or boolean (float)
PDF_pcos_get_stream(resource p, int doc, string optlist, string path) Get contents of pCOS path with type stream, fstream, or string (string)
PDF_pcos_get_string(resource p, int doc, string path) Get value of pCOS path with type name, string, or boolean (string)
PDF_place_image(resource pdfdoc, int image, float x, float y, float scale) Place image on the page [deprecated] (bool)
PDF_place_pdi_page(resource pdfdoc, int page, float x, float y, float sx, float sy) Place PDF page [deprecated] (bool)
PDF_process_pdi(resource pdfdoc, int doc, int page, string optlist) Process imported PDF document (int)
PDF_rect(resource p, float x, float y, float width, float height) Draw rectangle (bool)
PDF_restore(resource p) Restore graphics state (bool)
PDF_resume_page(resource pdfdoc, string optlist) Resume page (bool)
PDF_rotate(resource p, float phi) Rotate coordinate system (bool)
PDF_save(resource p) Save graphics state (bool)
PDF_scale(resource p, float sx, float sy) Scale coordinate system (bool)
PDF_set_border_color(resource p, float red, float green, float blue) Set border color of annotations [deprecated] (bool)
PDF_set_border_dash(resource pdfdoc, float black, float white) Set border dash style of annotations [deprecated] (bool)
PDF_set_border_style(resource pdfdoc, string style, float width) Set border style of annotations [deprecated] (bool)
PDF_set_char_spacing() Set character spacing [deprecated]
PDF_set_duration() Set duration between pages [deprecated]
PDF_set_gstate(resource pdfdoc, int gstate) Activate graphics state object (bool)
PDF_set_horiz_scaling() Set horizontal text scaling [deprecated]
PDF_set_info_author() Fill the author document info field [deprecated]
PDF_set_info_creator() Fill the creator document info field [deprecated]
PDF_set_info_keywords() Fill the keywords document info field [deprecated]
PDF_set_info_subject() Fill the subject document info field [deprecated]
PDF_set_info_title() Fill the title document info field [deprecated]
PDF_set_info(resource p, string key, string value) Fill document info field (bool)
PDF_set_layer_dependency(resource pdfdoc, string type, string optlist) Define relationships among layers (bool)
PDF_set_leading() Set distance between text lines [deprecated]
PDF_set_parameter(resource p, string key, string value) Set string parameter (bool)
PDF_set_text_matrix() Set text matrix [deprecated]
PDF_set_text_pos(resource p, float x, float y) Set text position (bool)
PDF_set_text_rendering() Determine text rendering [deprecated]
PDF_set_text_rise() Set text rise [deprecated]
PDF_set_value(resource p, string key, float value) Set numerical parameter (bool)
PDF_set_word_spacing() Set spacing between words [deprecated]
PDF_setcolor(resource p, string fstype, string colorspace, float c1, float c2, float c3, float c4) Set fill and stroke color (bool)
PDF_setdash(resource pdfdoc, float b, float w) Set simple dash pattern (bool)
PDF_setdashpattern(resource pdfdoc, string optlist) Set dash pattern (bool)
PDF_setflat(resource pdfdoc, float flatness) Set flatness (bool)
PDF_setfont(resource pdfdoc, int font, float fontsize) Set font (bool)
PDF_setgray_fill(resource p, float g) Set fill color to gray [deprecated] (bool)
PDF_setgray_stroke(resource p, float g) Set stroke color to gray [deprecated] (bool)
PDF_setgray(resource p, float g) Set color to gray [deprecated] (bool)
PDF_setlinecap(resource p, int linecap) Set linecap parameter (bool)
PDF_setlinejoin(resource p, int value) Set linejoin parameter (bool)
PDF_setlinewidth(resource p, float width) Set line width (bool)
PDF_setmatrix(resource p, float a, float b, float c, float d, float e, float f) Set current transformation matrix (bool)
PDF_setmiterlimit(resource pdfdoc, float miter) Set miter limit (bool)
PDF_setpolydash() Set complicated dash pattern [deprecated]
PDF_setrgbcolor_fill(resource p, float red, float green, float blue) Set fill rgb color values [deprecated] (bool)
PDF_setrgbcolor_stroke(resource p, float red, float green, float blue) Set stroke rgb color values [deprecated] (bool)
PDF_setrgbcolor(resource p, float red, float green, float blue) Set fill and stroke rgb color values [deprecated] (bool)
PDF_shading_pattern(resource pdfdoc, int shading, string optlist) Define shading pattern (int)
PDF_shading(resource pdfdoc, string shtype, float x0, float y0, float x1, float y1, float c1, float c2, float c3, float c4, string optlist) Define blend (int)
PDF_shfill(resource pdfdoc, int shading) Fill area with shading (bool)
PDF_show_boxed(resource p, string text, float left, float top, float width, float height, string mode, string feature) Output text in a box [deprecated] (int)
PDF_show_xy(resource p, string text, float x, float y) Output text at given position (bool)
PDF_show(resource pdfdoc, string text) Output text at current position (bool)
PDF_skew(resource p, float alpha, float beta) Skew the coordinate system (bool)
PDF_stringwidth(resource p, string text, int font, float fontsize) Return width of text (float)
PDF_stroke(resource p) Stroke path (bool)
PDF_suspend_page(resource pdfdoc, string optlist) Suspend page (bool)
PDF_translate(resource p, float tx, float ty) Set origin of coordinate system (bool)
PDF_utf16_to_utf8(resource pdfdoc, string utf16string) Convert string from UTF-16 to UTF-8 (string)
PDF_utf32_to_utf16(resource pdfdoc, string utf32string, string ordering) Convert string from UTF-32 to UTF-16 (string)
PDF_utf8_to_utf16(resource pdfdoc, string utf8string, string ordering) Convert string from UTF-8 to UTF-16 (string)
>beginTransaction() Initiates a transaction (PDO: bool)
>commit() Commits a transaction (PDO: bool)
PDO(string dsn, [string username, [string password, [array driver_options]]]) Creates a PDO instance representing a connection to a database (new)
>errorCode() Fetch the SQLSTATE associated with the last operation on the database handle (PDO: mixed)
>errorInfo() Fetch extended error information associated with the last operation on the database handle (PDO: array)
>exec(string statement) Execute an SQL statement and return the number of affected rows (PDO: int)
>getAttribute(int attribute) Retrieve a database connection attribute (PDO: mixed)
>getAvailableDrivers() Return an array of available PDO drivers (PDO: array)
pdo_drivers() Return an array of available PDO drivers (array)
>lastInsertId([string name]) Returns the ID of the last inserted row or sequence value (PDO: string)
>prepare(string statement, [array driver_options]) Prepares a statement for execution and returns a statement object (PDO: PDOStatement)
>query(string statement) Executes an SQL statement, returning a result set as a PDOStatement object (PDO: PDOStatement)
>query(string statement, int PDO::FETCH_COLUMN, int colno) Executes an SQL statement, returning a result set as a PDOStatement object (PDO: PDOStatement)
>query(string statement, int PDO::FETCH_CLASS, string classname, array ctorargs) Executes an SQL statement, returning a result set as a PDOStatement object (PDO: PDOStatement)
>query(string statement, int PDO::FETCH_INTO, object object) Executes an SQL statement, returning a result set as a PDOStatement object (PDO: PDOStatement)
>quote(string string, [int parameter_type]) Quotes a string for use in a query. (PDO: string)
>rollBack() Rolls back a transaction (PDO: bool)
>setAttribute(int attribute, mixed value) Set an attribute (PDO: bool)
>bindColumn(mixed column, mixed &param, [int type, [int maxlen, [mixed driverdata]]]) Bind a column to a PHP variable (PDOStatement: bool)
>bindParam(mixed parameter, mixed &variable, [int data_type, [int length, [mixed driver_options]]]) Binds a parameter to the specified variable name (PDOStatement: bool)
>bindValue(mixed parameter, mixed value, [int data_type]) Binds a value to a parameter (PDOStatement: bool)
>closeCursor() Closes the cursor, enabling the statement to be executed again. (PDOStatement: bool)
>columnCount() Returns the number of columns in the result set (PDOStatement: int)
>debugDumpParams() Dump a SQL prepared command (PDOStatement: bool)
>errorCode() Fetch the SQLSTATE associated with the last operation on the statement handle (PDOStatement: string)
>errorInfo() Fetch extended error information associated with the last operation on the statement handle (PDOStatement: array)
>execute([array input_parameters]) Executes a prepared statement (PDOStatement: bool)
>fetch([int fetch_style, [int cursor_orientation, [int cursor_offset]]]) Fetches the next row from a result set (PDOStatement: mixed)
>fetchAll([int fetch_style, [int column_index, [array ctor_args]]]) Returns an array containing all of the result set rows (PDOStatement: array)
>fetchColumn([int column_number]) Returns a single column from the next row of a result set (PDOStatement: string)
>fetchObject([string class_name, [array ctor_args]]) Fetches the next row and returns it as an object. (PDOStatement: mixed)
>getAttribute(int attribute) Retrieve a statement attribute (PDOStatement: mixed)
>getColumnMeta(int column) Returns metadata for a column in a result set (PDOStatement: array)
>nextRowset() Advances to the next rowset in a multi-rowset statement handle (PDOStatement: bool)
>rowCount() Returns the number of rows affected by the last SQL statement (PDOStatement: int)
>setAttribute(int attribute, mixed value) Set a statement attribute (PDOStatement: bool)
>setFetchMode(int mode) Set the default fetch mode for this statement (PDOStatement: bool)
>setFetchMode(int PDO::FETCH_COLUMN, int colno) Set the default fetch mode for this statement (PDOStatement: bool)
>setFetchMode(int PDO::FETCH_CLASS, string classname, array ctorargs) Set the default fetch mode for this statement (PDOStatement: bool)
>setFetchMode(int PDO::FETCH_INTO, object object) Set the default fetch mode for this statement (PDOStatement: bool)
>pgsqlLOBCreate() Creates a new large object (PDO: string)
>pgsqlLOBOpen(string oid, [string mode]) Opens an existing large object stream (PDO: resource)
>pgsqlLOBUnlink(string oid) Deletes the large object (PDO: bool)
>sqliteCreateAggregate(string function_name, callback step_func, callback finalize_func, [int num_args]) Registers an aggregating User Defined Function for use in SQL statements (PDO: bool)
>sqliteCreateFunction(string function_name, callback callback, [int num_args]) Registers a User Defined Function for use in SQL statements (PDO: bool)
pg_affected_rows(resource result) Returns number of affected records (tuples) (int)
pg_cancel_query(resource connection) Cancel an asynchronous query (bool)
pg_client_encoding([resource connection]) Gets the client encoding (string)
pg_close([resource connection]) Closes a PostgreSQL connection (bool)
pg_connect(string connection_string, [int connect_type]) Open a PostgreSQL connection (resource)
pg_connection_busy(resource connection) Get connection is busy or not (bool)
pg_connection_reset(resource connection) Reset connection (reconnect) (bool)
pg_connection_status(resource connection) Get connection status (int)
pg_convert(resource connection, string table_name, array assoc_array, [int options]) Convert associative array values into suitable for SQL statement (array)
pg_copy_from(resource connection, string table_name, array rows, [string delimiter, [string null_as]]) Insert records into a table from an array (bool)
pg_copy_to(resource connection, string table_name, [string delimiter, [string null_as]]) Copy a table to an array (array)
pg_dbname([resource connection]) Get the database name (string)
pg_delete(resource connection, string table_name, array assoc_array, [int options]) Deletes records (mixed)
pg_end_copy([resource connection]) Sync with PostgreSQL backend (bool)
pg_escape_bytea([resource connection], string data) Escape a string for insertion into a bytea field (string)
pg_escape_string([resource connection], string data) Escape a string for insertion into a text field (string)
pg_execute([resource connection], string stmtname, array params) Sends a request to execute a prepared statement with given parameters, and waits for the result. (resource)
pg_fetch_all_columns(resource result, [int column]) Fetches all rows in a particular result column as an array (array)
pg_fetch_all(resource result) Fetches all rows from a result as an array (array)
pg_fetch_array(resource result, [int row, [int result_type]]) Fetch a row as an array (array)
pg_fetch_assoc(resource result, [int row]) Fetch a row as an associative array (array)
pg_fetch_object(resource result, [int row, [int result_type]]) Fetch a row as an object (object)
pg_fetch_object(resource result, [int row, [string class_name, [array params]]]) Fetch a row as an object (object)
pg_fetch_result(resource result, int row, mixed field) Returns values from a result resource (string)
pg_fetch_result(resource result, mixed field) Returns values from a result resource (string)
pg_fetch_row(resource result, [int row, [int result_type]]) Get a row as an enumerated array (array)
pg_field_is_null(resource result, int row, mixed field) Test if a field is SQL NULL (int)
pg_field_is_null(resource result, mixed field) Test if a field is SQL NULL (int)
pg_field_name(resource result, int field_number) Returns the name of a field (string)
pg_field_num(resource result, string field_name) Returns the field number of the named field (int)
pg_field_prtlen(resource result, int row_number, mixed field_name_or_number) Returns the printed length (int)
pg_field_prtlen(resource result, mixed field_name_or_number) Returns the printed length (int)
pg_field_size(resource result, int field_number) Returns the internal storage size of the named field (int)
pg_field_table(resource result, int field_number, [bool oid_only]) Returns the name or oid of the tables field (mixed)
pg_field_type_oid(resource result, int field_number) Returns the type ID (OID) for the corresponding field number (int)
pg_field_type(resource result, int field_number) Returns the type name for the corresponding field number (string)
pg_free_result(resource result) Free result memory (bool)
pg_get_notify(resource connection, [int result_type]) Gets SQL NOTIFY message (array)
pg_get_pid(resource connection) Gets the backend's process ID (int)
pg_get_result([resource connection]) Get asynchronous query result (resource)
pg_host([resource connection]) Returns the host name associated with the connection (string)
pg_insert(resource connection, string table_name, array assoc_array, [int options]) Insert array into table (mixed)
pg_last_error([resource connection]) Get the last error message string of a connection (string)
pg_last_notice(resource connection) Returns the last notice message from PostgreSQL server (string)
pg_last_oid(resource result) Returns the last row's OID (string)
pg_lo_close(resource large_object) Close a large object (bool)
pg_lo_create([resource connection, [mixed object_id]]) Create a large object (int)
pg_lo_create(mixed object_id) Create a large object (int)
pg_lo_export([resource connection], int oid, string pathname) Export a large object to file (bool)
pg_lo_import([resource connection], string pathname, mixed object_id) Import a large object from file (int)
pg_lo_open(resource connection, int oid, string mode) Open a large object (resource)
pg_lo_read_all(resource large_object) Reads an entire large object and send straight to browser (int)
pg_lo_read(resource large_object, [int len]) Read a large object (string)
pg_lo_seek(resource large_object, int offset, [int whence]) Seeks position within a large object (bool)
pg_lo_tell(resource large_object) Returns current seek position a of large object (int)
pg_lo_unlink(resource connection, int oid) Delete a large object (bool)
pg_lo_write(resource large_object, string data, [int len]) Write to a large object (int)
pg_meta_data(resource connection, string table_name) Get meta data for table (array)
pg_num_fields(resource result) Returns the number of fields in a result (int)
pg_num_rows(resource result) Returns the number of rows in a result (int)
pg_options([resource connection]) Get the options associated with the connection (string)
pg_parameter_status([resource connection], string param_name) Looks up a current parameter setting of the server. (string)
pg_pconnect(string connection_string, [int connect_type]) Open a persistent PostgreSQL connection (resource)
pg_ping([resource connection]) Ping database connection (bool)
pg_port([resource connection]) Return the port number associated with the connection (int)
pg_prepare([resource connection], string stmtname, string query) Submits a request to create a prepared statement with the given parameters, and waits for completion. (resource)
pg_put_line([resource connection], string data) Send a NULL-terminated string to PostgreSQL backend (bool)
pg_query_params([resource connection], string query, array params) Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text. (resource)
pg_query([resource connection], string query) Execute a query (resource)
pg_result_error_field(resource result, int fieldcode) Returns an individual field of an error report. (string)
pg_result_error(resource result) Get error message associated with result (string)
pg_result_seek(resource result, int offset) Set internal row offset in result resource (bool)
pg_result_status(resource result, [int type]) Get status of query result (mixed)
pg_select(resource connection, string table_name, array assoc_array, [int options]) Select records (mixed)
pg_send_execute(resource connection, string stmtname, array params) Sends a request to execute a prepared statement with given parameters, without waiting for the result(s). (bool)
pg_send_prepare(resource connection, string stmtname, string query) Sends a request to create a prepared statement with the given parameters, without waiting for completion. (bool)
pg_send_query_params(resource connection, string query, array params) Submits a command and separate parameters to the server without waiting for the result(s). (bool)
pg_send_query(resource connection, string query) Sends asynchronous query (bool)
pg_set_client_encoding([resource connection], string encoding) Set the client encoding (int)
pg_set_error_verbosity([resource connection], int verbosity) Determines the verbosity of messages returned by pg_last_error and pg_result_error. (int)
pg_trace(string pathname, [string mode, [resource connection]]) Enable tracing a PostgreSQL connection (bool)
pg_transaction_status(resource connection) Returns the current in-transaction status of the server. (int)
pg_tty([resource connection]) Return the TTY name associated with the connection (string)
pg_unescape_bytea(string data) Unescape binary for bytea type (string)
pg_untrace([resource connection]) Disable tracing of a PostgreSQL connection (bool)
pg_update(resource connection, string table_name, array data, array condition, [int options]) Update table (mixed)
pg_version([resource connection]) Returns an array with client, protocol and server version (when available) (array)
>addEmptyDir(string dirname) Add an empty directory to the phar archive (Phar: null)
>addFile(string file, [string localname]) Add a file from the filesystem to the phar archive (Phar: null)
>addFromString(string localname, string contents) Add a file from the filesystem to the phar archive (Phar: null)
>apiVersion() Returns the api version (Phar: string)
>buildFromDirectory(string base_dir, [string regex]) Construct a phar archive from the files within a directory. (Phar: array)
>buildFromIterator(Iterator iter, [string base_directory]) Construct a phar archive from an iterator. (Phar: array)
>canCompress([int type]) Returns whether phar extension supports compression using either zlib or bzip2 (Phar: bool)
>canWrite() Returns whether phar extension supports writing and creating phars (Phar: bool)
>compress(int compression, [string extension]) Compresses the entire Phar archive using Gzip or Bzip2 compression (Phar: object)
>compressAllFilesBZIP2() Compresses all files in the current Phar archive using Bzip2 compression (Phar: bool)
>compressAllFilesGZ() Compresses all files in the current Phar archive using Gzip compression (Phar: bool)
>compressFiles(int compression) Compresses all files in the current Phar archive (Phar: null)
Phar(string fname, [int flags, [string alias]]) Construct a Phar archive object (new)
>convertToData([int format, [int compression, [string extension]]]) Convert a phar archive to a non-executable tar or zip file (Phar: PharData)
>convertToExecutable([int format, [int compression, [string extension]]]) Convert a phar archive to another executable phar archive file format (Phar: Phar)
>copy(string oldfile, string newfile) Copy a file internal to the phar archive to another new file within the phar (Phar: bool)
>count() Returns the number of entries (files) in the Phar archive (Phar: int)
>createDefaultStub([string indexfile, [string webindexfile]]) Create a phar-file format specific stub (Phar: string)
>decompress([string extension]) Decompresses the entire Phar archive (Phar: object)
>decompressFiles() Decompresses all files in the current Phar archive (Phar: bool)
>delMetadata() Deletes the global metadata of the phar (Phar: bool)
>delete(string entry) Delete a file within a phar archive (Phar: bool)
>extractTo(string pathto, [string|array files, [bool overwrite]]) Extract the contents of a phar archive to a directory (Phar: bool)
>getMetaData() Returns phar archive meta-data (Phar: mixed)
>getModified() Return whether phar was modified (Phar: bool)
>getSignature() Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive (Phar: array)
>getStub() Return the PHP loader or bootstrap stub of a Phar archive (Phar: string)
>getSupportedCompression() Return array of supported compression algorithms (Phar: array)
>getSupportedSignatures() Return array of supported signature types (Phar: array)
>getVersion() Return version info of Phar archive (Phar: string)
>hasMetadata() Returns whether phar has global meta-data (Phar: bool)
>interceptFileFuncs() instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions (Phar: null)
>isBuffering() Used to determine whether Phar write operations are being buffered, or are flushing directly to disk (Phar: bool)
>isCompressed() Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on) (Phar: mixed)
>isFileFormat(int format) Returns true if the phar archive is based on the tar/phar/zip file format depending on the parameter (Phar: bool)
>isValidPharFilename(string filename, [bool executable]) Returns whether the given filename is a valid phar filename (Phar: bool)
>isWritable() Returns true if the phar archive can be modified (Phar: bool)
>loadPhar(string filename, [string alias]) Loads any phar archive with an alias (Phar: bool)
>mapPhar([string alias, [int dataoffset]]) Reads the currently executed file (a phar) and registers its manifest (Phar: bool)
>mount(string pharpath, string externalpath) Mount an external path or file to a virtual location within the phar archive (Phar: null)
>mungServer(array munglist) Defines a list of up to 4 $_SERVER variables that should be modified for execution (Phar: null)
>offsetExists(string offset) determines whether a file exists in the phar (Phar: bool)
>offsetGet(string offset) Gets a PharFileInfo object for a specific file (Phar: int)
>offsetSet(string offset, string value) set the contents of an internal file to those of an external file (Phar: null)
>offsetUnset(string offset) remove a file from a phar (Phar: bool)
>running([bool retphar]) Returns the full path on disk or full phar URL to the currently executing Phar archive (Phar: string)
>setAlias(string alias) Set the alias for the Phar archive (Phar: bool)
>setDefaultStub([string index, [string webindex]]) Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader (Phar: bool)
>setMetadata(mixed metadata) Sets phar archive meta-data (Phar: null)
>setSignatureAlgorithm(int sigtype, [string privatekey]) set the signature algorithm for a phar and apply it. (Phar: null)
>setStub(string stub) Used to set the PHP loader or bootstrap stub of a Phar archive (Phar: bool)
>startBuffering() Start buffering Phar write operations, do not modify the Phar object on disk (Phar: null)
>stopBuffering() Stop buffering write requests to the Phar archive, and save changes to disk (Phar: null)
>uncompressAllFiles() Uncompresses all files in the current Phar archive (Phar: bool)
>unlinkArchive(string archive) Completely remove a phar archive from disk and from memory (Phar: bool)
>webPhar([string alias, [string index, [string f404, [array mimetypes, [array rewrites]]]]]) mapPhar for web-based phars. front controller for web applications (Phar: null)
>addEmptyDir(string dirname) Add an empty directory to the tar/zip archive (PharData: bool)
>addFile(string file, [string localname]) Add a file from the filesystem to the tar/zip archive (Phar: null)
>addFromString(string localname, string contents) Add a file from the filesystem to the tar/zip archive (PharData: bool)
>buildFromDirectory(string base_dir, [string regex]) Construct a tar/zip archive from the files within a directory. (Phar: array)
>buildFromIterator(Iterator iter, [string base_directory]) Construct a tar or zip archive from an iterator. (PharData: array)
>compress(int compression, string extension) Compresses the entire tar/zip archive using Gzip or Bzip2 compression (PharData: object)
>compressFiles(int compression) Compresses all files in the current tar/zip archive (PharData: bool)
PharData(string fname, [int flags]) Construct a non-executable tar or zip archive object (new)
>convertToData([int format, [int compression, [string extension]]]) Convert a phar archive to a non-executable tar or zip file (PharData: PharData)
>convertToExecutable([int format, [int compression, [string extension]]]) Convert a non-executable tar/zip archive to an executable phar archive (PharData: Phar)
>copy(string oldfile, string newfile) Copy a file internal to the phar archive to another new file within the phar (PharData: bool)
>decompress([string extension]) Decompresses the entire Phar archive (PharData: object)
>decompressFiles() Decompresses all files in the current zip archive (PharData: bool)
>delMetadata() Deletes the global metadata of a zip archive (PharData: int)
>delete(string entry) Delete a file within a tar/zip archive (PharData: int)
>extractTo(string pathto, [string|array files, [bool overwrite]]) Extract the contents of a tar/zip archive to a directory (PharData: int)
>isWritable() Returns true if the tar/zip archive can be modified (PharData: bool)
>offsetSet(string offset, string value) set the contents of a file within the tar/zip to those of an external file or string (PharData: null)
>offsetUnset(string offset) remove a file from a tar/zip archive (PharData: bool)
>setAlias(string alias) dummy function (Phar::setAlias is not valid for PharData) (PharData: bool)
>setDefaultStub([string index, [string webindex]]) dummy function (Phar::setDefaultStub is not valid for PharData) (PharData: null)
>setMetadata(mixed metadata) Sets phar archive meta-data (Phar: null)
>setSignatureAlgorithm(int sigtype) set the signature algorithm for a phar and apply it. The (Phar: null)
>setStub(string stub) dummy function (Phar::setStub is not valid for PharData) (PharData: null)
>chmod(int permissions) Sets file-specific permission bits (PharFileInfo: null)
>compress(int compression) Compresses the current Phar entry with either zlib or bzip2 compression (PharFileInfo: bool)
PharFileInfo(string entry) Construct a Phar entry object (new)
>decompress() Decompresses the current Phar entry within the phar (PharFileInfo: bool)
>delMetadata() Deletes the metadata of the entry (PharFileInfo: bool)
>getCRC32() Returns CRC32 code or throws an exception if CRC has not been verified (PharFileInfo: int)
>getCompressedSize() Returns the actual size of the file (with compression) inside the Phar archive (PharFileInfo: int)
>getMetaData() Returns file-specific meta-data saved with a file (PharFileInfo: mixed)
>getPharFlags() Returns the Phar file entry flags (PharFileInfo: int)
>hasMetadata() Returns the metadata of the entry (PharFileInfo: bool)
>isCRCChecked() Returns whether file entry has had its CRC verified (PharFileInfo: bool)
>isCompressed([int compression_type]) Returns whether the entry is compressed (PharFileInfo: bool)
>isCompressedBZIP2() Returns whether the entry is compressed using bzip2 (PharFileInfo: bool)
>isCompressedGZ() Returns whether the entry is compressed using gz (PharFileInfo: bool)
>setCompressedBZIP2() Compresses the current Phar entry within the phar using Bzip2 compression (PharFileInfo: bool)
>setCompressedGZ() Compresses the current Phar entry within the phar using gz compression (PharFileInfo: bool)
>setMetaData(mixed metadata) Sets file-specific meta-data saved with a file (PharFileInfo: null)
>setUncompressed() Uncompresses the current Phar entry within the phar, if it is compressed (PharFileInfo: bool)
posix_access(string file, [int mode]) Determine accessibility of a file (bool)
posix_ctermid() Get path name of controlling terminal (string)
posix_get_last_error() Retrieve the error number set by the last posix function that failed (int)
posix_getcwd() Pathname of current directory (string)
posix_getegid() Return the effective group ID of the current process (int)
posix_geteuid() Return the effective user ID of the current process (int)
posix_getgid() Return the real group ID of the current process (int)
posix_getgrgid(int gid) Return info about a group by group id (array)
posix_getgrnam(string name) Return info about a group by name (array)
posix_getgroups() Return the group set of the current process (array)
posix_getlogin() Return login name (string)
posix_getpgid(int pid) Get process group id for job control (int)
posix_getpgrp() Return the current process group identifier (int)
posix_getpid() Return the current process identifier (int)
posix_getppid() Return the parent process identifier (int)
posix_getpwnam(string username) Return info about a user by username (array)
posix_getpwuid(int uid) Return info about a user by user id (array)
posix_getrlimit() Return info about system resource limits (array)
posix_getsid(int pid) Get the current sid of the process (int)
posix_getuid() Return the real user ID of the current process (int)
posix_initgroups(string name, int base_group_id) Calculate the group access list (bool)
posix_isatty(int fd) Determine if a file descriptor is an interactive terminal (bool)
posix_kill(int pid, int sig) Send a signal to a process (bool)
posix_mkfifo(string pathname, int mode) Create a fifo special file (a named pipe) (bool)
posix_mknod(string pathname, int mode, [int major, [int minor]]) Create a special or ordinary file (POSIX.1) (bool)
posix_setegid(int gid) Set the effective GID of the current process (bool)
posix_seteuid(int uid) Set the effective UID of the current process (bool)
posix_setgid(int gid) Set the GID of the current process (bool)
posix_setpgid(int pid, int pgid) Set process group id for job control (bool)
posix_setsid() Make the current process a session leader (int)
posix_setuid(int uid) Set the UID of the current process (bool)
posix_strerror(int errno) Retrieve the system error message associated with the given errno (string)
posix_times() Get process times (array)
posix_ttyname(int fd) Determine terminal device name (string)
posix_uname() Get system name (array)
printer_abort(resource printer_handle) Deletes the printer's spool file (null)
printer_close(resource printer_handle) Close an open printer connection (null)
printer_create_brush(int style, string color) Create a new brush (resource)
printer_create_dc(resource printer_handle) Create a new device context (null)
printer_create_font(string face, int height, int width, int font_weight, bool italic, bool underline, bool strikeout, int orientation) Create a new font (resource)
printer_create_pen(int style, int width, string color) Create a new pen (resource)
printer_delete_brush(resource brush_handle) Delete a brush (null)
printer_delete_dc(resource printer_handle) Delete a device context (bool)
printer_delete_font(resource font_handle) Delete a font (null)
printer_delete_pen(resource pen_handle) Delete a pen (null)
printer_draw_bmp(resource printer_handle, string filename, int x, int y, [int width], int height) Draw a bmp (bool)
printer_draw_chord(resource printer_handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad_x, int rad_y, int rad_x1, int rad_y1) Draw a chord (null)
printer_draw_elipse(resource printer_handle, int ul_x, int ul_y, int lr_x, int lr_y) Draw an ellipse (null)
printer_draw_line(resource printer_handle, int from_x, int from_y, int to_x, int to_y) Draw a line (null)
printer_draw_pie(resource printer_handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad1_x, int rad1_y, int rad2_x, int rad2_y) Draw a pie (null)
printer_draw_rectangle(resource printer_handle, int ul_x, int ul_y, int lr_x, int lr_y) Draw a rectangle (null)
printer_draw_roundrect(resource printer_handle, int ul_x, int ul_y, int lr_x, int lr_y, int width, int height) Draw a rectangle with rounded corners (null)
printer_draw_text(resource printer_handle, string text, int x, int y) Draw text (null)
printer_end_doc(resource printer_handle) Close document (bool)
printer_end_page(resource printer_handle) Close active page (bool)
printer_get_option(resource printer_handle, string option) Retrieve printer configuration data (mixed)
printer_list(int enumtype, [string name, [int level]]) Return an array of printers attached to the server (array)
printer_logical_fontheight(resource printer_handle, int height) Get logical font height (int)
printer_open([string printername]) Opens a connection to a printer (resource)
printer_select_brush(resource printer_handle, resource brush_handle) Select a brush (null)
printer_select_font(resource printer_handle, resource font_handle) Select a font (null)
printer_select_pen(resource printer_handle, resource pen_handle) Select a pen (null)
printer_set_option(resource printer_handle, int option, mixed value) Configure the printer connection (bool)
printer_start_doc(resource printer_handle, [string document]) Start a new document (bool)
printer_start_page(resource printer_handle) Start a new page (bool)
printer_write(resource printer_handle, string content) Write data to the printer (bool)
ps_add_bookmark(resource psdoc, string text, [int parent, [int open]]) Add bookmark to current page (int)
ps_add_launchlink(resource psdoc, float llx, float lly, float urx, float ury, string filename) Adds link which launches file (bool)
ps_add_locallink(resource psdoc, float llx, float lly, float urx, float ury, int page, string dest) Adds link to a page in the same document (bool)
ps_add_note(resource psdoc, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open) Adds note to current page (bool)
ps_add_pdflink(resource psdoc, float llx, float lly, float urx, float ury, string filename, int page, string dest) Adds link to a page in a second pdf document (bool)
ps_add_weblink(resource psdoc, float llx, float lly, float urx, float ury, string url) Adds link to a web location (bool)
ps_arc(resource psdoc, float x, float y, float radius, float alpha, float beta) Draws an arc counterclockwise (bool)
ps_arcn(resource psdoc, float x, float y, float radius, float alpha, float beta) Draws an arc clockwise (bool)
ps_begin_page(resource psdoc, float width, float height) Start a new page (bool)
ps_begin_pattern(resource psdoc, float width, float height, float xstep, float ystep, int painttype) Start a new pattern (int)
ps_begin_template(resource psdoc, float width, float height) Start a new template (int)
ps_circle(resource psdoc, float x, float y, float radius) Draws a circle (bool)
ps_clip(resource psdoc) Clips drawing to current path (bool)
ps_close_image(resource psdoc, int imageid) Closes image and frees memory (null)
ps_close(resource psdoc) Closes a PostScript document (bool)
ps_closepath_stroke(resource psdoc) Closes and strokes path (bool)
ps_closepath(resource psdoc) Closes path (bool)
ps_continue_text(resource psdoc, string text) Continue text in next line (bool)
ps_curveto(resource psdoc, float x1, float y1, float x2, float y2, float x3, float y3) Draws a curve (bool)
ps_delete(resource psdoc) Deletes all resources of a PostScript document (bool)
ps_end_page(resource psdoc) End a page (bool)
ps_end_pattern(resource psdoc) End a pattern (bool)
ps_end_template(resource psdoc) End a template (bool)
ps_fill_stroke(resource psdoc) Fills and strokes the current path (bool)
ps_fill(resource psdoc) Fills the current path (bool)
ps_findfont(resource psdoc, string fontname, string encoding, [bool embed]) Loads a font (int)
ps_get_buffer(resource psdoc) Fetches the full buffer containig the generated PS data (string)
ps_get_parameter(resource psdoc, string name, [float modifier]) Gets certain parameters (string)
ps_get_value(resource psdoc, string name, [float modifier]) Gets certain values (float)
ps_hyphenate(resource psdoc, string text) Hyphenates a word (array)
ps_include_file(resource psdoc, string file) Reads an external file with raw PostScript code (bool)
ps_lineto(resource psdoc, float x, float y) Draws a line (bool)
ps_makespotcolor(resource psdoc, string name, [int reserved]) Create spot color (int)
ps_moveto(resource psdoc, float x, float y) Sets current point (bool)
ps_new() Creates a new PostScript document object (resource)
ps_open_file(resource psdoc, [string filename]) Opens a file for output (bool)
ps_open_image_file(resource psdoc, string type, string filename, [string stringparam, [int intparam]]) Opens image from file (int)
ps_open_image(resource psdoc, string type, string source, string data, int lenght, int width, int height, int components, int bpc, string params) Reads an image for later placement (int)
ps_open_memory_image(resource psdoc, int gd) Takes an GD image and returns an image for placement in a PS document (int)
ps_place_image(resource psdoc, int imageid, float x, float y, float scale) Places image on the page (bool)
ps_rect(resource psdoc, float x, float y, float width, float height) Draws a rectangle (bool)
ps_restore(resource psdoc) Restore previously save context (bool)
ps_rotate(resource psdoc, float rot) Sets rotation factor (bool)
ps_save(resource psdoc) Save current context (bool)
ps_scale(resource psdoc, float x, float y) Sets scaling factor (bool)
ps_set_border_color(resource psdoc, float red, float green, float blue) Sets color of border for annotations (bool)
ps_set_border_dash(resource psdoc, float black, float white) Sets length of dashes for border of annotations (bool)
ps_set_border_style(resource psdoc, string style, float width) Sets border style of annotations (bool)
ps_set_info(resource p, string key, string val) Sets information fields of document (bool)
ps_set_parameter(resource psdoc, string name, string value) Sets certain parameters (bool)
ps_set_text_pos(resource psdoc, float x, float y) Sets position for text output (bool)
ps_set_value(resource psdoc, string name, float value) Sets certain values (bool)
ps_setcolor(resource psdoc, string type, string colorspace, float c1, float c2, float c3, float c4) Sets current color (bool)
ps_setdash(resource psdoc, float on, float off) Sets appearance of a dashed line (bool)
ps_setflat(resource psdoc, float value) Sets flatness (bool)
ps_setfont(resource psdoc, int fontid, float size) Sets font to use for following output (bool)
ps_setgray(resource psdoc, float gray) Sets gray value (bool)
ps_setlinecap(resource psdoc, int type) Sets appearance of line ends (bool)
ps_setlinejoin(resource psdoc, int type) Sets how contected lines are joined (bool)
ps_setlinewidth(resource psdoc, float width) Sets width of a line (bool)
ps_setmiterlimit(resource psdoc, float value) Sets the miter limit (bool)
ps_setoverprintmode(resource psdoc, int mode) Sets overprint mode (bool)
ps_setpolydash(resource psdoc, float arr) Sets appearance of a dashed line (bool)
ps_shading_pattern(resource psdoc, int shadingid, string optlist) Creates a pattern based on a shading (int)
ps_shading(resource psdoc, string type, float x0, float y0, float x1, float y1, float c1, float c2, float c3, float c4, string optlist) Creates a shading for later use (int)
ps_shfill(resource psdoc, int shadingid) Fills an area with a shading (bool)
ps_show_boxed(resource psdoc, string text, float left, float bottom, float width, float height, string hmode, [string feature]) Output text in a box (int)
ps_show_xy(resource psdoc, string text, float x, float y) Output text at given position (bool)
ps_show_xy2(resource psdoc, string text, int len, float xcoor, float ycoor) Output text at position (bool)
ps_show(resource psdoc, string text) Output text (bool)
ps_show2(resource psdoc, string text, int len) Output a text at current position (bool)
ps_string_geometry(resource psdoc, string text, [int fontid, [float size]]) Gets geometry of a string (array)
ps_stringwidth(resource psdoc, string text, [int fontid, [float size]]) Gets width of a string (float)
ps_stroke(resource psdoc) Draws the current path (bool)
ps_symbol_name(resource psdoc, int ord, [int fontid]) Gets name of a glyph (string)
ps_symbol_width(resource psdoc, int ord, [int fontid, [float size]]) Gets width of a glyph (float)
ps_symbol(resource psdoc, int ord) Output a glyph (bool)
ps_translate(resource psdoc, float x, float y) Sets translation (bool)
pspell_add_to_personal(int dictionary_link, string word) Add the word to a personal wordlist (bool)
pspell_add_to_session(int dictionary_link, string word) Add the word to the wordlist in the current session (bool)
pspell_check(int dictionary_link, string word) Check a word (bool)
pspell_clear_session(int dictionary_link) Clear the current session (bool)
pspell_config_create(string language, [string spelling, [string jargon, [string encoding]]]) Create a config used to open a dictionary (int)
pspell_config_data_dir(int conf, string directory) location of language data files (bool)
pspell_config_dict_dir(int conf, string directory) Location of the main word list (bool)
pspell_config_ignore(int dictionary_link, int n) Ignore words less than N characters long (bool)
pspell_config_mode(int dictionary_link, int mode) Change the mode number of suggestions returned (bool)
pspell_config_personal(int dictionary_link, string file) Set a file that contains personal wordlist (bool)
pspell_config_repl(int dictionary_link, string file) Set a file that contains replacement pairs (bool)
pspell_config_runtogether(int dictionary_link, bool flag) Consider run-together words as valid compounds (bool)
pspell_config_save_repl(int dictionary_link, bool flag) Determine whether to save a replacement pairs list along with the wordlist (bool)
pspell_new_config(int config) Load a new dictionary with settings based on a given config (int)
pspell_new_personal(string personal, string language, [string spelling, [string jargon, [string encoding, [int mode]]]]) Load a new dictionary with personal wordlist (int)
pspell_new(string language, [string spelling, [string jargon, [string encoding, [int mode]]]]) Load a new dictionary (int)
pspell_save_wordlist(int dictionary_link) Save the personal wordlist to a file (bool)
pspell_store_replacement(int dictionary_link, string misspelled, string correct) Store a replacement pair for a word (bool)
pspell_suggest(int dictionary_link, string word) Suggest spellings of a word (array)
qdom_error() Returns the error string from the last QDOM operation or FALSE if no errors occurred (string)
qdom_tree(string doc) Creates a tree of an XML string (QDomDocument)
radius_acct_open() Creates a Radius handle for accounting (resource)
radius_add_server(resource radius_handle, string hostname, int port, string secret, int timeout, int max_tries) Adds a server (bool)
radius_auth_open() Creates a Radius handle for authentication (resource)
radius_close(resource radius_handle) Frees all ressources (bool)
radius_config(resource radius_handle, string file) Causes the library to read the given configuration file (bool)
radius_create_request(resource radius_handle, int type) Create accounting or authentication request (bool)
radius_cvt_addr(string data) Converts raw data to IP-Address (string)
radius_cvt_int(string data) Converts raw data to integer (int)
radius_cvt_string(string data) Converts raw data to string (string)
radius_demangle_mppe_key(resource radius_handle, string mangled) Derives mppe-keys from mangled data (string)
radius_demangle(resource radius_handle, string mangled) Demangles data (string)
radius_get_attr(resource radius_handle) Extracts an attribute (mixed)
radius_get_vendor_attr(string data) Extracts a vendor specific attribute (array)
radius_put_addr(resource radius_handle, int type, string addr) Attaches an IP-Address attribute (bool)
radius_put_attr(resource radius_handle, int type, string value) Attaches a binary attribute (bool)
radius_put_int(resource radius_handle, int type, int value) Attaches an integer attribute (bool)
radius_put_string(resource radius_handle, int type, string value) Attaches a string attribute (bool)
radius_put_vendor_addr(resource radius_handle, int vendor, int type, string addr) Attaches a vendor specific IP-Address attribute (bool)
radius_put_vendor_attr(resource radius_handle, int vendor, int type, string value) Attaches a vendor specific binary attribute (bool)
radius_put_vendor_int(resource radius_handle, int vendor, int type, int value) Attaches a vendor specific integer attribute (bool)
radius_put_vendor_string(resource radius_handle, int vendor, int type, string value) Attaches a vendor specific string attribute (bool)
radius_request_authenticator(resource radius_handle) Returns the request authenticator (string)
radius_send_request(resource radius_handle) Sends the request and waites for a reply (int)
radius_server_secret(resource radius_handle) Returns the shared secret (string)
radius_strerror(resource radius_handle) Returns an error message (string)
rar_close(resource rar_file) Close Rar archive and free all resources (bool)
rar_entry_get(resource rar_file, string entry_name) Get entry object from the Rar archive (RarEntry)
>extract(string dir, [string filepath]) Extract entry from the archive (Rar: bool)
>getAttr() Get attributes of the entry (Rar: int)
>getCrc() Get CRC of the entry (Rar: int)
>getFileTime() Get entry last modification time (Rar: string)
>getHostOs() Get entry host OS (Rar: int)
>getMethod() Get pack method of the entry (Rar: int)
>getName() Get name of the entry (Rar: string)
>getPackedSize() Get packed size of the entry (Rar: int)
>getUnpackedSize() Get unpacked size of the entry (Rar: int)
>getVersion() Get version of the archiver used to add the entry (Rar: int)
rar_list(resource rar_file) Get entries list from the Rar archive (array)
rar_open(string filename, [string password]) Open Rar archive (resource)
readline_add_history(string line) Adds a line to the history (bool)
readline_callback_handler_install(string prompt, callback callback) Initializes the readline callback interface and terminal, prints the prompt and returns immediately (bool)
readline_callback_handler_remove() Removes a previously installed callback handler and restores terminal settings (bool)
readline_callback_read_char() Reads a character and informs the readline callback interface when a line is received (null)
readline_clear_history() Clears the history (bool)
readline_completion_function(callback function) Registers a completion function (bool)
readline_info([string varname, [string newvalue]]) Gets/sets various internal readline variables (mixed)
readline_list_history() Lists the history (array)
readline_on_new_line() Inform readline that the cursor has moved to a new line (null)
readline_read_history([string filename]) Reads the history (bool)
readline_redisplay() Redraws the display (null)
readline_write_history([string filename]) Writes the history (bool)
readline([string prompt]) Reads a line (string)
recode_file(string request, resource input, resource output) Recode from file to file according to recode request (bool)
recode_string(string request, string string) Recode a string according to a recode request (string)
recode() Alias of recode_string
>export(Reflector reflector, [string return]) Exports (Reflection: null)
>getModifierNames(int modifiers) Gets modifier names (Reflection: array)
>__clone() Clones object (ReflectionClass: null)
ReflectionClass(string argument) Constructs a ReflectionClass (new)
>export(mixed argument, [bool return]) Exports a class (ReflectionClass: string)
>getConstant(string name) Gets defined constants (ReflectionClass: mixed)
>getConstants() Gets constants (ReflectionClass: array)
>getConstructor() Gets constructor (ReflectionClass: object)
>getDefaultProperties() Gets default properties (ReflectionClass: array)
>getDocComment() Gets doc comments (ReflectionClass: string)
>getEndLine() Gets end line (ReflectionClass: int)
>getExtension() Gets extension info (ReflectionClass: ReflectionExtension)
>getExtensionName() Gets an extensions name (ReflectionClass: string)
>getFileName() Gets a filename (ReflectionClass: string)
>getInterfaceNames() Gets the interface names (ReflectionClass: array)
>getInterfaces() Gets the interfaces (ReflectionClass: array)
>getMethod(string name) Gets a ReflectionMethod (ReflectionClass: object)
>getMethods([string filter]) Gets a list of methods (ReflectionClass: array)
>getModifiers() Gets modifiers (ReflectionClass: int)
>getName() Gets class name (ReflectionClass: string)
>getNamespaceName() Gets namespace name (ReflectionClass: string)
>getParentClass() Gets parent class (ReflectionClass: object)
>getProperties([string filter]) Gets properties (ReflectionClass: ReflectionProperty)
>getProperty(string name) Gets property (ReflectionClass: ReflectionProperty)
>getShortName() Gets short name (ReflectionClass: string)
>getStartLine() Gets starting line number (ReflectionClass: int)
>getStaticProperties() Gets static properties (ReflectionClass: array)
>getStaticPropertyValue(string name, [string default]) Gets static property value (ReflectionClass: mixed)
>hasConstant(string name) Checks if constant is defined (ReflectionClass: bool)
>hasMethod(string name) Checks if method is defined (ReflectionClass: bool)
>hasProperty(string name) Checks if property is defined (ReflectionClass: bool)
>implementsInterface(string interface) Implements interface (ReflectionClass: bool)
>inNamespace() Checks if in namespace (ReflectionClass: bool)
>isAbstract() Checks if class is abstract (ReflectionClass: bool)
>isFinal() Checks if class is final (ReflectionClass: bool)
>isInstance(string object) Checks class for instance (ReflectionClass: bool)
>isInstantiable() Checks if instantiable (ReflectionClass: bool)
>isInterface() Checks if interface (ReflectionClass: bool)
>isInternal() Checks if internal (ReflectionClass: bool)
>isIterateable() Checks if iterateable (ReflectionClass: bool)
>isSubclassOf(string class) Checks if a subclass (ReflectionClass: bool)
>isUserDefined() Checks if user defined (ReflectionClass: bool)
>newInstance(mixed args, [mixed ...]) New instance (ReflectionClass: object)
>newInstanceArgs([array args]) New instance args (ReflectionClass: object)
>setStaticPropertyValue(string name, string value) Sets static property value (ReflectionClass: null)
>__toString() To string (ReflectionClass: string)
>__clone() Clones (ReflectionExtension: null)
ReflectionExtension(string name) Constructs a ReflectionExtension (new)
>export(string name, [string return]) Export (ReflectionExtension: string)
>getClasses() Gets classes (ReflectionExtension: array)
>getClassNames() Gets class names (ReflectionExtension: array)
>getConstants() Gets constants (ReflectionExtension: array)
>getDependencies() Gets dependencies (ReflectionExtension: array)
>getFunctions() Gets extension functions (ReflectionExtension: array)
>getINIEntries() Gets extension ini entries (ReflectionExtension: array)
>getName() Gets extension name (ReflectionExtension: string)
>getVersion() Gets extension version (ReflectionExtension: string)
>info() Gets extension info (ReflectionExtension: string)
>__toString() To string (ReflectionExtension: string)
ReflectionFunction(string name) Constructs a ReflectionFunction object (new)
>export(string name, [string return]) Exports function (ReflectionFunction: string)
>invoke([string args]) Invokes function (ReflectionFunction: mixed)
>invokeArgs(array args) Invokes function args (ReflectionFunction: mixed)
>isDisabled() Checks if function is disabled (ReflectionFunction: bool)
>__toString() To string (ReflectionFunction: string)
>__clone() Clones function (ReflectionFunctionAbstract: null)
>getDocComment() Gets doc comment (ReflectionFunctionAbstract: string)
>getEndLine() Gets end line number (ReflectionFunctionAbstract: int)
>getExtension() Gets extension info (ReflectionFunctionAbstract: ReflectionExtension)
>getExtensionName() Gets extension name (ReflectionFunctionAbstract: string)
>getFileName() Gets file name (ReflectionFunctionAbstract: string)
>getName() Gets function name (ReflectionFunctionAbstract: string)
>getNamespaceName() Gets namespace name (ReflectionFunctionAbstract: string)
>getNumberOfParameters() Gets number of parameters (ReflectionFunctionAbstract: int)
>getNumberOfRequiredParameters() Gets number of required parameters (ReflectionFunctionAbstract: int)
>getParameters() Gets parameters (ReflectionFunctionAbstract: ReflectionParameter)
>getShortName() Gets function short name (ReflectionFunctionAbstract: string)
>getStartLine() Gets starting line number (ReflectionFunctionAbstract: int)
>getStaticVariables() Gets static variables (ReflectionFunctionAbstract: array)
>inNamespace() Checks if function in namespace (ReflectionFunctionAbstract: bool)
>isClosure() Checks if closure (ReflectionFunctionAbstract: bool)
>isDeprecated() Checks if deprecated (ReflectionFunctionAbstract: bool)
>isInternal() Checks if is internal (ReflectionFunctionAbstract: bool)
>isUserDefined() Checks if user defined (ReflectionFunctionAbstract: bool)
>returnsReference() Checks if returns reference (ReflectionFunctionAbstract: bool)
>__toString() To string (ReflectionFunctionAbstract: null)
ReflectionMethod(string class_or_method, [string name]) Constructs a ReflectionMethod (new)
>export(string class, string name, [bool return]) Export (ReflectionMethod: string)
>getDeclaringClass() Gets declaring class (ReflectionMethod: ReflectionClass)
>getModifiers() Gets modifiers (ReflectionMethod: int)
>getPrototype() Gets prototype (ReflectionMethod: null)
>invoke(object object, string args) Invoke (ReflectionMethod: mixed)
>invokeArgs(string object, array args) Invoke args (ReflectionMethod: mixed)
>isAbstract() Checks if method is abstract (ReflectionMethod: bool)
>isConstructor() Checks if method is a constructor (ReflectionMethod: bool)
>isDestructor() Checks if method is a destructor (ReflectionMethod: bool)
>isFinal() Checks if method is final (ReflectionMethod: bool)
>isPrivate() Checks if method is private (ReflectionMethod: bool)
>isProtected() Checks if method is protected (ReflectionMethod: bool)
>isPublic() Checks if method is public (ReflectionMethod: bool)
>isStatic() Checks if method is static (ReflectionMethod: bool)
>__toString() To string (ReflectionMethod: string)
ReflectionObject(string argument) Constructs a ReflectionObject (new)
>export(string argument, [bool return]) Export (ReflectionObject: string)
>allowsNull() Checks if null is allowed (ReflectionParameter: bool)
>__clone() Clone (ReflectionParameter: null)
ReflectionParameter(string function, string parameter) Construct (new)
>export(string function, string parameter, [bool return]) Exports (ReflectionParameter: string)
>getClass() Get class (ReflectionParameter: ReflectionClass)
>getDeclaringClass() Gets declaring class (ReflectionParameter: ReflectionClass)
>getDeclaringFunction() Gets declaring function (ReflectionParameter: ReflectionFunction)
>getDefaultValue() Gets default parameter value (ReflectionParameter: mixed)
>getName() Gets parameter name (ReflectionParameter: string)
>getPosition() Gets parameter position (ReflectionParameter: int)
>isArray() Checks if parameter expects an array (ReflectionParameter: bool)
>isDefaultValueAvailable() Checks if a default value is available (ReflectionParameter: bool)
>isOptional() Checks if optional (ReflectionParameter: bool)
>isPassedByReference() Checks if passed by reference (ReflectionParameter: bool)
>__toString() To string (ReflectionParameter: string)
>__clone() Clone (ReflectionProperty: null)
ReflectionProperty(mixed class, string name) Construct a ReflectionProperty object (new)
>export(mixed class, string name, [bool return]) Export (ReflectionProperty: string)
>getDeclaringClass() Gets declaring class (ReflectionProperty: ReflectionClass)
>getDocComment() Gets doc comment (ReflectionProperty: string)
>getModifiers() Gets modifiers (ReflectionProperty: int)
>getName() Gets property name (ReflectionProperty: string)
>getValue([string object]) Gets value (ReflectionProperty: mixed)
>isDefault() Checks if default value (ReflectionProperty: bool)
>isPrivate() Checks if property is private (ReflectionProperty: bool)
>isProtected() Checks if property is protected (ReflectionProperty: bool)
>isPublic() Checks if property is public (ReflectionProperty: bool)
>isStatic() Checks if property is static (ReflectionProperty: bool)
>setAccessible(bool accessible) Set property accessibility (ReflectionProperty: null)
>setValue(object object, mixed value) Set property value (ReflectionProperty: null)
>__toString() To string (ReflectionProperty: string)
>export() Exports (Reflector: string)
>__toString() To string (Reflector: string)
ereg_replace(string pattern, string replacement, string string) Replace regular expression (string)
ereg(string pattern, string string, [array &regs]) Regular expression match (int)
eregi_replace(string pattern, string replacement, string string) Replace regular expression case insensitive (string)
eregi(string pattern, string string, [array &regs]) Case insensitive regular expression match (int)
split(string pattern, string string, [int limit]) Split string into array by regular expression (array)
spliti(string pattern, string string, [int limit]) Split string into array by regular expression case insensitive (array)
sql_regcase(string string) Make regular expression for case insensitive match (string)
rpm_close(resource rpmr) Closes an RPM file (bool)
rpm_get_tag(resource rpmr, int tagnum) Retrieves a header tag from an RPM file (mixed)
rpm_is_valid(string filename) Tests a filename for validity as an RPM file (bool)
rpm_open(string filename) Opens an RPM file (resource)
rpm_version() Returns a string representing the current version of the rpmreader extension (string)
runkit_class_adopt(string classname, string parentname) Convert a base class to an inherited class, add ancestral methods when appropriate (bool)
runkit_class_emancipate(string classname) Convert an inherited class to a base class, removes any method whose scope is ancestral (bool)
runkit_constant_add(string constname, mixed value) Similar to define(), but allows defining in class definitions as well (bool)
runkit_constant_redefine(string constname, mixed newvalue) Redefine an already defined constant (bool)
runkit_constant_remove(string constname) Remove/Delete an already defined constant (bool)
runkit_function_add(string funcname, string arglist, string code) Add a new function, similar to create_function (bool)
runkit_function_copy(string funcname, string targetname) Copy a function to a new function name (bool)
runkit_function_redefine(string funcname, string arglist, string code) Replace a function definition with a new implementation (bool)
runkit_function_remove(string funcname) Remove a function definition (bool)
runkit_function_rename(string funcname, string newname) Change a function's name (bool)
runkit_import(string filename, [int flags]) Process a PHP file importing function and class definitions, overwriting where appropriate (bool)
runkit_lint_file(string filename) Check the PHP syntax of the specified file (bool)
runkit_lint(string code) Check the PHP syntax of the specified php code (bool)
runkit_method_add(string classname, string methodname, string args, string code, [int flags]) Dynamically adds a new method to a given class (bool)
runkit_method_copy(string dClass, string dMethod, string sClass, [string sMethod]) Copies a method from class to another (bool)
runkit_method_redefine(string classname, string methodname, string args, string code, [int flags]) Dynamically changes the code of the given method (bool)
runkit_method_remove(string classname, string methodname) Dynamically removes the given method (bool)
runkit_method_rename(string classname, string methodname, string newname) Dynamically changes the name of the given method (bool)
runkit_return_value_used() Determines if the current functions return value will be used (bool)
runkit_sandbox_output_handler(object sandbox, [mixed callback]) Specify a function to capture and/or process output from a runkit sandbox (mixed)
runkit_superglobals() Return numerically indexed array of registered superglobals (array)
>commit() Commits (completes) the current unit of work. (SAMConnection: bool)
>connect(string protocol, [array properties]) Establishes a connection to a Messaging Server (SAMConnection: bool)
SAMConnection() Creates a new connection to a Messaging Server (new)
>disconnect() Disconnects from a Messaging Server (SAMConnection: bool)
SAMConnection->errno() Contains the unique numeric error code of the last executed SAM operation.
>errno
SAMConnection->error() Contains the text description of the last failed SAM operation.
>error
>isConnected() Queries whether a connection is established to a Messaging Server (SAMConnection: bool)
>peek(string target, [array properties]) Read a message from a queue without removing it from the queue. (SAMConnection: SAMMessage)
>peekAll(string target, [array properties]) Read one or more messages from a queue without removing it from the queue. (SAMConnection: array)
>receive(string target, [array properties]) Receive a message from a queue or subscription. (SAMConnection: SAMMessage)
>remove(string target, [array properties]) Remove a message from a queue. (SAMConnection: SAMMessage)
>rollback() Cancels (rolls back) an in-flight unit of work. (SAMConnection: bool)
>send(string target, SAMMessage msg, [array properties]) Send a message to a queue or publish an item to a topic. (SAMConnection: string)
>setDebug(bool switch) Turn on or off additional debugging output. (SAMConnection: null)
>subscribe(string targetTopic) Create a subscription to a specified topic. (SAMConnection: string)
>unsubscribe(string subscriptionId, [string targetTopic]) Cancel a subscription to a specified topic. (SAMConnection: bool)
SAMMessage->body() The body of the message.
>nody
SAMMessage([mixed body]) Creates a new Message object (new)
SAMMessage->header() The header properties of the message.
>header
>createDataObject(string type_namespace_uri, string type_name) create an SDO (SCA_LocalProxy: SDO_DataObject)
>createDataObject(string type_namespace_uri, string type_name) create an SDO (SCA_SoapProxy: SDO_DataObject)
>createDataObject(string type_namespace_uri, string type_name) create an SDO (SCA: SDO_DataObject)
>getService(string target, [string binding, [array config]]) Obtain a proxy for a service (SCA: mixed)
>beginLogging() Begin change logging (SDO_DAS_ChangeSummary: null)
>endLogging() End change logging (SDO_DAS_ChangeSummary: null)
>getChangeType(SDO_DataObject dataObject) Get the type of change made to an SDO_DataObject (SDO_DAS_ChangeSummary: int)
>getChangedDataObjects() Get the changed data objects from a change summary (SDO_DAS_ChangeSummary: SDO_List)
>getOldContainer(SDO_DataObject data_object) Get the old container for a deleted SDO_DataObject (SDO_DAS_ChangeSummary: SDO_DataObject)
>getOldValues(SDO_DataObject data_object) Get the old values for a given changed SDO_DataObject (SDO_DAS_ChangeSummary: SDO_List)
>isLogging() Test to see whether change logging is switched on (SDO_DAS_ChangeSummary: bool)
>addPropertyToType(string parent_type_namespace_uri, string parent_type_name, string property_name, string type_namespace_uri, string type_name, [array options]) Adds a property to a type (SDO_DAS_DataFactory: null)
>addType(string type_namespace_uri, string type_name, [array options]) Add a new type to a model (SDO_DAS_DataFactory: null)
>getDataFactory() Get a data factory instance (SDO_DAS_DataFactory: SDO_DAS_DataFactory)
>getChangeSummary() Get a data object's change summary (SDO_DAS_DataObject: SDO_DAS_ChangeSummary)
>getListIndex() Get the list index for a changed many-valued property (SDO_DAS_Setting: int)
>getPropertyIndex() Get the property index for a changed property (SDO_DAS_Setting: int)
>getPropertyName() Get the property name for a changed property (SDO_DAS_Setting: string)
>getValue() Get the old value for the changed property (SDO_DAS_Setting: mixed)
>isSet() Test whether a property was set prior to being modified (SDO_DAS_Setting: bool)
>create(string type_namespace_uri, string type_name) Create an SDO_DataObject (SDO_DataFactory: null)
>clear() Clear an SDO_DataObject's properties (SDO_DataObject: null)
>createDataObject(mixed identifier) Create a child SDO_DataObject (SDO_DataObject: SDO_DataObject)
>getContainer() Get a data object's container (SDO_DataObject: SDO_DataObject)
>getSequence() Get the sequence for a data object (SDO_DataObject: SDO_Sequence)
>getTypeName() Return the name of the type for a data object. (SDO_DataObject: string)
>getTypeNamespaceURI() Return the namespace URI of the type for a data object. (SDO_DataObject: string)
>getCause() Get the cause of the exception. (SDO_Exception: mixed)
>insert(mixed value, [int index]) Insert into a list (SDO_List: null)
>getContainingType() Get the SDO_Model_Type which contains this property (SDO_Model_Property: SDO_Model_Type)
>getDefault() Get the default value for the property (SDO_Model_Property: mixed)
>getName() Get the name of the SDO_Model_Property (SDO_Model_Property: string)
>getType() Get the SDO_Model_Type of the property (SDO_Model_Property: SDO_Model_Type)
>isContainment() Test to see if the property defines a containment relationship (SDO_Model_Property: bool)
>isMany() Test to see if the property is many-valued (SDO_Model_Property: bool)
SDO_Model_ReflectionDataObject(SDO_DataObject data_object) Construct an SDO_Model_ReflectionDataObject (new)
>export(SDO_Model_ReflectionDataObject rdo, [bool return]) Get a string describing the SDO_DataObject. (SDO_Model_ReflectionDataObject: mixed)
>getContainmentProperty() Get the property which defines the containment relationship to the data object (SDO_Model_ReflectionDataObject: SDO_Model_Property)
>getInstanceProperties() Get the instance properties of the SDO_DataObject (SDO_Model_ReflectionDataObject: array)
>getType() Get the SDO_Model_Type for the SDO_DataObject (SDO_Model_ReflectionDataObject: SDO_Model_Type)
>getBaseType() Get the base type for this type (SDO_Model_Type: SDO_Model_Type)
>getName() Get the name of the type (SDO_Model_Type: string)
>getNamespaceURI() Get the namespace URI of the type (SDO_Model_Type: string)
>getProperties() Get the SDO_Model_Property objects defined for the type (SDO_Model_Type: array)
>getProperty(mixed identifier) Get an SDO_Model_Property of the type (SDO_Model_Type: SDO_Model_Property)
>isAbstractType() Test to see if this SDO_Model_Type is an abstract data type (SDO_Model_Type: bool)
>isDataType() Test to see if this SDO_Model_Type is a primitive data type (SDO_Model_Type: bool)
>isInstance(SDO_DataObject data_object) Test for an SDO_DataObject being an instance of this SDO_Model_Type (SDO_Model_Type: bool)
>isOpenType() Test to see if this type is an open type (SDO_Model_Type: bool)
>isSequencedType() Test to see if this is a sequenced type (SDO_Model_Type: bool)
>getProperty(int sequence_index) Return the property for the specified sequence index. (SDO_Sequence: SDO_Model_Property)
>insert(mixed value, [int sequenceIndex, [mixed propertyIdentifier]]) Insert into a sequence (SDO_Sequence: null)
>move(int toIndex, int fromIndex) Move an item to another sequence position (SDO_Sequence: null)
>getRootDataObject() Returns the root SDO_DataObject (SDO_DAS_XML_Document: SDO_DataObject)
>getRootElementName() Returns root element's name (SDO_DAS_XML_Document: string)
>getRootElementURI() Returns root element's URI string (SDO_DAS_XML_Document: string)
>setEncoding(string encoding) Sets the given string as encoding (SDO_DAS_XML_Document: null)
>setXMLDeclaration(bool xmlDeclatation) Sets the xml declaration (SDO_DAS_XML_Document: null)
>setXMLVersion(string xmlVersion) Sets the given string as xml version (SDO_DAS_XML_Document: null)
>addTypes(string xsd_file) To load a second or subsequent schema file to a SDO_DAS_XML object (SDO_DAS_XML: null)
>create([mixed xsd_file, [string key]]) To create SDO_DAS_XML object for a given schema file (SDO_DAS_XML: SDO_DAS_XML)
>createDataObject(string namespace_uri, string type_name) Creates SDO_DataObject for a given namespace URI and type name (SDO_DAS_XML: SDO_DataObject)
>createDocument([string document_element_name]) Creates an XML Document object from scratch, without the need to load a document from a file or string. (SDO_DAS_XML: SDO_DAS_XML_Document)
>createDocument(string document_element_namespace_URI, string document_element_name, [SDO_DataObject dataobject]) Creates an XML Document object from scratch, without the need to load a document from a file or string. (SDO_DAS_XML: SDO_DAS_XML_Document)
>loadFile(string xml_file) Returns SDO_DAS_XML_Document object for a given path to xml instance document (SDO_DAS_XML: SDO_XMLDocument)
>loadString(string xml_string) Returns SDO_DAS_XML_Document for a given xml instance string (SDO_DAS_XML: SDO_DAS_XML_Document)
>saveFile(SDO_XMLDocument xdoc, string xml_file, [int indent]) Saves the SDO_DAS_XML_Document object to a file (SDO_DAS_XML: null)
>saveString(SDO_XMLDocument xdoc, [int indent]) Saves the SDO_DAS_XML_Document object to a string (SDO_DAS_XML: string)
>applyChanges(PDO database_handle, SDODataObject root_data_object) Applies the changes made to a data graph back to the database. (SDO_DAS_Relational: null)
SDO_DAS_Relational(array database_metadata, [string application_root_type, [array SDO_containment_references_metadata]]) Creates an instance of a Relational Data Access Service (new)
>createRootDataObject() Returns the special root object in an otherwise empty data graph. Used when creating a data graph from scratch. (SDO_DAS_Relational: SDODataObject)
>executePreparedQuery(PDO database_handle, PDOStatement prepared_statement, array value_list, [array column_specifier]) Executes an SQL query passed as a prepared statement, with a list of values to substitute for placeholders, and return the results as a normalised data graph. (SDO_DAS_Relational: SDODataObject)
>executeQuery(PDO database_handle, string SQL_statement, [array column_specifier]) Executes a given SQL query against a relational database and returns the results as a normalised data graph. (SDO_DAS_Relational: SDODataObject)
ftok(string pathname, string proj) Convert a pathname and a project identifier to a System V IPC key (int)
msg_get_queue(int key, [int perms]) Create or attach to a message queue (resource)
msg_queue_exists(int key) Check whether a message queue exists (bool)
msg_receive(resource queue, int desiredmsgtype, int &msgtype, int maxsize, mixed &message, [bool unserialize, [int flags, [int &errorcode]]]) Receive a message from a message queue (bool)
msg_remove_queue(resource queue) Destroy a message queue (bool)
msg_send(resource queue, int msgtype, mixed message, [bool serialize, [bool blocking, [int &errorcode]]]) Send a message to a message queue (bool)
msg_set_queue(resource queue, array data) Set information in the message queue data structure (bool)
msg_stat_queue(resource queue) Returns information from the message queue data structure (array)
sem_acquire(resource sem_identifier) Acquire a semaphore (bool)
sem_get(int key, [int max_acquire, [int perm, [int auto_release]]]) Get a semaphore id (resource)
sem_release(resource sem_identifier) Release a semaphore (bool)
sem_remove(resource sem_identifier) Remove a semaphore (bool)
shm_attach(int key, [int memsize, [int perm]]) Creates or open a shared memory segment (resource)
shm_detach(resource shm_identifier) Disconnects from shared memory segment (bool)
shm_get_var(resource shm_identifier, int variable_key) Returns a variable from shared memory (mixed)
shm_has_var(resource shm_identifier, int variable_key) Check whether a specific entry exists (bool)
shm_put_var(resource shm_identifier, int variable_key, mixed variable) Inserts or updates a variable in shared memory (bool)
shm_remove_var(resource shm_identifier, int variable_key) Removes a variable from shared memory (bool)
shm_remove(resource shm_identifier) Removes shared memory from Unix systems (bool)
session_cache_expire([string new_cache_expire]) Return current cache expire (int)
session_cache_limiter([string cache_limiter]) Get and/or set the current cache limiter (string)
session_commit() Alias of session_write_close
session_decode(string data) Decodes session data from a string (bool)
session_destroy() Destroys all data registered to a session (bool)
session_encode() Encodes the current session data as a string (string)
session_get_cookie_params() Get the session cookie parameters (array)
session_id([string id]) Get and/or set the current session id (string)
session_is_registered(string name) Find out whether a global variable is registered in a session (bool)
session_module_name([string module]) Get and/or set the current session module (string)
session_name([string name]) Get and/or set the current session name (string)
session_regenerate_id([bool delete_old_session]) Update the current session id with a newly generated one (bool)
session_register(mixed name, [mixed ...]) Register one or more global variables with the current session (bool)
session_save_path([string path]) Get and/or set the current session save path (string)
session_set_cookie_params(int lifetime, [string path, [string domain, [bool secure, [bool httponly]]]]) Set the session cookie parameters (null)
session_set_save_handler(callback open, callback close, callback read, callback write, callback destroy, callback gc) Sets user-level session storage functions (bool)
session_start() Initialize session data (bool)
session_unregister(string name) Unregister a global variable from the current session (bool)
session_unset() Free all session variables (null)
session_write_close() Write session data and end session (null)
session_pgsql_add_error(int error_level, [string error_message]) Increments error counts and sets last error message (bool)
session_pgsql_get_error([bool with_error_message]) Returns number of errors and last error message (array)
session_pgsql_get_field() Get custom field value (string)
session_pgsql_reset() Reset connection to session database servers (bool)
session_pgsql_set_field(string value) Set custom field value (bool)
session_pgsql_status() Get current save handler status (array)
shmop_close(int shmid) Close shared memory block (null)
shmop_delete(int shmid) Delete shared memory block (bool)
shmop_open(int key, string flags, int mode, int size) Create or open shared memory block (int)
shmop_read(int shmid, int start, int count) Read data from shared memory block (string)
shmop_size(int shmid) Get size of shared memory block (int)
shmop_write(int shmid, string data, int offset) Write data into shared memory block (int)
simplexml_import_dom(DOMNode node, [string class_name]) Get a SimpleXMLElement object from a DOM node. (SimpleXMLElement)
simplexml_load_file(string filename, [string class_name, [int options, [string ns, [bool is_prefix]]]]) Interprets an XML file into an object (object)
simplexml_load_string(string data, [string class_name, [int options, [string ns, [bool is_prefix]]]]) Interprets a string of XML into an object (object)
>addAttribute(string name, string value, [string namespace]) Adds an attribute to the SimpleXML element (SimpleXMLElement: null)
>addChild(string name, [string value, [string namespace]]) Adds a child element to the XML node (SimpleXMLElement: SimpleXMLElement)
>asXML([string filename]) Return a well-formed XML string based on SimpleXML element (SimpleXMLElement: mixed)
>attributes([string ns, [bool is_prefix]]) Identifies an element's attributes (SimpleXMLElement: SimpleXMLElement)
>children([string ns, [bool is_prefix]]) Finds children of given node (SimpleXMLElement: SimpleXMLElement)
SimpleXMLElement(string data, [int options, [bool data_is_url, [string ns, [bool is_prefix]]]]) Creates a new SimpleXMLElement object (new)
>getDocNamespaces([bool recursive]) Returns namespaces declared in document (SimpleXMLElement: array)
>getName() Gets the name of the XML element (SimpleXMLElement: string)
>getNamespaces([bool recursive]) Returns namespaces used in document (SimpleXMLElement: array)
>registerXPathNamespace(string prefix, string ns) Creates a prefix/ns context for the next XPath query (SimpleXMLElement: bool)
>xpath(string path) Runs XPath query on XML data (SimpleXMLElement: array)
snmp_get_quick_print() Fetches the current value of the UCD library's quick_print setting (bool)
snmp_get_valueretrieval() Return the method how the SNMP values will be returned (int)
snmp_read_mib(string filename) Reads and parses a MIB file into the active MIB tree (bool)
snmp_set_enum_print(int enum_print) Return all values that are enums with their enum value instead of the raw integer (null)
snmp_set_oid_numeric_print(int oid_numeric_print) Return all objects including their respective object id within the specified one (null)
snmp_set_oid_output_format(int oid_format) Set the OID output format (null)
snmp_set_quick_print(bool quick_print) Set the value of quick_print within the UCD SNMP library (null)
snmp_set_valueretrieval(int method) Specify the method how the SNMP values will be returned (null)
snmpget(string hostname, string community, string object_id, [int timeout, [int retries]]) Fetch an SNMP object (string)
snmpgetnext(string host, string community, string object_id, [int timeout, [int retries]]) Fetch a SNMP object (string)
snmprealwalk(string host, string community, string object_id, [int timeout, [int retries]]) Return all objects including their respective object ID within the specified one (array)
snmpset(string hostname, string community, string object_id, string type, mixed value, [int timeout, [int retries]]) Set an SNMP object (bool)
snmpwalk(string hostname, string community, string object_id, [int timeout, [int retries]]) Fetch all the SNMP objects from an agent (array)
snmpwalkoid(string hostname, string community, string object_id, [int timeout, [int retries]]) Query for a tree of information about a network entity (array)
is_soap_fault(mixed object) Checks if a SOAP call has failed (bool)
use_soap_error_handler([bool handler]) Set whether to use the SOAP error handler (bool)
>__call(string function_name, string arguments) Calls a SOAP function (deprecated) (SoapClient: mixed)
SoapClient(mixed wsdl, [array options]) SoapClient constructor (new)
>__doRequest(string request, string location, string action, int version, [int one_way]) Performs a SOAP request (SoapClient: string)
>__getFunctions() Returns list of available SOAP functions (SoapClient: array)
>__getLastRequest() Returns last SOAP request (SoapClient: string)
>__getLastRequestHeaders() Returns the SOAP headers from the last request (SoapClient: string)
>__getLastResponse() Returns last SOAP response (SoapClient: string)
>__getLastResponseHeaders() Returns the SOAP headers from the last response (SoapClient: string)
>__getTypes() Returns a list of SOAP types (SoapClient: array)
>__setCookie(string name, [string value]) The __setCookie purpose (SoapClient: null)
>__setLocation([string new_location]) Sets the location of the Web service to use. (SoapClient: string)
>__setSoapHeaders([mixed soapheaders]) Sets SOAP headers for subsequent calls. (SoapClient: bool)
>__soapCall(string function_name, array arguments, [array options, [mixed input_headers, [array &output_headers]]]) Calls a SOAP function (SoapClient: mixed)
SoapClient(mixed wsdl, [array options]) SoapClient constructor (new)
SoapFault(string faultcode, string faultstring, [string faultactor, [string detail, [string faultname, [string headerfault]]]]) SoapFault constructor (new)
SoapFault(string faultcode, string faultstring, [string faultactor, [string detail, [string faultname, [string headerfault]]]]) SoapFault constructor (new)
>__toString() Obtain a string representation of a SoapFault (SoapFault: string)
SoapHeader(string namespace, string name, [mixed data, [bool mustunderstand, [string actor]]]) SoapHeader constructor (new)
SoapHeader(string namespace, string name, [mixed data, [bool mustunderstand, [string actor]]]) SoapHeader constructor (new)
SoapParam(mixed data, string name) SoapParam constructor (new)
SoapParam(mixed data, string name) SoapParam constructor (new)
>addFunction(string functions) Adds one or more functions to handle SOAP requests (SoapServer: null)
>addSoapHeader(string object) Add a SOAP header to the response (SoapServer: null)
SoapServer(mixed wsdl, [array options]) SoapServer constructor (new)
>fault(string code, string string, [string actor, [string details, [string name]]]) Issue SoapServer fault indicating an error (SoapServer: null)
>getFunctions() Returns list of defined functions (SoapServer: array)
>handle([string soap_request]) Handles a SOAP request (SoapServer: null)
>setClass(string class_name, [string args]) Sets the class which handles SOAP requests (SoapServer: null)
>setObject(string object) Sets the object which will be used to handle SOAP requests (SoapServer: null)
>setPersistence(string mode) Sets SoapServer persistence mode (SoapServer: null)
SoapServer(mixed wsdl, [array options]) SoapServer constructor (new)
SoapVar(string data, string encoding, [string type_name, [string type_namespace, [string node_name, [string node_namespace]]]]) SoapVar constructor (new)
SoapVar(string data, string encoding, [string type_name, [string type_namespace, [string node_name, [string node_namespace]]]]) SoapVar constructor (new)
socket_accept(resource socket) Accepts a connection on a socket (resource)
socket_bind(resource socket, string address, [int port]) Binds a name to a socket (bool)
socket_clear_error([resource socket]) Clears the error on the socket or the last error code (null)
socket_close(resource socket) Closes a socket resource (null)
socket_connect(resource socket, string address, [int port]) Initiates a connection on a socket (bool)
socket_create_listen(int port, [int backlog]) Opens a socket on port to accept connections (resource)
socket_create_pair(int domain, int type, int protocol, array &fd) Creates a pair of indistinguishable sockets and stores them in an array (bool)
socket_create(int domain, int type, int protocol) Create a socket (endpoint for communication) (resource)
socket_get_option(resource socket, int level, int optname) Gets socket options for the socket (mixed)
socket_getpeername(resource socket, string &address, [int &port]) Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type (bool)
socket_getsockname(resource socket, string &addr, [int &port]) Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type (bool)
socket_last_error([resource socket]) Returns the last error on the socket (int)
socket_listen(resource socket, [int backlog]) Listens for a connection on a socket (bool)
socket_read(resource socket, int length, [int type]) Reads a maximum of length bytes from a socket (string)
socket_recv(resource socket, string &buf, int len, int flags) Receives data from a connected socket (int)
socket_recvfrom(resource socket, string &buf, int len, int flags, string &name, [int &port]) Receives data from a socket whether or not it is connection-oriented (int)
socket_select(array &read, array &write, array &except, int tv_sec, [int tv_usec]) Runs the select() system call on the given arrays of sockets with a specified timeout (int)
socket_send(resource socket, string buf, int len, int flags) Sends data to a connected socket (int)
socket_sendto(resource socket, string buf, int len, int flags, string addr, [int port]) Sends a message to a socket, whether it is connected or not (int)
socket_set_block(resource socket) Sets blocking mode on a socket resource (bool)
socket_set_nonblock(resource socket) Sets nonblocking mode for file descriptor fd (bool)
socket_set_option(resource socket, int level, int optname, mixed optval) Sets socket options for the socket (bool)
socket_shutdown(resource socket, [int how]) Shuts down a socket for receiving, sending, or both (bool)
socket_strerror(int errno) Return a string describing a socket error (string)
socket_write(resource socket, string buffer, [int length]) Write to a socket (int)
>addQuery(string query, [string index, [string comment]]) Add query to multi-query batch (SphinxClient: int)
>buildExcerpts(array docs, string index, string words, [array opts]) Build text snippets (SphinxClient: array)
>buildKeywords(string query, string index, bool hits) Extract keywords from query (SphinxClient: array)
SphinxClient() Create a new SphinxClient object (new)
>escapeString(string string) Escape special characters (SphinxClient: string)
>getLastError() Get the last error message (SphinxClient: string)
>getLastWarning() Get the last warning (SphinxClient: string)
>query(string query, [string index, [string comment]]) Execute search query (SphinxClient: array)
>resetFilters() Clear all filters (SphinxClient: null)
>resetGroupBy() Clear all group-by settings (SphinxClient: null)
>runQueries() Run a batch of search queries (SphinxClient: array)
>setArrayResult(bool array_result) Change the format of result set array (SphinxClient: bool)
>setConnectTimeout(float timeout) Set connection timeout (SphinxClient: bool)
>setFieldWeights(array weights) Set field weights (SphinxClient: bool)
>setFilter(string attribute, array values, [bool exclude]) Add new integer values set filter (SphinxClient: bool)
>setFilterFloatRange(string attribute, float min, float max, [bool exclude]) Add new float range filter (SphinxClient: bool)
>setFilterRange(string attribute, int min, int max, [bool exclude]) Add new integer range filter (SphinxClient: bool)
>setGeoAnchor(string attrlat, string attrlong, float latitude, float longitude) Set anchor point for a geosphere distance calculations (SphinxClient: bool)
>setGroupBy(string attribute, int func, [string groupsort]) Set grouping attribute (SphinxClient: bool)
>setGroupDistinct(string attribute) Set attribute name for per-group distinct values count calculations (SphinxClient: bool)
>setIDRange(int min, int max) Set a range of accepted document IDs (SphinxClient: bool)
>setIndexWeights(array weights) Set per-index weights (SphinxClient: bool)
>setLimits(int offset, int limit, [int max_matches, [int cutoff]]) Set offset and limit of the result set (SphinxClient: bool)
>setMatchMode(int mode) Set full-text query matching mode (SphinxClient: bool)
>setMaxQueryTime(int qtime) Set maximum query time (SphinxClient: bool)
>setRankingMode(int ranker) Set ranking mode (SphinxClient: bool)
>setRetries(int count, [int delay]) Set retry count and delay (SphinxClient: bool)
>setServer(string server, int port) Set searchd host and port (SphinxClient: bool)
>setSortMode(int mode, [string sortby]) Set matches sorting mode (SphinxClient: bool)
>updateAttributes(string index, array attributes, array values) Update document attributes (SphinxClient: int)
>append(Iterator iterator) Appends an iterator (AppendIterator: null)
AppendIterator() Constructs an AppendIterator (new)
>current() Gets the current value (AppendIterator: null)
>getArrayIterator() The getArrayIterator method (AppendIterator: null)
>getInnerIterator() Gets an inner iterator (AppendIterator: null)
>getIteratorIndex() Gets an index of iterators (AppendIterator: null)
>key() Gets the current key (AppendIterator: null)
>next() Moves to the next element (AppendIterator: null)
>rewind() Rewinds the Iterator (AppendIterator: null)
>valid() Checks validity of the current element (AppendIterator: null)
>current() Return current array entry (ArrayIterator: mixed)
>key() Return current array key (ArrayIterator: mixed)
>next() Move to next entry (ArrayIterator: null)
>rewind() Rewind array back to the start (ArrayIterator: null)
>seek(int position) Seek to position (ArrayIterator: null)
>valid() Check whether array contains more entries (ArrayIterator: bool)
>append(mixed value) Appends the value (ArrayObject: null)
>asort() Sort the entries by value (ArrayObject: null)
ArrayObject([mixed input, [int flags, [string iterator_class]]]) Construct a new array object (new)
>count() Get the number of public properties in the ArrayObject (ArrayObject: int)
>exchangeArray(mixed input) Exchange the array for another one. (ArrayObject: array)
>getArrayCopy() Creates a copy of the ArrayObject. (ArrayObject: array)
>getFlags() Gets the behavior flags. (ArrayObject: int)
>getIterator() Create a new iterator from an ArrayObject instance (ArrayObject: ArrayIterator)
>getIteratorClass() Gets the iterator classname for the ArrayObject. (ArrayObject: int)
>ksort() Sort the entries by key (ArrayObject: null)
>natcasesort() Sort an array using a case insensitive "natural order" algorithm (ArrayObject: null)
>natsort() Sort entries using a "natural order" algorithm (ArrayObject: null)
>offsetExists(mixed index) Returns whether the requested index exists (ArrayObject: bool)
>offsetGet(mixed index) Returns the value at the specified index (ArrayObject: mixed)
>offsetSet(mixed index, mixed newval) Sets the value at the specified index to newval (ArrayObject: null)
>offsetUnset(mixed index) Unsets the value at the specified index (ArrayObject: null)
>setFlags(int flags) Sets the behavior flags. (ArrayObject: null)
>setIteratorClass(string iterator_class) Sets the iterator classname for the ArrayObject. (ArrayObject: null)
>uasort(callback cmp_function) Sort the entries with a user-defined comparison function and maintain key association (ArrayObject: null)
>uksort(callback cmp_function) Sort the entries by keys using a user-defined comparison function (ArrayObject: null)
CachingIterator(Iterator iterator, [string flags]) Construct a new CachingIterator object for the iterator. (new)
>count() The number of elements in the iterator (CachingIterator: null)
>current() Return the current element (CachingIterator: null)
>getCache() The getCache purpose (CachingIterator: null)
>getFlags() Get flags used (CachingIterator: null)
>getInnerIterator() Return the innter iterator (CachingIterator: null)
>hasNext() Check whether the inner iterator has a valid next element (CachingIterator: null)
>key() Return the key for the current element (CachingIterator: null)
>next() Move the iterator forward (CachingIterator: null)
>offsetExists(string index) The offsetExists purpose (CachingIterator: null)
>offsetGet(string index) The offsetGet purpose (CachingIterator: null)
>offsetSet(string index, string newval) The offsetSet purpose (CachingIterator: null)
>offsetUnset(string index) The offsetUnset purpose (CachingIterator: null)
>rewind() Rewind the iterator (CachingIterator: null)
>setFlags(bitmask flags) The setFlags purpose (CachingIterator: null)
>__toString() Return the string representation of the current element (CachingIterator: null)
>valid() Check whether the current element is valid (CachingIterator: null)
>count() Count elements of an object (Countable: int)
DirectoryIterator(string path) Constructs a new directory iterator from a path (new)
>current() Return the current DirectoryIterator item. (DirectoryIterator: DirectoryIterator)
>getATime() Get last access time of the current DirectoryIterator item (DirectoryIterator: int)
>getBasename([string suffix]) Get base name of current DirectoryIterator item. (DirectoryIterator: string)
>getCTime() Get inode change time of the current DirectoryIterator item (DirectoryIterator: int)
>getFilename() Return file name of current DirectoryIterator item. (DirectoryIterator: string)
>getGroup() Get group for the current DirectoryIterator item (DirectoryIterator: int)
>getInode() Get inode for the current DirectoryIterator item (DirectoryIterator: int)
>getMTime() Get last modification time of current DirectoryIterator item (DirectoryIterator: int)
>getOwner() Get owner of current DirectoryIterator item (DirectoryIterator: int)
>getPath() Get path of current Iterator item without filename (DirectoryIterator: string)
>getPathname() Return path and file name of current DirectoryIterator item (DirectoryIterator: string)
>getPerms() Get the permissions of current DirectoryIterator item (DirectoryIterator: int)
>getSize() Get size of current DirectoryIterator item (DirectoryIterator: int)
>getType() Determine the type of the current DirectoryIterator item (DirectoryIterator: string)
>isDir() Determine if current DirectoryIterator item is a directory (DirectoryIterator: bool)
>isDot() Determine if current DirectoryIterator item is '.' or '..' (DirectoryIterator: bool)
>isExecutable() Determine if current DirectoryIterator item is executable (DirectoryIterator: bool)
>isFile() Determine if current DirectoryIterator item is a regular file (DirectoryIterator: bool)
>isLink() Determine if current DirectoryIterator item is a symbolic link (DirectoryIterator: bool)
>isReadable() Determine if current DirectoryIterator item can be read (DirectoryIterator: bool)
>isWritable() Determine if current DirectoryIterator item can be written to (DirectoryIterator: bool)
>key() Return the key for the current DirectoryIterator item (DirectoryIterator: string)
>next() Move forward to next DirectoryIterator item (DirectoryIterator: null)
>rewind() Rewind the DirectoryIterator back to the start (DirectoryIterator: null)
>seek(int position) Seek to a DirectoryIterator item (DirectoryIterator: null)
>__toString() Get file name as a string (DirectoryIterator: string)
>valid() Check whether current DirectoryIterator position is a valid file (DirectoryIterator: bool)
>current() The current() method (EmptyIterator: null)
>key() The key() method (EmptyIterator: null)
>next() The next() method (EmptyIterator: null)
>rewind() The rewind() method (EmptyIterator: null)
>valid() The valid() method (EmptyIterator: null)
FilesystemIterator(string path, [int flags]) Constructs a new filesystem iterator (new)
>current() The current file (FilesystemIterator: mixed)
>getFlags() Get the handling flags (FilesystemIterator: int)
>key() Retrieve the key for the current file (FilesystemIterator: string)
>next() Move to the next file (FilesystemIterator: null)
>rewind() Rewinds back to the beginning (FilesystemIterator: null)
>setFlags([int flags]) Sets handling flags (FilesystemIterator: null)
>accept() Check whether the current element of the iterator is acceptable (FilterIterator: bool)
>current() Get the current element value (FilterIterator: mixed)
>getInnerIterator() Get the inner iterator (FilterIterator: Iterator)
>key() Get the current key (FilterIterator: mixed)
>next() Move the iterator forward (FilterIterator: null)
>rewind() Rewind the iterator (FilterIterator: null)
>valid() Check whether the current element is valid (FilterIterator: bool)
class_implements(mixed class, [bool autoload]) Return the interfaces which are implemented by the given class (array)
class_parents(mixed class, [bool autoload]) Return the parent classes of the given class (array)
iterator_apply(Traversable iterator, callback function, [array args]) Apply a user function to every element of an iterator (int)
iterator_count(Traversable iterator) Count the elements in an iterator (int)
iterator_to_array(Traversable iterator, [bool use_keys]) Copy the iterator into an array (array)
spl_autoload_call(string class_name) Try all registered __autoload() function to load the requested class (null)
spl_autoload_extensions([string file_extensions]) Register and return default file extensions for spl_autoload (string)
spl_autoload_functions() Return all registered __autoload() functions (array)
spl_autoload_register([callback autoload_function]) Register given function as __autoload() implementation (bool)
spl_autoload_unregister(mixed autoload_function) Unregister given function as __autoload() implementation (bool)
spl_autoload(string class_name, [string file_extensions]) Default implementation for __autoload() (null)
spl_classes() Return available SPL classes (array)
spl_object_hash(object obj) Return hash id for given object (string)
GlobIterator(string path, [integer flags]) Construct a directory using glob (new)
>count() Get the number of directories and files (GlobIterator: integer)
InfiniteIterator(Iterator iterator) Constructs an infiniteIterator (new)
>next() Moves the Iterator forward (InfiniteIterator: null)
IteratorIterator(Traversable iterator) Create an iterator from anything that is traversable (new)
>current() Get the current value (IteratorIterator: null)
>getInnerIterator() Get the inner iterator (IteratorIterator: null)
>key() Get the key of the current element (IteratorIterator: null)
>next() Forward to the next element (IteratorIterator: null)
>rewind() Rewind to the first element (IteratorIterator: null)
>valid() Checks if the iterator is valid (IteratorIterator: bool)
>getPosition() Return the current position (LimitIterator: int)
>next() Move the iterator forward (LimitIterator: null)
>rewind() Rewind the iterator to the specified starting offset (LimitIterator: null)
>seek(int position) Seek to the given position (LimitIterator: null)
>valid() Check whether the current element is valid (LimitIterator: bool)
>attachIterator(Iterator iterator, [string infos]) Attaches iterator information (MultipleIterator: null)
MultipleIterator(integer flags) Constructs a new MultipleIterator (new)
>containsIterator(Iterator iterator) Checks if an iterator is attached (MultipleIterator: null)
>countIterators() Gets the number of attached iterator instances (MultipleIterator: null)
>current() Gets the registered iterator instances (MultipleIterator: null)
>detachIterator(Iterator iterator) Detaches an iterator (MultipleIterator: null)
>getFlags() Gets the flag information (MultipleIterator: null)
>key() Gets the registered iterator instances (MultipleIterator: null)
>next() Moves all attached iterator instances forward (MultipleIterator: null)
>rewind() Rewinds all attached iterator instances (MultipleIterator: null)
>setFlags(integer flags) Sets flags (MultipleIterator: null)
>valid() Checks the validity of sub iterators (MultipleIterator: null)
>rewind() Prevents the rewind operation on the inner iterator. (NoRewindIterator: null)
>getChildren() Return the inner iterator's children contained in a ParentIterator (ParentIterator: ParentIterator)
>hasChildren() Check whether the inner iterator's current element has children (ParentIterator: bool)
>next() Move the iterator forward (ParentIterator: null)
>rewind() Rewind the iterator (ParentIterator: null)
>getChildren() Returns an iterator for the current entry if it is an array or an object. (RecursiveArrayIterator: RecursiveArrayIterator)
>hasChildren() Returns whether current entry is an array or an object. (RecursiveArrayIterator: bool)
>getChildren() Return the inner iterator's children as a RecursiveCachingIterator (RecursiveCachingIterator: RecursiveCachingIterator)
>hasChildren() Check whether the current element of the inner iterator has children (RecursiveCachingIterator: bool)
>getChildren() Returns an iterator for the current entry if it is a directory (RecursiveDirectoryIterator: object)
>hasChildren([bool allow_links]) Returns whether current entry is a directory and not '.' or '..' (RecursiveDirectoryIterator: bool)
>key() Return path and filename of current dir entry (RecursiveDirectoryIterator: string)
>next() Move to next entry (RecursiveDirectoryIterator: null)
>rewind() Rewind dir back to the start (RecursiveDirectoryIterator: null)
RecursiveFilterIterator(RecursiveIterator iterator) Create a RecursiveFilterIterator from a RecursiveIterator (new)
>getChildren() Return the inner iterator's children contained in a RecursiveFilterIterator (RecursiveFilterIterator: null)
>hasChildren() Check whether the inner iterator's current element has children (RecursiveFilterIterator: null)
>getChildren() Returns an iterator for the current entry. (RecursiveIterator: RecursiveIterator)
>hasChildren() Returns if an iterator can be created fot the current entry. (RecursiveIterator: bool)
>current() Access the current element value (RecursiveIteratorIterator: mixed)
>getDepth() Get the current depth of the recursive iteration (RecursiveIteratorIterator: int)
>getSubIterator() The current active sub iterator (RecursiveIteratorIterator: RecursiveIterator)
>key() Access the current key (RecursiveIteratorIterator: mixed)
>next() Move forward to the next element (RecursiveIteratorIterator: null)
>rewind() Rewind the iterator to the first element of the top level inner iterator (RecursiveIteratorIterator: null)
>valid() Check whether the current position is valid (RecursiveIteratorIterator: bool)
RecursiveRegexIterator(RecursiveIterator iterator, string regex, [int mode, [int flags, [int preg_flags]]]) Creates a new RecursiveRegexIterator. (new)
>getChildren() Returns an iterator for the current entry. (RecursiveRegexIterator: RecursiveRegexIterator)
>hasChildren() Returns whether an iterator can be obtained for the current entry. (RecursiveRegexIterator: bool)
RegexIterator(Iterator iterator, string regex, [int mode, [int flags, [int preg_flags]]]) Creates a new RegexIterator. (new)
>getFlags() Returns the special flags. (RegexIterator: int)
>getMode() Returns operation mode. (RegexIterator: int)
>getPregFlags() Returns the regular expression flags. (RegexIterator: int)
>setFlags(int flags) Sets the special flags. (RegexIterator: null)
>setMode(int mode) Sets the operation mode. (RegexIterator: null)
>setPregFlags(int preg_flags) Sets the regular expression flags. (RegexIterator: null)
>seek(int position) Seeks to a position (SeekableIterator: null)
>current() Returns the current element (SimpleXMLIterator: mixed)
>getChildren() Returns the sub-elements of the current element (SimpleXMLIterator: object)
>hasChildren() Checks whether the current element has sub elements. (SimpleXMLIterator: bool)
>key() Return current key (SimpleXMLIterator: mixed)
>next() Move to next element (SimpleXMLIterator: null)
>rewind() Rewind to the first element (SimpleXMLIterator: null)
>valid() Check whether the current element is valid (SimpleXMLIterator: bool)
>bottom() Peeks at the node from the beginning of the doubly linked list (SplDoublyLinkedList: mixed)
SplDoublyLinkedList() Constructs a new doubly linked list (new)
>count() Counts the number of elements in the doubly linked list. (SplDoublyLinkedList: int)
>current() Return current array entry (SplDoublyLinkedList: mixed)
>getIteratorMode() Returns the mode of iteration (SplDoublyLinkedList: int)
>isEmpty() Checks whether the doubly linked list is empty. (SplDoublyLinkedList: bool)
>key() Return current node index (SplDoublyLinkedList: mixed)
>next() Move to next entry (SplDoublyLinkedList: null)
>offsetExists(mixed index) Returns whether the requested $index exists (SplDoublyLinkedList: bool)
>offsetGet(mixed index) Returns the value at the specified $index (SplDoublyLinkedList: mixed)
>offsetSet(mixed index, mixed newval) Sets the value at the specified $index to $newval (SplDoublyLinkedList: null)
>offsetUnset(mixed index) Unsets the value at the specified $index (SplDoublyLinkedList: null)
>pop() Pops a node from the end of the doubly linked list (SplDoublyLinkedList: mixed)
>prev() Move to previous entry (SplDoublyLinkedList: null)
>push(mixed value) Pushes an element at the end of the doubly linked list (SplDoublyLinkedList: null)
>rewind() Rewind iterator back to the start (SplDoublyLinkedList: null)
>setIteratorMode(int mode) Sets the mode of iteration (SplDoublyLinkedList: null)
>shift() Shifts a node from the beginning of the doubly linked list (SplDoublyLinkedList: mixed)
>top() Peeks at the node from the end of the doubly linked list (SplDoublyLinkedList: mixed)
>unshift(mixed value) Prepends the doubly linked list with an element (SplDoublyLinkedList: null)
>valid() Check whether the doubly linked list contains more nodes (SplDoublyLinkedList: bool)
SplFileInfo(string file_name) Construct a new SplFileInfo object (new)
>getATime() Gets last access time of the file (SplFileInfo: int)
>getBasename([string suffix]) Gets the base name of the file (SplFileInfo: string)
>getCTime() Gets the inode change time (SplFileInfo: int)
>getFileInfo([string class_name]) Gets an SplFileInfo object for the file (SplFileInfo: SplFileInfo)
>getFilename() Gets the filename (SplFileInfo: string)
>getGroup() Gets the file group (SplFileInfo: int)
>getInode() Gets the inode for the file (SplFileInfo: int)
>getLinkTarget() Gets the target of a link (SplFileInfo: string)
>getMTime() Gets the last modified time (SplFileInfo: int)
>getOwner() Gets the owner of the file (SplFileInfo: int)
>getPath() Gets the path without filename (SplFileInfo: string)
>getPathInfo([string class_name]) Gets an SplFileInfo object for the path (SplFileInfo: SplFileInfo)
>getPathname() Gets the path to the file (SplFileInfo: string)
>getPerms() Gets file permissions (SplFileInfo: int)
>getRealPath() Gets absolute path to file (SplFileInfo: string)
>getSize() Gets file size (SplFileInfo: int)
>getType() Gets file type (SplFileInfo: string)
>isDir() Tells if the file is a directory (SplFileInfo: bool)
>isExecutable() Tells if the file is executable (SplFileInfo: bool)
>isFile() Tells if the object references a regular file (SplFileInfo: bool)
>isLink() Tells if the file is a link (SplFileInfo: bool)
>isReadable() Tells if file is readable (SplFileInfo: bool)
>isWritable() Tells if the entry is writable (SplFileInfo: bool)
>openFile([string open_mode, [bool use_include_path, [resource context]]]) Gets an SplFileObject object for the file (SplFileInfo: SplFileObject)
>setFileClass([string class_name]) Sets the class name used with SplFileInfo::openFile (SplFileInfo: null)
>setInfoClass([string class_name]) Sets the class used with getFileInfo and getPathInfo (SplFileInfo: null)
>__toString() Returns the path to the file as a string (SplFileInfo: null)
SplFileObject(string filename, [string open_mode, [bool use_include_path, [resource context]]]) Construct a new file object. (new)
>current() Retrieve current line of file (SplFileObject: string|array)
>eof() Reached end of file (SplFileObject: boolean)
>fflush() Flushes the output to the file (SplFileObject: boolean)
>fgetc() Gets character from file (SplFileObject: string)
>fgetcsv([string delimiter, [string enclosure, [string escape]]]) Gets line from file and parse as CSV fields (SplFileObject: array)
>fgets() Gets line from file (SplFileObject: string)
>fgetss([string allowable_tags]) Gets line from file and strip HTML tags (SplFileObject: string)
>flock(int operation, [int &wouldblock]) Portable file locking (SplFileObject: bool)
>fpassthru() Output all remaining data on a file pointer (SplFileObject: int)
>fscanf(string format, [mixed &...]) Parses input from file according to a format (SplFileObject: mixed)
>fseek(int offset, [int whence]) Seek to a position (SplFileObject: int)
>fstat() Gets information about the file (SplFileObject: array)
>ftell() Return current file position (SplFileObject: int)
>ftruncate(int size) Truncates the file to a given length (SplFileObject: bool)
>fwrite(string str, [int length]) Write to file (SplFileObject: int)
>getChildren() No purpose (SplFileObject: null)
>getCsvControl() Get the delimiter and enclosure character for CSV (SplFileObject: array)
SplFileObject::getCurrentLine() Alias of SplFileObject::fgets
>getFlags() Gets flags for the SplFileObject (SplFileObject: int)
>getMaxLineLen() Get maximum line length (SplFileObject: int)
>hasChildren() SplFileObject does not have children (SplFileObject: bool)
>key() Get line number (SplFileObject: int)
>next() Read next line (SplFileObject: null)
>rewind() Rewind the file to the first line (SplFileObject: null)
>seek(int line_pos) Seek to specified line (SplFileObject: null)
>setCsvControl([string delimiter, [string enclosure, [string escape]]]) Set the delimiter and enclosure character for CSV (SplFileObject: null)
>setFlags(int flags) Sets flags for the SplFileObject (SplFileObject: null)
>setMaxLineLen(int max_len) Set maximum line length (SplFileObject: null)
SplFileObject::__toString() Alias of SplFileObject::current
>valid() Not at EOF (SplFileObject: bool)
SplFixedArray(int size) Constructs a new fixed array (new)
>count() Returns the size of the array (SplFixedArray: int)
>current() Return current array entry (SplFixedArray: mixed)
>fromArray(array array, [boolean save_indexes]) Import a PHP array in a SplFixedArray instance (SplFixedArray: SplFixedArray)
>getSize() Gets the size of the array (SplFixedArray: int)
>key() Return current array index (SplFixedArray: int)
>next() Move to next entry (SplFixedArray: null)
>offsetExists(int index) Returns whether the requested index exists (SplFixedArray: bool)
>offsetGet(int index) Returns the value at the specified index (SplFixedArray: mixed)
>offsetSet(int index, mixed newval) Sets a new value at a specified index (SplFixedArray: null)
>offsetUnset(int index) Unsets the value at the specified $index (SplFixedArray: null)
>rewind() Rewind iterator back to the start (SplFixedArray: null)
>setSize(int size) Change the size of an array (SplFixedArray: int)
>toArray() Returns a PHP array from the fixed array (SplFixedArray: array)
>valid() Check whether the array contains more elements (SplFixedArray: bool)
>compare(mixed value1, mixed value2) Compare elements in order to place them correctly in the heap while sifting up. (SplHeap: int)
SplHeap() Constructs a new empty heap (new)
>count() Counts the number of elements in the heap. (SplHeap: int)
>current() Return current node pointed by the iterator (SplHeap: mixed)
>extract() Extracts a node from top of the heap and sift up. (SplHeap: mixed)
>insert(mixed value) Inserts an element in the heap by sifting it up. (SplHeap: null)
>isEmpty() Checks whether the heap is empty. (SplHeap: bool)
>key() Return current node index (SplHeap: mixed)
>next() Move to the next node (SplHeap: null)
>recoverFromCorruption() Recover from the corrupted state and allow further actions on the heap. (SplHeap: null)
>rewind() Rewind iterator back to the start (no-op) (SplHeap: null)
>top() Peaks at the node from the top of the heap (SplHeap: mixed)
>valid() Check whether the heap contains more nodes (SplHeap: bool)
>compare(mixed value1, mixed value2) Compare elements in order to place them correctly in the heap while sifting up. (SplMaxHeap: null)
>compare(mixed value1, mixed value2) Compare elements in order to place them correctly in the heap while sifting up. (SplMinHeap: null)
>addAll(SplObjectStorage storage) Adds all objects from another storage (SplObjectStorage: null)
>attach(object object, [mixed data]) Adds an object in the storage (SplObjectStorage: null)
>contains(object object) Checks if the storage contains a specific object (SplObjectStorage: boolean)
>count() Returns the number of objects in the storage (SplObjectStorage: int)
>current() Returns the current storage entry (SplObjectStorage: object)
>detach(object object) Removes an object from the storage (SplObjectStorage: null)
>getInfo() Returns the data associated with the current iterator entry (SplObjectStorage: mixed)
>key() Returns the index at which the iterator currently is (SplObjectStorage: int)
>next() Move to the next entry (SplObjectStorage: null)
>offsetExists(object object) Checks whether an object exists in the storage (SplObjectStorage: boolean)
>offsetGet(object object) Returns the data associated with an object (SplObjectStorage: mixed)
>offsetSet(object object, mixed info) Associates data to an object in the storage (SplObjectStorage: null)
>offsetUnset(object object) Removes an object from the storage (SplObjectStorage: null)
>removeAll(SplObjectStorage storage) Removes objects contained in another storage from the current storage (SplObjectStorage: null)
>rewind() Rewind the iterator to the first storage element (SplObjectStorage: null)
>serialize() Serializes the storage (SplObjectStorage: string)
>setInfo(mixed data) Sets the data associated with the current iterator entry (SplObjectStorage: null)
>unserialize(string serialized) Unserializes a storage from its string representation (SplObjectStorage: null)
>valid() Returns if the current iterator entry is valid (SplObjectStorage: boolean)
>compare(mixed priority1, mixed priority2) Compare priorities in order to place elements correctly in the heap while sifting up. (SplPriorityQueue: null)
SplPriorityQueue() Constructs a new empty queue (new)
>count() Counts the number of elements in the queue. (SplPriorityQueue: int)
>current() Return current node pointed by the iterator (SplPriorityQueue: mixed)
>extract() Extracts a node from top of the heap and sift up. (SplPriorityQueue: mixed)
>insert(mixed value, mixed priority) Inserts an element in the queue by sifting it up. (SplPriorityQueue: null)
>isEmpty() Checks whether the queue is empty. (SplPriorityQueue: bool)
>key() Return current node index (SplPriorityQueue: mixed)
>next() Move to the next node (SplPriorityQueue: null)
>recoverFromCorruption() Recover from the corrupted state and allow further actions on the queue. (SplPriorityQueue: null)
>rewind() Rewind iterator back to the start (no-op) (SplPriorityQueue: null)
>setExtractFlags(int flags) Sets the mode of extraction (SplPriorityQueue: null)
>top() Peaks at the node from the top of the queue (SplPriorityQueue: mixed)
>valid() Check whether the queue contains more nodes (SplPriorityQueue: bool)
SplQueue() Constructs a new queue implemented using a doubly linked list (new)
>dequeue() Dequeues a node from the queue (SplQueue: mixed)
>enqueue(mixed value) Adds an element to the queue. (SplQueue: null)
>setIteratorMode(int mode) Sets the mode of iteration (SplQueue: null)
SplStack() Constructs a new stack implemented using a doubly linked list (new)
>setIteratorMode(int mode) Sets the mode of iteration (SplStack: null)
SplTempFileObject([integer max_memory]) Construct a new temporary file object (new)
SplBool() Constructs a bool object type (new)
SplEnum() Constructs an enumeger object type (new)
SplFloat(float input) Constructs a float object type (new)
SplInt(integer input) Constructs an integer object type (new)
SplString(string input) Constructs a string object type (new)
calcul_hmac(string clent, string siretcode, string price, string reference, string validity, string taxation, string devise, string language) Obtain a hmac key (needs 8 arguments) (string)
calculhmac(string clent, string data) Obtain a hmac key (needs 2 arguments) (string)
nthmac(string clent, string data) Obtain a nthmac key (needs 2 arguments) (string)
nthmac(string clent, string data) Obtain the payment url (needs 2 arguments) (string)
sqlite_array_query(resource dbhandle, string query, [int result_type, [bool decode_binary]]) Execute a query against a given database and returns an array (array)
sqlite_array_query(string query, resource dbhandle, [int result_type, [bool decode_binary]]) Execute a query against a given database and returns an array (array)
>arrayQuery(string query, [int result_type, [bool decode_binary]]) Execute a query against a given database and returns an array (SQLiteDatabase: array)
sqlite_busy_timeout(resource dbhandle, int milliseconds) Set busy timeout duration, or disable busy handlers (null)
>busyTimeout(int milliseconds) Set busy timeout duration, or disable busy handlers (SQLiteDatabase: null)
sqlite_changes(resource dbhandle) Returns the number of rows that were changed by the most recent SQL statement (int)
>changes() Returns the number of rows that were changed by the most recent SQL statement (SQLiteDatabase: int)
sqlite_close(resource dbhandle) Closes an open SQLite database (null)
sqlite_column(resource result, mixed index_or_name, [bool decode_binary]) Fetches a column from the current row of a result set (mixed)
>column(mixed index_or_name, [bool decode_binary]) Fetches a column from the current row of a result set (SQLiteResult: mixed)
>column(mixed index_or_name, [bool decode_binary]) Fetches a column from the current row of a result set (SQLiteUnbuffered: mixed)
sqlite_create_aggregate(resource dbhandle, string function_name, callback step_func, callback finalize_func, [int num_args]) Register an aggregating UDF for use in SQL statements (null)
>createAggregate(string function_name, callback step_func, callback finalize_func, [int num_args]) Register an aggregating UDF for use in SQL statements (SQLiteDatabase: null)
sqlite_create_function(resource dbhandle, string function_name, callback callback, [int num_args]) Registers a "regular" User Defined Function for use in SQL statements (null)
>createFunction(string function_name, callback callback, [int num_args]) Registers a "regular" User Defined Function for use in SQL statements (SQLiteDatabase: null)
sqlite_current(resource result, [int result_type, [bool decode_binary]]) Fetches the current row from a result set as an array (array)
>current([int result_type, [bool decode_binary]]) Fetches the current row from a result set as an array (SQLiteResult: array)
>current([int result_type, [bool decode_binary]]) Fetches the current row from a result set as an array (SQLiteUnbuffered: array)
sqlite_error_string(int error_code) Returns the textual description of an error code (string)
sqlite_escape_string(string item) Escapes a string for use as a query parameter (string)
sqlite_exec(resource dbhandle, string query, [string &error_msg]) Executes a result-less query against a given database (bool)
sqlite_exec(string query, resource dbhandle) Executes a result-less query against a given database (bool)
>queryExec(string query, [string &error_msg]) Executes a result-less query against a given database (SQLiteDatabase: bool)
sqlite_factory(string filename, [int mode, [string &error_message]]) Opens a SQLite database and returns a SQLiteDatabase object (SQLiteDatabase)
sqlite_fetch_all(resource result, [int result_type, [bool decode_binary]]) Fetches all rows from a result set as an array of arrays (array)
>fetchAll([int result_type, [bool decode_binary]]) Fetches all rows from a result set as an array of arrays (SQLiteResult: array)
>fetchAll([int result_type, [bool decode_binary]]) Fetches all rows from a result set as an array of arrays (SQLiteUnbuffered: array)
sqlite_fetch_array(resource result, [int result_type, [bool decode_binary]]) Fetches the next row from a result set as an array (array)
>fetch([int result_type, [bool decode_binary]]) Fetches the next row from a result set as an array (SQLiteResult: array)
>fetch([int result_type, [bool decode_binary]]) Fetches the next row from a result set as an array (SQLiteUnbuffered: array)
sqlite_fetch_column_types(string table_name, resource dbhandle, [int result_type]) Return an array of column types from a particular table (array)
>fetchColumnTypes(string table_name, [int result_type]) Return an array of column types from a particular table (SQLiteDatabase: array)
sqlite_fetch_object(resource result, [string class_name, [array ctor_params, [bool decode_binary]]]) Fetches the next row from a result set as an object (object)
>fetchObject([string class_name, [array ctor_params, [bool decode_binary]]]) Fetches the next row from a result set as an object (SQLiteResult: object)
>fetchObject([string class_name, [array ctor_params, [bool decode_binary]]]) Fetches the next row from a result set as an object (SQLiteUnbuffered: object)
sqlite_fetch_single(resource result, [bool decode_binary]) Fetches the first column of a result set as a string (string)
>fetchSingle([bool decode_binary]) Fetches the first column of a result set as a string (SQLiteResult: string)
>fetchSingle([bool decode_binary]) Fetches the first column of a result set as a string (SQLiteUnbuffered: string)
sqlite_fetch_string() Alias of sqlite_fetch_single
sqlite_field_name(resource result, int field_index) Returns the name of a particular field (string)
>fieldName(int field_index) Returns the name of a particular field (SQLiteResult: string)
>fieldName(int field_index) Returns the name of a particular field (SQLiteUnbuffered: string)
sqlite_has_more(resource result) Finds whether or not more rows are available (bool)
sqlite_has_prev(resource result) Returns whether or not a previous row is available (bool)
>hasPrev() Returns whether or not a previous row is available (SQLiteResult: bool)
sqlite_key(resource result) Returns the current row index (int)
>key() Returns the current row index (SQLiteResult: int)
sqlite_last_error(resource dbhandle) Returns the error code of the last error for a database (int)
>lastError() Returns the error code of the last error for a database (SQLiteDatabase: int)
sqlite_last_insert_rowid(resource dbhandle) Returns the rowid of the most recently inserted row (int)
>lastInsertRowid() Returns the rowid of the most recently inserted row (SQLiteDatabase: int)
sqlite_libencoding() Returns the encoding of the linked SQLite library (string)
sqlite_libversion() Returns the version of the linked SQLite library (string)
sqlite_next(resource result) Seek to the next row number (bool)
>next() Seek to the next row number (SQLiteResult: bool)
>next() Seek to the next row number (SQLiteUnbuffered: bool)
sqlite_num_fields(resource result) Returns the number of fields in a result set (int)
>numFields() Returns the number of fields in a result set (SQLiteResult: int)
>numFields() Returns the number of fields in a result set (SQLiteUnbuffered: int)
sqlite_num_rows(resource result) Returns the number of rows in a buffered result set (int)
>numRows() Returns the number of rows in a buffered result set (SQLiteResult: int)
sqlite_open(string filename, [int mode, [string &error_message]]) Opens a SQLite database and create the database if it does not exist (resource)
SQLiteDatabase(string filename, [int mode, [string &error_message]]) Opens a SQLite database and create the database if it does not exist (new)
sqlite_popen(string filename, [int mode, [string &error_message]]) Opens a persistent handle to an SQLite database and create the database if it does not exist (resource)
sqlite_prev(resource result) Seek to the previous row number of a result set (bool)
>prev() Seek to the previous row number of a result set (SQLiteResult: bool)
sqlite_query(resource dbhandle, string query, [int result_type, [string &error_msg]]) Executes a query against a given database and returns a result handle (resource)
sqlite_query(string query, resource dbhandle, [int result_type, [string &error_msg]]) Executes a query against a given database and returns a result handle (resource)
>query(string query, [int result_type, [string &error_msg]]) Executes a query against a given database and returns a result handle (SQLiteDatabase: SQLiteResult)
sqlite_rewind(resource result) Seek to the first row number (bool)
>rewind() Seek to the first row number (SQLiteResult: bool)
sqlite_seek(resource result, int rownum) Seek to a particular row number of a buffered result set (bool)
>seek(int rownum) Seek to a particular row number of a buffered result set (SQLiteResult: bool)
sqlite_single_query(resource db, string query, [bool first_row_only, [bool decode_binary]]) Executes a query and returns either an array for one single column or the value of the first row (array)
>singleQuery(string query, [bool first_row_only, [bool decode_binary]]) Executes a query and returns either an array for one single column or the value of the first row (SQLiteDatabase: array)
sqlite_udf_decode_binary(string data) Decode binary data passed as parameters to an UDF (string)
sqlite_udf_encode_binary(string data) Encode binary data before returning it from an UDF (string)
sqlite_unbuffered_query(resource dbhandle, string query, [int result_type, [string &error_msg]]) Execute a query that does not prefetch and buffer all data (resource)
sqlite_unbuffered_query(string query, resource dbhandle, [int result_type, [string &error_msg]]) Execute a query that does not prefetch and buffer all data (resource)
>unbufferedQuery(string query, [int result_type, [string &error_msg]]) Execute a query that does not prefetch and buffer all data (SQLiteDatabase: SQLiteUnbuffered)
sqlite_valid(resource result) Returns whether more rows are available (bool)
>valid() Returns whether more rows are available (SQLiteResult: bool)
>valid() Returns whether more rows are available (SQLiteUnbuffered: bool)
>changes() Returns the number of database rows that were changed (or inserted or deleted) by the most recent SQL statement (SQLite3: int)
>close() Closes the database connection (SQLite3: bool)
SQLite3(string filename, [int flags, [string encryption_key]]) Instantiates an SQLite3 object and opens an SQLite 3 database (new)
>createAggregate(string name, mixed step_callback, mixed final_callback, [int argument_count]) Registers a PHP function for use as an SQL aggregate function (SQLite3: bool)
>createFunction(string name, mixed callback, [int argument_count]) Registers a PHP function for use as an SQL scalar function (SQLite3: bool)
>escapeString(string value) Returns a string that has been properly escaped (SQLite3: string)
>exec(string query) Executes a result-less query against a given database (SQLite3: bool)
>lastErrorCode() Returns the numeric result code of the most recent failed SQLite request (SQLite3: int)
>lastErrorMsg() Returns English text describing the most recent failed SQLite request (SQLite3: string)
>lastInsertRowID() Returns the row ID of the most recent INSERT into the database (SQLite3: int)
>loadExtension(string shared_library) Attempts to load an SQLite extension library (SQLite3: bool)
>open(string filename, [int flags, [string encryption_key]]) Opens an SQLite database (SQLite3: bool)
>prepare(string query) Prepares an SQL statement for execution (SQLite3: SQLite3Stmt)
>query(string query) Executes an SQL query (SQLite3: SQLite3Result)
>querySingle(string query, [bool entire_row]) Executes a query and returns a single result (SQLite3: mixed)
>version() Returns the SQLite3 library version as a string constant and as a number (SQLite3: array)
>columnName(int column_number) Returns the name of the nth column (SQLite3Result: string)
>columnType(int column_number) Returns the type of the nth column (SQLite3Result: int)
>fetchArray([int mode]) Fetches a result row as an associative or numerically indexed array or both (SQLite3Result: array)
>finalize() Closes the result set (SQLite3Result: bool)
>numColumns() Returns the number of columns in the result set (SQLite3Result: int)
>reset() Resets the result set back to the first row (SQLite3Result: bool)
>bindParam(string sql_param, mixed &param, [int type]) Binds a parameter to a statement variable (SQLite3Stmt: bool)
>bindValue(string sql_param, mixed value, [int type]) Binds the value of a parameter to a statement variable (SQLite3Stmt: bool)
>clear() Clears all current bound parameters (SQLite3Stmt: bool)
>close() Closes the prepared statement (SQLite3Stmt: bool)
>execute() Executes a prepared statement and returns a result set object (SQLite3Stmt: SQLite3Result)
>paramCount() Returns the number of parameters within the prepared statement (SQLite3Stmt: int)
>reset() Resets the prepared statement (SQLite3Stmt: bool)
ssh2_auth_hostbased_file(resource session, string username, string hostname, string pubkeyfile, string privkeyfile, [string passphrase, [string local_username]]) Authenticate using a public hostkey (bool)
ssh2_auth_none(resource session, string username) Authenticate as "none" (mixed)
ssh2_auth_password(resource session, string username, string password) Authenticate over SSH using a plain password (bool)
ssh2_auth_pubkey_file(resource session, string username, string pubkeyfile, string privkeyfile, [string passphrase]) Authenticate using a public key (bool)
ssh2_connect(string host, [int port, [array methods, [array callbacks]]]) Connect to an SSH server (resource)
ssh2_exec(resource session, string command, [string pty, [array env, [int width, [int height, [int width_height_type]]]]]) Execute a command on a remote server (resource)
ssh2_fetch_stream(resource channel, int streamid) Fetch an extended data stream (resource)
ssh2_fingerprint(resource session, [int flags]) Retrieve fingerprint of remote server (string)
ssh2_methods_negotiated(resource session) Return list of negotiated methods (array)
ssh2_publickey_add(resource pkey, string algoname, string blob, [bool overwrite, [array attributes]]) Add an authorized publickey (bool)
ssh2_publickey_init(resource session) Initialize Publickey subsystem (resource)
ssh2_publickey_list(resource pkey) List currently authorized publickeys (array)
ssh2_publickey_remove(resource pkey, string algoname, string blob) Remove an authorized publickey (bool)
ssh2_scp_recv(resource session, string remote_file, string local_file) Request a file via SCP (bool)
ssh2_scp_send(resource session, string local_file, string remote_file, [int create_mode]) Send a file via SCP (bool)
ssh2_sftp_lstat(resource sftp, string path) Stat a symbolic link (array)
ssh2_sftp_mkdir(resource sftp, string dirname, [int mode, [bool recursive]]) Create a directory (bool)
ssh2_sftp_readlink(resource sftp, string link) Return the target of a symbolic link (string)
ssh2_sftp_realpath(resource sftp, string filename) Resolve the realpath of a provided path string (string)
ssh2_sftp_rename(resource sftp, string from, string to) Rename a remote file (bool)
ssh2_sftp_rmdir(resource sftp, string dirname) Remove a directory (bool)
ssh2_sftp_stat(resource sftp, string path) Stat a file on a remote filesystem (array)
ssh2_sftp_symlink(resource sftp, string target, string link) Create a symlink (bool)
ssh2_sftp_unlink(resource sftp, string filename) Delete a file (bool)
ssh2_sftp(resource session) Initialize SFTP subsystem (resource)
ssh2_shell(resource session, [string term_type, [array env, [int width, [int height, [int width_height_type]]]]]) Request an interactive shell (resource)
ssh2_tunnel(resource session, string host, int port) Open a tunnel through a remote server (resource)
stats_absolute_deviation(array a) Returns the absolute deviation of an array of values (float)
stats_cdf_beta(float par1, float par2, float par3, int which) CDF function for BETA Distribution. Calculates any one parameter of the beta distribution given values for the others. (float)
stats_cdf_binomial(float par1, float par2, float par3, int which) Calculates any one parameter of the binomial distribution given values for the others. (float)
stats_cdf_cauchy(float par1, float par2, float par3, int which) Not documented (float)
stats_cdf_chisquare(float par1, float par2, int which) Calculates any one parameter of the chi-square distribution given values for the others. (float)
stats_cdf_exponential(float par1, float par2, int which) Not documented (float)
stats_cdf_f(float par1, float par2, float par3, int which) Calculates any one parameter of the F distribution given values for the others. (float)
stats_cdf_gamma(float par1, float par2, float par3, int which) Calculates any one parameter of the gamma distribution given values for the others. (float)
stats_cdf_laplace(float par1, float par2, float par3, int which) Not documented (float)
stats_cdf_logistic(float par1, float par2, float par3, int which) Not documented (float)
stats_cdf_negative_binomial(float par1, float par2, float par3, int which) Calculates any one parameter of the negative binomial distribution given values for the others. (float)
stats_cdf_noncentral_chisquare(float par1, float par2, float par3, int which) Calculates any one parameter of the non-central chi-square distribution given values for the others. (float)
stats_cdf_noncentral_f(float par1, float par2, float par3, float par4, int which) Calculates any one parameter of the Non-central F distribution given values for the others. (float)
stats_cdf_poisson(float par1, float par2, int which) Calculates any one parameter of the Poisson distribution given values for the others. (float)
stats_cdf_t(float par1, float par2, int which) Calculates any one parameter of the T distribution given values for the others. (float)
stats_cdf_uniform(float par1, float par2, float par3, int which) Not documented (float)
stats_cdf_weibull(float par1, float par2, float par3, int which) Not documented (float)
stats_covariance(array a, array b) Computes the covariance of two data sets (float)
stats_den_uniform(float x, float a, float b) Not documented (float)
stats_dens_beta(float x, float a, float b) Not documented (float)
stats_dens_cauchy(float x, float ave, float stdev) Not documented (float)
stats_dens_chisquare(float x, float dfr) Not documented (float)
stats_dens_exponential(float x, float scale) Not documented (float)
stats_dens_f(float x, float dfr1, float dfr2)  (float)
stats_dens_gamma(float x, float shape, float scale) Not documented (float)
stats_dens_laplace(float x, float ave, float stdev) Not documented (float)
stats_dens_logistic(float x, float ave, float stdev) Not documented (float)
stats_dens_negative_binomial(float x, float n, float pi) Not documented (float)
stats_dens_normal(float x, float ave, float stdev) Not documented (float)
stats_dens_pmf_binomial(float x, float n, float pi) Not documented (float)
stats_dens_pmf_hypergeometric(float n1, float n2, float N1, float N2)  (float)
stats_dens_pmf_poisson(float x, float lb) Not documented (float)
stats_dens_t(float x, float dfr) Not documented (float)
stats_dens_weibull(float x, float a, float b) Not documented (float)
stats_harmonic_mean(array a) Returns the harmonic mean of an array of values (number)
stats_kurtosis(array a) Computes the kurtosis of the data in the array (float)
stats_rand_gen_beta(float a, float b) Generates beta random deviate (float)
stats_rand_gen_chisquare(float df) Generates random deviate from the distribution of a chisquare with "df" degrees of freedom random variable. (float)
stats_rand_gen_exponential(float av) Generates a single random deviate from an exponential distribution with mean "av" (float)
stats_rand_gen_f(float dfn, float dfd) Generates a random deviate (float)
stats_rand_gen_funiform(float low, float high) Generates uniform float between low (exclusive) and high (exclusive) (float)
stats_rand_gen_gamma(float a, float r) Generates random deviates from a gamma distribution (float)
stats_rand_gen_ibinomial_negative(int n, float p) Generates a single random deviate from a negative binomial distribution. Arguments : n - the number of trials in the negative binomial distribution from which a random deviate is to be generated (n > 0), p - the probability of an event (0 < p < 1)). (int)
stats_rand_gen_ibinomial(int n, float pp) Generates a single random deviate from a binomial distribution whose number of trials is "n" (n >= 0) and whose probability of an event in each trial is "pp" ([0;1]). Method : algorithm BTPE (int)
stats_rand_gen_int() Generates random integer between 1 and 2147483562 (int)
stats_rand_gen_ipoisson(float mu) Generates a single random deviate from a Poisson distribution with mean "mu" (mu >= 0.0). (int)
stats_rand_gen_iuniform(int low, int high) Generates integer uniformly distributed between LOW (inclusive) and HIGH (inclusive) (int)
stats_rand_gen_noncenral_chisquare(float df, float xnonc) Generates random deviate from the distribution of a noncentral chisquare with "df" degrees of freedom and noncentrality parameter "xnonc". d must be >= 1.0, xnonc must >= 0.0 (float)
stats_rand_gen_noncentral_f(float dfn, float dfd, float xnonc) Generates a random deviate from the noncentral F (variance ratio) distribution with "dfn" degrees of freedom in the numerator, and "dfd" degrees of freedom in the denominator, and noncentrality parameter "xnonc". Method : directly generates ratio of noncentral numerator chisquare variate to central denominator chisquare variate. (float)
stats_rand_gen_noncentral_t(float df, float xnonc) Generates a single random deviate from a noncentral T distribution (float)
stats_rand_gen_normal(float av, float sd) Generates a single random deviate from a normal distribution with mean, av, and standard deviation, sd (sd >= 0). Method : Renames SNORM from TOMS as slightly modified by BWB to use RANF instead of SUNIF. (float)
stats_rand_gen_t(float df) Generates a single random deviate from a T distribution (float)
stats_rand_get_seeds() Not documented (array)
stats_rand_phrase_to_seeds(string phrase) generate two seeds for the RGN random number generator (array)
stats_rand_ranf() Returns a random floating point number from a uniform distribution over 0 - 1 (endpoints of this interval are not returned) using the current generator (float)
stats_rand_setall(int iseed1, int iseed2) Not documented (null)
stats_skew(array a) Computes the skewness of the data in the array (float)
stats_standard_deviation(array a, [bool sample]) Returns the standard deviation (float)
stats_stat_binomial_coef(int x, int n) Not documented (float)
stats_stat_correlation(array arr1, array arr2) Not documented (float)
stats_stat_gennch(int n) Not documented (float)
stats_stat_independent_t(array arr1, array arr2) Not documented (float)
stats_stat_innerproduct(array arr1, array arr2)  (float)
stats_stat_noncentral_t(float par1, float par2, float par3, int which) Calculates any one parameter of the noncentral t distribution give values for the others. (float)
stats_stat_paired_t(array arr1, array arr2) Not documented (float)
stats_stat_percentile(float df, float xnonc) Not documented (float)
stats_stat_powersum(array arr, float power) Not documented (float)
stats_variance(array a, [bool sample]) Returns the population variance (float)
set_socket_blocking() Alias of stream_set_blocking
stream_bucket_append(resource brigade, resource bucket) Append bucket to brigade (null)
stream_bucket_make_writeable(resource brigade) Return a bucket object from the brigade for operating on (object)
stream_bucket_new(resource stream, string buffer) Create a new bucket for use on the current stream (object)
stream_bucket_prepend(resource brigade, resource bucket) Prepend bucket to brigade (null)
stream_context_create([array options, [array params]]) Create a streams context (resource)
stream_context_get_default([array options]) Retreive the default streams context (resource)
stream_context_get_options(resource stream_or_context) Retrieve options for a stream/wrapper/context (array)
stream_context_get_params(resource stream_or_context) Retrieves parameters from a context (array)
stream_context_set_default(array options) Set the default streams context (resource)
stream_context_set_option(resource stream_or_context, string wrapper, string option, mixed value) Sets an option for a stream/wrapper/context (bool)
stream_context_set_option(resource stream_or_context, array options) Sets an option for a stream/wrapper/context (bool)
stream_context_set_params(resource stream_or_context, array params) Set parameters for a stream/wrapper/context (bool)
stream_copy_to_stream(resource source, resource dest, [int maxlength, [int offset]]) Copies data from one stream to another (int)
stream_filter_append(resource stream, string filtername, [int read_write, [mixed params]]) Attach a filter to a stream (resource)
stream_filter_prepend(resource stream, string filtername, [int read_write, [mixed params]]) Attach a filter to a stream (resource)
stream_filter_register(string filtername, string classname) Register a user defined stream filter (bool)
stream_filter_remove(resource stream_filter) Remove a filter from a stream (bool)
stream_get_contents(resource handle, [int maxlength, [int offset]]) Reads remainder of a stream into a string (string)
stream_get_filters() Retrieve list of registered filters (array)
stream_get_line(resource handle, int length, [string ending]) Gets line from stream resource up to a given delimiter (string)
stream_get_meta_data(resource stream) Retrieves header/meta data from streams/file pointers (array)
stream_get_transports() Retrieve list of registered socket transports (array)
stream_get_wrappers() Retrieve list of registered streams (array)
stream_is_local(mixed stream_or_url) Checks if a stream is a local stream (bool)
stream_notification_callback(int notification_code, int severity, string message, int message_code, int bytes_transferred, int bytes_max) A callback function for the notification context paramater (null)
stream_register_wrapper() Alias of stream_wrapper_register
stream_select(array &read, array &write, array &except, int tv_sec, [int tv_usec]) Runs the equivalent of the select() system call on the given arrays of streams with a timeout specified by tv_sec and tv_usec (int)
stream_set_blocking(resource stream, int mode) Set blocking/non-blocking mode on a stream (bool)
stream_set_timeout(resource stream, int seconds, [int microseconds]) Set timeout period on a stream (bool)
stream_set_write_buffer(resource stream, int buffer) Sets file buffering on the given stream (int)
stream_socket_accept(resource server_socket, [float timeout, [string &peername]]) Accept a connection on a socket created by stream_socket_server (resource)
stream_socket_client(string remote_socket, [int &errno, [string &errstr, [float timeout, [int flags, [resource context]]]]]) Open Internet or Unix domain socket connection (resource)
stream_socket_enable_crypto(resource stream, bool enable, [int crypto_type, [resource session_stream]]) Turns encryption on/off on an already connected socket (mixed)
stream_socket_get_name(resource handle, bool want_peer) Retrieve the name of the local or remote sockets (string)
stream_socket_pair(int domain, int type, int protocol) Creates a pair of connected, indistinguishable socket streams (array)
stream_socket_recvfrom(resource socket, int length, [int flags, [string &address]]) Receives data from a socket, connected or not (string)
stream_socket_sendto(resource socket, string data, [int flags, [string address]]) Sends a message to a socket, whether it is connected or not (int)
stream_socket_server(string local_socket, [int &errno, [string &errstr, [int flags, [resource context]]]]) Create an Internet or Unix domain server socket (resource)
stream_socket_shutdown(resource stream, int how) Shutdown a full-duplex connection (bool)
stream_supports_lock(resource stream) Tells whether the stream supports locking. (bool)
stream_wrapper_register(string protocol, string classname, [int flags]) Register a URL wrapper implemented as a PHP class (bool)
stream_wrapper_restore(string protocol) Restores a previously unregistered built-in wrapper (bool)
stream_wrapper_unregister(string protocol) Unregister a URL wrapper (bool)
streamWrapper() Constructs a new stream wrapper (new)
>dir_closedir() Close directory handle (streamWrapper: bool)
>dir_opendir(string path, int options) Open directory handle (streamWrapper: bool)
>dir_readdir() Read entry from directory handle (streamWrapper: string)
>dir_rewinddir() Rewind directory handle (streamWrapper: bool)
>mkdir(string path, int mode, int options) Create a directory (streamWrapper: bool)
>rename(string path_from, string path_to) Renames a file or directory (streamWrapper: bool)
>rmdir(string path, int options) Removes a directory (streamWrapper: bool)
>stream_cast(int cast_as) Retrieve the underlaying resource (streamWrapper: resource)
>stream_close() Close an resource (streamWrapper: null)
>stream_eof() Tests for end-of-file on a file pointer (streamWrapper: bool)
>stream_flush() Flushes the output (streamWrapper: bool)
>stream_lock(mode operation) Advisory file locking (streamWrapper: bool)
>stream_open(string path, string mode, int options, string &opened_path) Opens file or URL (streamWrapper: bool)
>stream_read(int count) Read from stream (streamWrapper: string)
>stream_seek(int offset, int whence) Seeks to specific location in a stream (streamWrapper: bool)
>stream_set_option(int option, int arg1, int arg2) Change stream options (streamWrapper: bool)
>stream_stat() Retrieve information about a file resource (streamWrapper: array)
>stream_tell() Retrieve the current position of a stream (streamWrapper: int)
>stream_write(string data) Write to stream (streamWrapper: int)
>unlink(string path) Delete a file (streamWrapper: bool)
>url_stat(string path, int flags) Retrieve information about a file (streamWrapper: array)
addcslashes(string str, string charlist) Quote string with slashes in a C style (string)
addslashes(string str) Quote string with slashes (string)
bin2hex(string str) Convert binary data into hexadecimal representation (string)
chop() Alias of rtrim
chr(int ascii) Return a specific character (string)
chunk_split(string body, [int chunklen, [string end]]) Split a string into smaller chunks (string)
convert_cyr_string(string str, string from, string to) Convert from one Cyrillic character set to another (string)
convert_uudecode(string data) Decode a uuencoded string (string)
convert_uuencode(string data) Uuencode a string (string)
count_chars(string string, [int mode]) Return information about characters used in a string (mixed)
crc32(string str) Calculates the crc32 polynomial of a string (int)
crypt(string str, [string salt]) One-way string encryption (hashing) (string)
echo(string arg1, [string ...]) Output one or more strings (null)
explode(string delimiter, string string, [int limit]) Split a string by string (array)
fprintf(resource handle, string format, [mixed args, [mixed ...]]) Write a formatted string to a stream (int)
get_html_translation_table([int table, [int quote_style]]) Returns the translation table used by htmlspecialchars and htmlentities (array)
hebrev(string hebrew_text, [int max_chars_per_line]) Convert logical Hebrew text to visual text (string)
hebrevc(string hebrew_text, [int max_chars_per_line]) Convert logical Hebrew text to visual text with newline conversion (string)
html_entity_decode(string string, [int quote_style, [string charset]]) Convert all HTML entities to their applicable characters (string)
htmlentities(string string, [int quote_style, [string charset, [bool double_encode]]]) Convert all applicable characters to HTML entities (string)
htmlspecialchars_decode(string string, [int quote_style]) Convert special HTML entities back to characters (string)
htmlspecialchars(string string, [int quote_style, [string charset, [bool double_encode]]]) Convert special characters to HTML entities (string)
implode(string glue, array pieces) Join array elements with a string (string)
implode(array pieces) Join array elements with a string (string)
join() Alias of implode
lcfirst(string str) Make a string's first character lowercase (string)
levenshtein(string str1, string str2) Calculate Levenshtein distance between two strings (int)
levenshtein(string str1, string str2, int cost_ins, int cost_rep, int cost_del) Calculate Levenshtein distance between two strings (int)
localeconv() Get numeric formatting information (array)
ltrim(string str, [string charlist]) Strip whitespace (or other characters) from the beginning of a string (string)
md5_file(string filename, [bool raw_output]) Calculates the md5 hash of a given file (string)
md5(string str, [bool raw_output]) Calculate the md5 hash of a string (string)
metaphone(string str, [int phones]) Calculate the metaphone key of a string (string)
money_format(string format, float number) Formats a number as a currency string (string)
nl_langinfo(int item) Query language and locale information (string)
nl2br(string string, [bool is_xhtml]) Inserts HTML line breaks before all newlines in a string (string)
number_format(float number, [int decimals]) Format a number with grouped thousands (string)
number_format(float number, int decimals, string dec_point, string thousands_sep) Format a number with grouped thousands (string)
ord(string string) Return ASCII value of character (int)
parse_str(string str, [array &arr]) Parses the string into variables (null)
print(string arg) Output a string (int)
printf(string format, [mixed args, [mixed ...]]) Output a formatted string (int)
quoted_printable_decode(string str) Convert a quoted-printable string to an 8 bit string (string)
quoted_printable_encode(string str) Convert a 8 bit string to a quoted-printable string (string)
quotemeta(string str) Quote meta characters (string)
rtrim(string str, [string charlist]) Strip whitespace (or other characters) from the end of a string (string)
setlocale(int category, string locale, [string ...]) Set locale information (string)
setlocale(int category, array locale) Set locale information (string)
sha1_file(string filename, [bool raw_output]) Calculate the sha1 hash of a file (string)
sha1(string str, [bool raw_output]) Calculate the sha1 hash of a string (string)
similar_text(string first, string second, [float &percent]) Calculate the similarity between two strings (int)
soundex(string str) Calculate the soundex key of a string (string)
sprintf(string format, [mixed args, [mixed ...]]) Return a formatted string (string)
sscanf(string str, string format, [mixed &...]) Parses input from a string according to a format (mixed)
str_getcsv(string input, [string delimiter, [string enclosure, [string escape]]]) Parse a CSV string into an array (array)
str_ireplace(mixed search, mixed replace, mixed subject, [int &count]) Case-insensitive version of str_replace. (mixed)
str_pad(string input, int pad_length, [string pad_string, [int pad_type]]) Pad a string to a certain length with another string (string)
str_repeat(string input, int multiplier) Repeat a string (string)
str_replace(mixed search, mixed replace, mixed subject, [int &count]) Replace all occurrences of the search string with the replacement string (mixed)
str_rot13(string str) Perform the rot13 transform on a string (string)
str_shuffle(string str) Randomly shuffles a string (string)
str_split(string string, [int split_length]) Convert a string to an array (array)
str_word_count(string string, [int format, [string charlist]]) Return information about words used in a string (mixed)
strcasecmp(string str1, string str2) Binary safe case-insensitive string comparison (int)
strchr() Alias of strstr
strcmp(string str1, string str2) Binary safe string comparison (int)
strcoll(string str1, string str2) Locale based string comparison (int)
strcspn(string str1, string str2, [int start, [int length]]) Find length of initial segment not matching mask (int)
strip_tags(string str, [string allowable_tags]) Strip HTML and PHP tags from a string (string)
stripcslashes(string str) Un-quote string quoted with addcslashes (string)
stripos(string haystack, string needle, [int offset]) Find position of first occurrence of a case-insensitive string (int)
stripslashes(string str) Un-quotes a quoted string (string)
stristr(string haystack, mixed needle, [bool before_needle]) Case-insensitive strstr (string)
strlen(string string) Get string length (int)
strnatcasecmp(string str1, string str2) Case insensitive string comparisons using a "natural order" algorithm (int)
strnatcmp(string str1, string str2) String comparisons using a "natural order" algorithm (int)
strncasecmp(string str1, string str2, int len) Binary safe case-insensitive string comparison of the first n characters (int)
strncmp(string str1, string str2, int len) Binary safe string comparison of the first n characters (int)
strpbrk(string haystack, string char_list) Search a string for any of a set of characters (string)
strpos(string haystack, mixed needle, [int offset]) Find position of first occurrence of a string (int)
strrchr(string haystack, mixed needle) Find the last occurrence of a character in a string (string)
strrev(string string) Reverse a string (string)
strripos(string haystack, string needle, [int offset]) Find position of last occurrence of a case-insensitive string in a string (int)
strrpos(string haystack, string needle, [int offset]) Find position of last occurrence of a char in a string (int)
strspn(string str1, string str2, [int start, [int length]]) Find length of initial segment matching mask (int)
strstr(string haystack, mixed needle, [bool before_needle]) Find first occurrence of a string (string)
strtok(string str, string token) Tokenize string (string)
strtok(string token) Tokenize string (string)
strtolower(string str) Make a string lowercase (string)
strtoupper(string string) Make a string uppercase (string)
strtr(string str, string from, string to) Translate certain characters (string)
strtr(string str, array replace_pairs) Translate certain characters (string)
substr_compare(string main_str, string str, int offset, [int length, [bool case_insensitivity]]) Binary safe comparison of 2 strings from an offset, up to length characters (int)
substr_count(string haystack, string needle, [int offset, [int length]]) Count the number of substring occurrences (int)
substr_replace(mixed string, string replacement, int start, [int length]) Replace text within a portion of a string (mixed)
substr(string string, int start, [int length]) Return part of a string (string)
trim(string str, [string charlist]) Strip whitespace (or other characters) from the beginning and end of a string (string)
ucfirst(string str) Make a string's first character uppercase (string)
ucwords(string str) Uppercase the first character of each word in a string (string)
vfprintf(resource handle, string format, array args) Write a formatted string to a stream (int)
vprintf(string format, array args) Output a formatted string (int)
vsprintf(string format, array args) Return a formatted string (string)
wordwrap(string str, [int width, [string break, [bool cut]]]) Wraps a string to a given number of characters (string)
svn_add(string path, [bool recursive, [bool force]]) Schedules the addition of an item in a working directory (bool)
svn_auth_get_parameter(string key) Retrieves authentication parameter (string)
svn_auth_set_parameter(string key, string value) Sets an authentication parameter (null)
svn_blame(string repository_url, [int revision_no]) Get the SVN blame for a file (array)
svn_cat(string repos_url, [int revision_no]) Returns the contents of a file in a repository (string)
svn_checkout(string repos, string targetpath, [int revision, [int flags]]) Checks out a working copy from the repository (bool)
svn_cleanup(string workingdir) Recursively cleanup a working copy directory, finishing incomplete operations and removing locks (bool)
svn_client_version() Returns the version of the SVN client libraries (string)
svn_commit(string log, array targets, [bool dontrecurse]) Sends changes from the local working copy to the repository (array)
svn_diff(string path1, int rev1, string path2, int rev2) Recursively diffs two paths (array)
svn_export(string frompath, string topath, [bool working_copy]) Export the contents of a SVN directory (bool)
svn_fs_abort_txn(resource txn) Abort a transaction, returns true if everything is okay, false otherwise (bool)
svn_fs_apply_text(resource root, string path) Creates and returns a stream that will be used to replace (resource)
svn_fs_begin_txn2(resource repos, int rev) Create a new transaction (resource)
svn_fs_change_node_prop(resource root, string path, string name, string value) Return true if everything is ok, false otherwise (bool)
svn_fs_check_path(resource fsroot, string path) Determines what kind of item lives at path in a given repository fsroot (int)
svn_fs_contents_changed(resource root1, string path1, resource root2, string path2) Return true if content is different, false otherwise (bool)
svn_fs_copy(resource from_root, string from_path, resource to_root, string to_path) Copies a file or a directory, returns true if all is ok, false otherwise (bool)
svn_fs_delete(resource root, string path) Deletes a file or a directory, return true if all is ok, false otherwise (bool)
svn_fs_dir_entries(resource fsroot, string path) Enumerates the directory entries under path; returns a hash of dir names to file type (array)
svn_fs_file_contents(resource fsroot, string path) Returns a stream to access the contents of a file from a given version of the fs (resource)
svn_fs_file_length(resource fsroot, string path) Returns the length of a file from a given version of the fs (int)
svn_fs_is_dir(resource root, string path) Return true if the path points to a directory, false otherwise (bool)
svn_fs_is_file(resource root, string path) Return true if the path points to a file, false otherwise (bool)
svn_fs_make_dir(resource root, string path) Creates a new empty directory, returns true if all is ok, false otherwise (bool)
svn_fs_make_file(resource root, string path) Creates a new empty file, returns true if all is ok, false otherwise (bool)
svn_fs_node_created_rev(resource fsroot, string path) Returns the revision in which path under fsroot was created (int)
svn_fs_node_prop(resource fsroot, string path, string propname) Returns the value of a property for a node (string)
svn_fs_props_changed(resource root1, string path1, resource root2, string path2) Return true if props are different, false otherwise (bool)
svn_fs_revision_prop(resource fs, int revnum, string propname) Fetches the value of a named property (string)
svn_fs_revision_root(resource fs, int revnum) Get a handle on a specific version of the repository root (resource)
svn_fs_txn_root(resource txn) Creates and returns a transaction root (resource)
svn_fs_youngest_rev(resource fs) Returns the number of the youngest revision in the filesystem (int)
svn_import(string path, string url, bool nonrecursive) Imports an unversioned path into a repository (bool)
svn_log(string repos_url, [int start_revision, [int end_revision, [int limit, [int flags]]]]) Returns the commit log messages of a repository URL (array)
svn_ls(string repos_url, [int revision_no, [bool recurse]]) Returns list of directory contents in repository URL, optionally at revision number (array)
svn_mkdir(string path) Creates a directory in a working copy or repository (bool)
svn_repos_create(string path, [array config, [array fsconfig]]) Create a new subversion repository at path (resource)
svn_repos_fs_begin_txn_for_commit(resource repos, int rev, string author, string log_msg) Create a new transaction (resource)
svn_repos_fs_commit_txn(resource txn) Commits a transaction and returns the new revision (int)
svn_repos_fs(resource repos) Gets a handle on the filesystem for a repository (resource)
svn_repos_hotcopy(string repospath, string destpath, bool cleanlogs) Make a hot-copy of the repos at repospath; copy it to destpath (bool)
svn_repos_open(string path) Open a shared lock on a repository. (resource)
svn_repos_recover(string path) Run recovery procedures on the repository located at path. (bool)
svn_revert(string path, [bool recursive]) Revert changes to the working copy (bool)
svn_status(string path, [int flags]) Returns the status of working copy files and directories (array)
svn_update(string path, [int revno, [bool recurse]]) Update working copy (int)
swf_actiongeturl(string url, string target) Get a URL from a Shockwave Flash movie (null)
swf_actiongotoframe(int framenumber) Play a frame and then stop (null)
swf_actiongotolabel(string label) Display a frame with the specified label (null)
swf_actionnextframe() Go forward one frame (null)
swf_actionplay() Start playing the flash movie from the current frame (null)
swf_actionprevframe() Go backwards one frame (null)
swf_actionsettarget(string target) Set the context for actions (null)
swf_actionstop() Stop playing the flash movie at the current frame (null)
swf_actiontogglequality() Toggle between low and high quality (null)
swf_actionwaitforframe(int framenumber, int skipcount) Skip actions if a frame has not been loaded (null)
swf_addbuttonrecord(int states, int shapeid, int depth) Controls location, appearance and active area of the current button (null)
swf_addcolor(float r, float g, float b, float a) Set the global add color to the rgba value specified (null)
swf_closefile([int return_file]) Close the current Shockwave Flash file (null)
swf_definebitmap(int objid, string image_name) Define a bitmap (null)
swf_definefont(int fontid, string fontname) Defines a font (null)
swf_defineline(int objid, float x1, float y1, float x2, float y2, float width) Define a line (null)
swf_definepoly(int objid, array coords, int npoints, float width) Define a polygon (null)
swf_definerect(int objid, float x1, float y1, float x2, float y2, float width) Define a rectangle (null)
swf_definetext(int objid, string str, int docenter) Define a text string (null)
swf_endbutton() End the definition of the current button (null)
swf_enddoaction() End the current action (null)
swf_endshape() Completes the definition of the current shape (null)
swf_endsymbol() End the definition of a symbol (null)
swf_fontsize(float size) Change the font size (null)
swf_fontslant(float slant) Set the font slant (null)
swf_fonttracking(float tracking) Set the current font tracking (null)
swf_getbitmapinfo(int bitmapid) Get information about a bitmap (array)
swf_getfontinfo() Gets font information (array)
swf_getframe() Get the frame number of the current frame (int)
swf_labelframe(string name) Label the current frame (null)
swf_lookat(float view_x, float view_y, float view_z, float reference_x, float reference_y, float reference_z, float twist) Define a viewing transformation (null)
swf_modifyobject(int depth, int how) Modify an object (null)
swf_mulcolor(float r, float g, float b, float a) Sets the global multiply color to the rgba value specified (null)
swf_nextid() Returns the next free object id (int)
swf_oncondition(int transition) Describe a transition used to trigger an action list (null)
swf_openfile(string filename, float width, float height, float framerate, float r, float g, float b) Open a new Shockwave Flash file (null)
swf_ortho(float xmin, float xmax, float ymin, float ymax, float zmin, float zmax) Defines an orthographic mapping of user coordinates onto the current viewport (null)
swf_ortho2(float xmin, float xmax, float ymin, float ymax) Defines 2D orthographic mapping of user coordinates onto the current viewport (null)
swf_perspective(float fovy, float aspect, float near, float far) Define a perspective projection transformation (null)
swf_placeobject(int objid, int depth) Place an object onto the screen (null)
swf_polarview(float dist, float azimuth, float incidence, float twist) Define the viewer's position with polar coordinates (null)
swf_popmatrix() Restore a previous transformation matrix (null)
swf_posround(int round) Enables or Disables the rounding of the translation when objects are placed or moved (null)
swf_pushmatrix() Push the current transformation matrix back unto the stack (null)
swf_removeobject(int depth) Remove an object (null)
swf_rotate(float angle, string axis) Rotate the current transformation (null)
swf_scale(float x, float y, float z) Scale the current transformation (null)
swf_setfont(int fontid) Change the current font (null)
swf_setframe(int framenumber) Switch to a specified frame (null)
swf_shapearc(float x, float y, float r, float ang1, float ang2) Draw a circular arc (null)
swf_shapecurveto(float x1, float y1, float x2, float y2) Draw a quadratic bezier curve between two points (null)
swf_shapecurveto3(float x1, float y1, float x2, float y2, float x3, float y3) Draw a cubic bezier curve (null)
swf_shapefillbitmapclip(int bitmapid) Set current fill mode to clipped bitmap (null)
swf_shapefillbitmaptile(int bitmapid) Set current fill mode to tiled bitmap (null)
swf_shapefilloff() Turns off filling (null)
swf_shapefillsolid(float r, float g, float b, float a) Set the current fill style to the specified color (null)
swf_shapelinesolid(float r, float g, float b, float a, float width) Set the current line style (null)
swf_shapelineto(float x, float y) Draw a line (null)
swf_shapemoveto(float x, float y) Move the current position (null)
swf_showframe() Display the current frame (null)
swf_startbutton(int objid, int type) Start the definition of a button (null)
swf_startdoaction() Start a description of an action list for the current frame (null)
swf_startshape(int objid) Start a complex shape (null)
swf_startsymbol(int objid) Define a symbol (null)
swf_textwidth(string str) Get the width of a string (float)
swf_translate(float x, float y, float z) Translate the current transformations (null)
swf_viewport(float xmin, float xmax, float ymin, float ymax) Select an area for future drawing (null)
Swish(string index_names) Construct a Swish object (new)
>getMetaList(string index_name) Get the list of meta entries for the index (Swish: array)
>getPropertyList(string index_name) Get the list of properties for the index (Swish: array)
>prepare([string query]) Prepare a search query (Swish: object)
>query(string query) Execute a query and return results object (Swish: object)
>getMetaList() Get a list of meta entries (SwishResult: array)
>stem(string word) Stems the given word (SwishResult: array)
>getParsedWords(string index_name) Get an array of parsed words (SwishResults: array)
>getRemovedStopwords(string index_name) Get an array of stopwords removed from the query (SwishResults: array)
>nextResult() Get the next search result (SwishResults: object)
>seekResult(int position) Set current seek pointer to the given position (SwishResults: int)
>execute([string query]) Execute the search and get the results (SwishSearch: object)
>resetLimit() Reset the search limits (SwishSearch: null)
>setLimit(string property, string low, string high) Set the search limits (SwishSearch: null)
>setPhraseDelimiter(string delimiter) Set the phrase delimiter (SwishSearch: null)
>setSort(string sort) Set the sort order (SwishSearch: null)
>setStructure(int structure) Set the structure flag in the search object (SwishSearch: null)
sybase_affected_rows([resource link_identifier]) Gets number of affected rows in last query (int)
sybase_close([resource link_identifier]) Closes a Sybase connection (bool)
sybase_connect([string servername, [string username, [string password, [string charset, [string appname, [bool new]]]]]]) Opens a Sybase server connection (resource)
sybase_data_seek(resource result_identifier, int row_number) Moves internal row pointer (bool)
sybase_deadlock_retry_count(int retry_count) Sets the deadlock retry count (null)
sybase_fetch_array(resource result) Fetch row as array (array)
sybase_fetch_assoc(resource result) Fetch a result row as an associative array (array)
sybase_fetch_field(resource result, [int field_offset]) Get field information from a result (object)
sybase_fetch_object(resource result, [mixed object]) Fetch a row as an object (object)
sybase_fetch_row(resource result) Get a result row as an enumerated array (array)
sybase_field_seek(resource result, int field_offset) Sets field offset (bool)
sybase_free_result(resource result) Frees result memory (bool)
sybase_get_last_message() Returns the last message from the server (string)
sybase_min_client_severity(int severity) Sets minimum client severity (null)
sybase_min_error_severity(int severity) Sets minimum error severity (null)
sybase_min_message_severity(int severity) Sets minimum message severity (null)
sybase_min_server_severity(int severity) Sets minimum server severity (null)
sybase_num_fields(resource result) Gets the number of fields in a result set (int)
sybase_num_rows(resource result) Get number of rows in a result set (int)
sybase_pconnect([string servername, [string username, [string password, [string charset, [string appname]]]]]) Open persistent Sybase connection (resource)
sybase_query(string query, [resource link_identifier]) Sends a Sybase query (mixed)
sybase_result(resource result, int row, mixed field) Get result data (string)
sybase_select_db(string database_name, [resource link_identifier]) Selects a Sybase database (bool)
sybase_set_message_handler(callback handler, [resource connection]) Sets the handler called when a server message is raised (bool)
sybase_unbuffered_query(string query, resource link_identifier, [bool store_result]) Send a Sybase query and do not block (resource)
tcpwrap_check(string daemon, string address, [string user, [bool nodns]]) Performs a tcpwrap check (bool)
ob_tidyhandler(string input, [int mode]) ob_start callback function to repair the buffer (string)
tidy_access_count(tidy object) Returns the Number of Tidy accessibility warnings encountered for specified document (int)
tidy_config_count(tidy object) Returns the Number of Tidy configuration errors encountered for specified document (int)
tidy_error_count(tidy object) Returns the Number of Tidy errors encountered for specified document (int)
tidy_get_error_buffer(tidy object) Return warnings and errors which occurred parsing the specified document (string)
>errorBuffer
tidy_get_output(tidy object) Return a string representing the parsed tidy markup (string)
tidy_load_config(string filename, string encoding) Load an ASCII Tidy configuration file with the specified encoding (null)
tidy_reset_config() Restore Tidy configuration to default values (bool)
tidy_save_config(string filename) Save current settings to named file (bool)
tidy_set_encoding(string encoding) Set the input/output character encoding for parsing markup (bool)
tidy_setopt(string option, mixed value) Updates the configuration settings for the specified tidy document (bool)
tidy_warning_count(tidy object) Returns the Number of Tidy warnings encountered for specified document (int)
tidy_get_body(tidy object) Returns a tidyNode object starting from the <body> tag of the tidy parse tree (tidyNode)
>body() Returns a tidyNode object starting from the <body> tag of the tidy parse tree (tidy: tidyNode)
tidy_clean_repair(tidy object) Execute configured cleanup and repair operations on parsed markup (bool)
>cleanRepair() Execute configured cleanup and repair operations on parsed markup (tidy: bool)
tidy([string filename, [mixed config, [string encoding, [bool use_include_path]]]]) Constructs a new tidy object (new)
tidy_diagnose(tidy object) Run configured diagnostics on parsed and repaired markup (bool)
>diagnose() Run configured diagnostics on parsed and repaired markup (tidy: bool)
tidy_get_config(tidy object) Get current Tidy configuration (array)
>getConfig() Get current Tidy configuration (tidy: array)
tidy_get_html_ver(tidy object) Get the Detected HTML version for the specified document (int)
>getHtmlVer() Get the Detected HTML version for the specified document (tidy: int)
tidy_getopt(tidy object, string option) Returns the value of the specified configuration option for the tidy document (mixed)
>getOpt(string option) Returns the value of the specified configuration option for the tidy document (tidy: mixed)
tidy_get_opt_doc(tidy object, string optname) Returns the documentation for the given option name (string)
>getOptDoc(string optname) Returns the documentation for the given option name (tidy: string)
tidy_get_release() Get release date (version) for Tidy library (string)
>getRelease() Get release date (version) for Tidy library (tidy: string)
tidy_get_status(tidy object) Get status of specified document (int)
>getStatus() Get status of specified document (tidy: int)
tidy_get_head(tidy object) Returns a tidyNode object starting from the <head> tag of the tidy parse tree (tidyNode)
>head() Returns a tidyNode object starting from the <head> tag of the tidy parse tree (tidy: tidyNode)
tidy_get_html(tidy object) Returns a tidyNode object starting from the <html> tag of the tidy parse tree (tidyNode)
>html() Returns a tidyNode object starting from the <html> tag of the tidy parse tree (tidy: tidyNode)
tidy_is_xhtml(tidy object) Indicates if the document is a XHTML document (bool)
>isXhtml() Indicates if the document is a XHTML document (tidy: bool)
tidy_is_xml(tidy object) Indicates if the document is a generic (non HTML/XHTML) XML document (bool)
>isXml() Indicates if the document is a generic (non HTML/XHTML) XML document (tidy: bool)
tidy_parse_file(string filename, [mixed config, [string encoding, [bool use_include_path]]]) Parse markup in file or URI (tidy)
>parseFile(string filename, [mixed config, [string encoding, [bool use_include_path]]]) Parse markup in file or URI (tidy: bool)
tidy_parse_string(string input, [mixed config, [string encoding]]) Parse a document stored in a string (tidy)
>parseString(string input, [mixed config, [string encoding]]) Parse a document stored in a string (tidy: bool)
tidy_repair_file(string filename, [mixed config, [string encoding, [bool use_include_path]]]) Repair a file and return it as a string (string)
>repairFile(string filename, [mixed config, [string encoding, [bool use_include_path]]]) Repair a file and return it as a string (tidy: string)
tidy_repair_string(string data, [mixed config, [string encoding]]) Repair a string using an optionally provided configuration file (string)
>repairString(string data, [mixed config, [string encoding]]) Repair a string using an optionally provided configuration file (tidy: string)
tidy_get_root(tidy object) Returns a tidyNode object representing the root of the tidy parse tree (tidyNode)
>root() Returns a tidyNode object representing the root of the tidy parse tree (tidy: tidyNode)
>getParent() Returns the parent node of the current node (tidyNode: tidyNode)
>hasChildren() Checks if a node has children (tidyNode: bool)
>hasSiblings() Checks if a node has siblings (tidyNode: bool)
>isAsp() Checks if this node is ASP (tidyNode: bool)
>isComment() Checks if a node represents a comment (tidyNode: bool)
>isHtml() Checks if a node is part of a HTML document (tidyNode: bool)
>isJste() Checks if this node is JSTE (tidyNode: bool)
>isPhp() Checks if a node is PHP (tidyNode: bool)
>isText() Checks if a node represents text (no markup) (tidyNode: bool)
token_get_all(string source) Split given source into PHP tokens (array)
token_name(int token) Get the symbolic name of a given PHP token (string)
>add(string key, number increment, [string type]) Adds to a numeric key (TokyoTyrant: number)
>connect(string host, [int port, [bool persistent]]) Connect to a database (TokyoTyrant: TokyoTyrant)
>connectUri(string uri) Connects to a database (TokyoTyrant: TokyoTyrant)
TokyoTyrant([string host, [string port, [string persistent]]]) Construct a new TokyoTyrant object (new)
>copy(string path) Copies the database (TokyoTyrant: TokyoTyrant)
>ext(string name, int options, string key, string value) Execute a remote script (TokyoTyrant: string)
>fwmKeys(string prefix, int max_recs) Returns the forward matching keys (TokyoTyrant: array)
>get(mixed keys) The get purpose (TokyoTyrant: mixed)
>num() Number of records in the database (TokyoTyrant: int)
>out(mixed keys) Removes records (TokyoTyrant: TokyoTyrant)
>put(mixed keys, [string value]) Puts values (TokyoTyrant: TokyoTyrant)
>putCat(mixed keys, [string value]) Concatenates to a record (TokyoTyrant: TokyoTyrant)
>putKeep(mixed keys, [string value]) Puts a record (TokyoTyrant: TokyoTyrant)
>putNr(mixed keys, [string value]) Puts value (TokyoTyrant: TokyoTyrant)
>putShl(string key, string value, int width) Concatenates to a record (TokyoTyrant: null)
>restore(string log_dir, int timestamp, [bool check_consistency]) Restore the database (TokyoTyrant: null)
>setMaster(string host, int port, int timestamp, [bool check_consistency]) Set the replication master (TokyoTyrant: null)
>size(string key) Returns the size of the value (TokyoTyrant: int)
>stat() Get statistics (TokyoTyrant: array)
>sync() Synchronize the database (tokyotyrant: null)
>vanish() Empties the database (TokyoTyrant: null)
>addCond(string name, int op, string expr) Adds a condition to the query (TokyoTyrantQuery: null)
TokyoTyrantQuery(TokyoTyrantTable table) Construct a new query (new)
>count() Counts records (TokyoTyrantQuery: int)
>current() Returns the current element (TokyoTyrantQuery: array)
>hint() Get the hint string of the query (TokyoTyrantQuery: string)
>key() The key purpose (TokyoTyrantQuery: int)
>metaSearch() Retrieve records with multiple queries (TokyoTyrantQuery: array)
>next() The next purpose (TokyoTyrantQuery: array)
>out() Removes records based on query (TokyoTyrantQuery: TokyoTyrantQuery)
>rewind() The rewind purpose (TokyoTyrantQuery: boolean)
>search() Searches records (TokyoTyrantQuery: array)
>setLimit([int max, [int skip]]) Limit results (TokyoTyrantQuery: null)
>valid() Checks the validity of current item (TokyoTyrantQuery: null)
>add(string key, mixed increment, [string type]) Adds a record (TokyoTyrantTable: int)
>genUid() Generate unique id (TokyoTyrantTable: int)
>get(mixed keys) Get a row (TokyoTyrantTable: null)
>getQuery() Get a query object (TokyoTyrantTable: TokyoTyrantQuery)
>out(mixed keys) Remove records (TokyoTyrantTable: null)
>put(mixed key, array columns) Store a row (TokyoTyrantTable: int)
>putCat(mixed key, array columns) Concatenates to a row (TokyoTyrantTable: null)
>putKeep(mixed key, array columns) Put a new record (TokyoTyrantTable: null)
>putNr(mixed keys, [string value]) Puts value (TokyoTyrantTable: null)
>putShl(string key, string value, int width) Concatenates to a record (TokyoTyrantTable: null)
>setIndex(string column, int type) Sets index (TokyoTyrantTable: null)
odbc_autocommit(resource connection_id, [bool OnOff]) Toggle autocommit behaviour (mixed)
odbc_binmode(resource result_id, int mode) Handling of binary column data (bool)
odbc_close_all() Close all ODBC connections (null)
odbc_close(resource connection_id) Close an ODBC connection (null)
odbc_columnprivileges(resource connection_id, string qualifier, string owner, string table_name, string column_name) Lists columns and associated privileges for the given table (resource)
odbc_columns(resource connection_id, [string qualifier, [string schema, [string table_name, [string column_name]]]]) Lists the column names in specified tables (resource)
odbc_commit(resource connection_id) Commit an ODBC transaction (bool)
odbc_connect(string dsn, string user, string password, [int cursor_type]) Connect to a datasource (resource)
odbc_cursor(resource result_id) Get cursorname (string)
odbc_data_source(resource connection_id, int fetch_type) Returns information about a current connection (array)
odbc_do() Alias of odbc_exec
odbc_error([resource connection_id]) Get the last error code (string)
odbc_errormsg([resource connection_id]) Get the last error message (string)
odbc_exec(resource connection_id, string query_string, [int flags]) Prepare and execute a SQL statement (resource)
odbc_execute(resource result_id, [array parameters_array]) Execute a prepared statement (bool)
odbc_fetch_array(resource result, [int rownumber]) Fetch a result row as an associative array (array)
odbc_fetch_into(resource result_id, array &result_array, [int rownumber]) Fetch one result row into array (int)
odbc_fetch_object(resource result, [int rownumber]) Fetch a result row as an object (object)
odbc_fetch_row(resource result_id, [int row_number]) Fetch a row (bool)
odbc_field_len(resource result_id, int field_number) Get the length (precision) of a field (int)
odbc_field_name(resource result_id, int field_number) Get the columnname (string)
odbc_field_num(resource result_id, string field_name) Return column number (int)
odbc_field_precision() Alias of odbc_field_len
odbc_field_scale(resource result_id, int field_number) Get the scale of a field (int)
odbc_field_type(resource result_id, int field_number) Datatype of a field (string)
odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table) Retrieves a list of foreign keys (resource)
odbc_free_result(resource result_id) Free resources associated with a result (bool)
odbc_gettypeinfo(resource connection_id, [int data_type]) Retrieves information about data types supported by the data source (resource)
odbc_longreadlen(resource result_id, int length) Handling of LONG columns (bool)
odbc_next_result(resource result_id) Checks if multiple results are available (bool)
odbc_num_fields(resource result_id) Number of columns in a result (int)
odbc_num_rows(resource result_id) Number of rows in a result (int)
odbc_pconnect(string dsn, string user, string password, [int cursor_type]) Open a persistent database connection (resource)
odbc_prepare(resource connection_id, string query_string) Prepares a statement for execution (resource)
odbc_primarykeys(resource connection_id, string qualifier, string owner, string table) Gets the primary keys for a table (resource)
odbc_procedurecolumns(resource connection_id) Retrieve information about parameters to procedures (resource)
odbc_procedurecolumns(resource connection_id, string qualifier, string owner, string proc, string column) Retrieve information about parameters to procedures (resource)
odbc_procedures(resource connection_id) Get the list of procedures stored in a specific data source (resource)
odbc_procedures(resource connection_id, string qualifier, string owner, string name) Get the list of procedures stored in a specific data source (resource)
odbc_result_all(resource result_id, [string format]) Print result as HTML table (int)
odbc_result(resource result_id, mixed field) Get result data (mixed)
odbc_rollback(resource connection_id) Rollback a transaction (bool)
odbc_setoption(resource id, int function, int option, int param) Adjust ODBC settings (bool)
odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable) Retrieves special columns (resource)
odbc_statistics(resource connection_id, string qualifier, string owner, string table_name, int unique, int accuracy) Retrieve statistics about a table (resource)
odbc_tableprivileges(resource connection_id, string qualifier, string owner, string name) Lists tables and the privileges associated with each table (resource)
odbc_tables(resource connection_id, [string qualifier, [string owner, [string name, [string types]]]]) Get the list of table names stored in a specific data source (resource)
base64_decode(string data, [bool strict]) Decodes data encoded with MIME base64 (string)
base64_encode(string data) Encodes data with MIME base64 (string)
get_headers(string url, [int format]) Fetches all the headers sent by the server in response to a HTTP request (array)
get_meta_tags(string filename, [bool use_include_path]) Extracts all meta tag content attributes from a file and returns an array (array)
http_build_query(array formdata, [string numeric_prefix, [string arg_separator]]) Generate URL-encoded query string (string)
parse_url(string url, [int component]) Parse a URL and return its components (mixed)
rawurldecode(string str) Decode URL-encoded strings (string)
rawurlencode(string str) URL-encode according to RFC 1738 (string)
urldecode(string str) Decodes URL-encoded string (string)
urlencode(string str) URL-encodes string (string)
debug_zval_dump(mixed variable) Dumps a string representation of an internal zend value to output (null)
doubleval() Alias of floatval
empty(mixed var) Determine whether a variable is empty (bool)
floatval(mixed var) Get float value of a variable (float)
get_defined_vars() Returns an array of all defined variables (array)
get_resource_type(resource handle) Returns the resource type (string)
gettype(mixed var) Get the type of a variable (string)
import_request_variables(string types, [string prefix]) Import GET/POST/Cookie variables into the global scope (bool)
intval(mixed var, [int base]) Get the integer value of a variable (int)
is_array(mixed var) Finds whether a variable is an array (bool)
is_bool(mixed var) Finds out whether a variable is a boolean (bool)
is_callable(callback name, [bool syntax_only, [string &callable_name]]) Verify that the contents of a variable can be called as a function (bool)
is_double() Alias of is_float
is_float(mixed var) Finds whether the type of a variable is float (bool)
is_int(mixed var) Find whether the type of a variable is integer (bool)
is_integer() Alias of is_int
is_long() Alias of is_int
is_null(mixed var) Finds whether a variable is NULL (bool)
is_numeric(mixed var) Finds whether a variable is a number or a numeric string (bool)
is_object(mixed var) Finds whether a variable is an object (bool)
is_real() Alias of is_float
is_resource(mixed var) Finds whether a variable is a resource (bool)
is_scalar(mixed var) Finds whether a variable is a scalar (bool)
is_string(mixed var) Find whether the type of a variable is string (bool)
isset(mixed var, [mixed var]) Determine if a variable is set and is not NULL (bool)
print_r(mixed expression, [bool return]) Prints human-readable information about a variable (mixed)
serialize(mixed value) Generates a storable representation of a value (string)
settype(mixed &var, string type) Set the type of a variable (bool)
strval(mixed var) Get string value of a variable (string)
unserialize(string str) Creates a PHP value from a stored representation (mixed)
unset(mixed var, [mixed var, [mixed ...]]) Unset a given variable (null)
var_dump(mixed expression, [mixed expression]) Dumps information about a variable (null)
var_export(mixed expression, [bool return]) Outputs or returns a parsable string representation of a variable (mixed)
vpopmail_add_alias_domain_ex(string olddomain, string newdomain) Add alias to an existing virtual domain (bool)
vpopmail_add_alias_domain(string domain, string aliasdomain) Add an alias for a virtual domain (bool)
vpopmail_add_domain_ex(string domain, string passwd, [string quota, [string bounce, [bool apop]]]) Add a new virtual domain (bool)
vpopmail_add_domain(string domain, string dir, int uid, int gid) Add a new virtual domain (bool)
vpopmail_add_user(string user, string domain, string password, [string gecos, [bool apop]]) Add a new user to the specified virtual domain (bool)
vpopmail_alias_add(string user, string domain, string alias) Insert a virtual alias (bool)
vpopmail_alias_del_domain(string domain) Deletes all virtual aliases of a domain (bool)
vpopmail_alias_del(string user, string domain) Deletes all virtual aliases of a user (bool)
vpopmail_alias_get_all(string domain) Get all lines of an alias for a domain (array)
vpopmail_alias_get(string alias, string domain) Get all lines of an alias for a domain (array)
vpopmail_auth_user(string user, string domain, string password, [string apop]) Attempt to validate a username/domain/password (bool)
vpopmail_del_domain_ex(string domain) Delete a virtual domain (bool)
vpopmail_del_domain(string domain) Delete a virtual domain (bool)
vpopmail_del_user(string user, string domain) Delete a user from a virtual domain (bool)
vpopmail_error() Get text message for last vpopmail error (string)
vpopmail_passwd(string user, string domain, string password, [bool apop]) Change a virtual user's password (bool)
vpopmail_set_user_quota(string user, string domain, string quota) Sets a virtual user's quota (bool)
w32api_deftype(string typename, string member1_type, string member1_name, [string ..., [string ...]]) Defines a type for use with other w32api_functions (bool)
w32api_init_dtype(string typename, mixed value, [mixed ...]) Creates an instance of the data type typename and fills it with the values passed (resource)
w32api_invoke_function(string funcname, mixed argument, [mixed ...]) Invokes function funcname with the arguments passed after the function name (mixed)
w32api_register_function(string library, string function_name, string return_type) Registers function function_name from library with PHP (bool)
w32api_set_call_method(int method) Sets the calling method used (null)
wddx_add_vars(resource packet_id, mixed var_name, [mixed ...]) Add variables to a WDDX packet with the specified ID (bool)
wddx_deserialize() Alias of wddx_unserialize
wddx_packet_end(resource packet_id) Ends a WDDX packet with the specified ID (string)
wddx_packet_start([string comment]) Starts a new WDDX packet with structure inside it (resource)
wddx_serialize_value(mixed var, [string comment]) Serialize a single value into a WDDX packet (string)
wddx_serialize_vars(mixed var_name, [mixed ...]) Serialize variables into a WDDX packet (string)
wddx_unserialize(string packet) Unserializes a WDDX packet (mixed)
win32_ps_list_procs() List running processes (array)
win32_ps_stat_mem() Stat memory utilization (array)
win32_ps_stat_proc([int pid]) Stat process (array)
win32_create_service(array details, [string machine]) Creates a new service entry in the SCM database (mixed)
win32_delete_service(string servicename, [string machine]) Deletes a service entry from the SCM database (int)
win32_get_last_control_message() Returns the last control message that was sent to this service (int)
win32_query_service_status(string servicename, [string machine]) Queries the status of a service (mixed)
win32_set_service_status(int status) Update the service status (bool)
win32_start_service_ctrl_dispatcher(string name) Registers the script with the SCM, so that it can act as the service with the given name (mixed)
win32_start_service(string servicename, [string machine]) Starts a service (int)
win32_stop_service(string servicename, [string machine]) Stops a service (int)
xattr_get(string filename, string name, [int flags]) Get an extended attribute (string)
xattr_list(string filename, [int flags]) Get a list of extended attributes (array)
xattr_remove(string filename, string name, [int flags]) Remove an extended attribute (bool)
xattr_set(string filename, string name, string value, [int flags]) Set an extended attribute (bool)
xattr_supported(string filename, [int flags]) Check if filesystem supports extended attributes (bool)
xdiff_file_bdiff_size(string file) Read a size of file created by applying a binary diff (int)
xdiff_file_bdiff(string old_file, string new_file, string dest) Make binary diff of two files (bool)
xdiff_file_bpatch(string file, string patch, string dest) Patch a file with a binary diff (bool)
xdiff_file_diff_binary(string old_file, string new_file, string dest) Alias of xdiff_file_bdiff (bool)
xdiff_file_diff(string old_file, string new_file, string dest, [int context, [bool minimal]]) Make unified diff of two files (bool)
xdiff_file_merge3(string old_file, string new_file1, string new_file2, string dest) Merge 3 files into one (mixed)
xdiff_file_patch_binary(string file, string patch, string dest) Alias of xdiff_file_bpatch (bool)
xdiff_file_patch(string file, string patch, string dest, [int flags]) Patch a file with an unified diff (mixed)
xdiff_file_rabdiff(string old_file, string new_file, string dest) Make binary diff of two files using the Rabin's polynomial fingerprinting algorithm (bool)
xdiff_string_bdiff_size(string patch) Read a size of file created by applying a binary diff (int)
xdiff_string_bdiff(string old_data, string new_data) Make binary diff of two strings (string)
xdiff_string_bpatch(string str, string patch) Patch a string with a binary diff (string)
xdiff_string_bdiff(string old_data, string new_data) Alias of xdiff_string_bdiff (string)
xdiff_string_diff(string old_data, string new_data, [int context, [bool minimal]]) Make unified diff of two strings (string)
xdiff_string_merge3(string old_data, string new_data1, string new_data2, [string &error]) Merge 3 strings into one (mixed)
xdiff_string_patch_binary(string str, string patch) Alias of xdiff_string_bpatch (string)
xdiff_string_patch(string str, string patch, [int flags, [string &error]]) Patch a string with an unified diff (string)
xdiff_string_bdiff(string old_data, string new_data) Make binary diff of two strings using the Rabin's polynomial fingerprinting algorithm (string)
utf8_decode(string data) Converts a string with ISO-8859-1 characters encoded with UTF-8 to single-byte ISO-8859-1 (string)
utf8_encode(string data) Encodes an ISO-8859-1 string to UTF-8 (string)
xml_error_string(int code) Get XML parser error string (string)
xml_get_current_byte_index(resource parser) Get current byte index for an XML parser (int)
xml_get_current_column_number(resource parser) Get current column number for an XML parser (int)
xml_get_current_line_number(resource parser) Get current line number for an XML parser (int)
xml_get_error_code(resource parser) Get XML parser error code (int)
xml_parse_into_struct(resource parser, string data, array &values, [array &index]) Parse XML data into an array structure (int)
xml_parse(resource parser, string data, [bool is_final]) Start parsing an XML document (int)
xml_parser_create_ns([string encoding, [string separator]]) Create an XML parser with namespace support (resource)
xml_parser_create([string encoding]) Create an XML parser (resource)
xml_parser_free(resource parser) Free an XML parser (bool)
xml_parser_get_option(resource parser, int option) Get options from an XML parser (mixed)
xml_parser_set_option(resource parser, int option, mixed value) Set options in an XML parser (bool)
xml_set_character_data_handler(resource parser, callback handler) Set up character data handler (bool)
xml_set_default_handler(resource parser, callback handler) Set up default handler (bool)
xml_set_element_handler(resource parser, callback start_element_handler, callback end_element_handler) Set up start and end element handlers (bool)
xml_set_end_namespace_decl_handler(resource parser, callback handler) Set up end namespace declaration handler (bool)
xml_set_external_entity_ref_handler(resource parser, callback handler) Set up external entity reference handler (bool)
xml_set_notation_decl_handler(resource parser, callback handler) Set up notation declaration handler (bool)
xml_set_object(resource parser, object &object) Use XML Parser within an object (bool)
xml_set_processing_instruction_handler(resource parser, callback handler) Set up processing instruction (PI) handler (bool)
xml_set_start_namespace_decl_handler(resource parser, callback handler) Set up start namespace declaration handler (bool)
xml_set_unparsed_entity_decl_handler(resource parser, callback handler) Set up unparsed entity declaration handler (bool)
>close() Close the XMLReader input (XMLReader: bool)
>expand() Returns a copy of the current node as a DOM object (XMLReader: DOMNode)
>getAttribute(string name) Get the value of a named attribute (XMLReader: string)
>getAttributeNo(int index) Get the value of an attribute by index (XMLReader: string)
>getAttributeNs(string localName, string namespaceURI) Get the value of an attribute by localname and URI (XMLReader: string)
>getParserProperty(int property) Indicates if specified property has been set (XMLReader: bool)
>isValid() Indicates if the parsed document is valid (XMLReader: bool)
>lookupNamespace(string prefix) Lookup namespace for a prefix (XMLReader: bool)
>moveToAttribute(string name) Move cursor to a named attribute (XMLReader: bool)
>moveToAttributeNo(int index) Move cursor to an attribute by index (XMLReader: bool)
>moveToAttributeNs(string localName, string namespaceURI) Move cursor to a named attribute (XMLReader: bool)
>moveToElement() Position cursor on the parent Element of current Attribute (XMLReader: bool)
>moveToFirstAttribute() Position cursor on the first Attribute (XMLReader: bool)
>moveToNextAttribute() Position cursor on the next Attribute (XMLReader: bool)
>next([string localname]) Move cursor to next node skipping all subtrees (XMLReader: bool)
>open(string URI, [string encoding, [int options]]) Set the URI containing the XML to parse (XMLReader: bool)
>read() Move to next node in document (XMLReader: bool)
>readInnerXML() Retrieve XML from current node (XMLReader: string)
>readOuterXML() Retrieve XML from current node, including it self (XMLReader: string)
>readString() Reads the contents of the current node as an string (XMLReader: string)
>setParserProperty(int property, bool value) Set or Unset parser options (XMLReader: bool)
>setRelaxNGSchema(string filename) Set the filename or URI for a RelaxNG Schema (XMLReader: bool)
>setRelaxNGSchemaSource(string source) Set the data containing a RelaxNG Schema (XMLReader: bool)
>setSchema(string filename) Validate document against XSD (XMLReader: bool)
>xml(string source, [string encoding, [int options]]) Set the data containing the XML to parse (XMLReader: bool)
xmlrpc_decode_request(string xml, string &method, [string encoding]) Decodes XML into native PHP types (mixed)
xmlrpc_decode(string xml, [string encoding]) Decodes XML into native PHP types (mixed)
xmlrpc_encode_request(string method, mixed params, [array output_options]) Generates XML for a method request (string)
xmlrpc_encode(mixed value) Generates XML for a PHP value (string)
xmlrpc_get_type(mixed value) Gets xmlrpc type for a PHP value (string)
xmlrpc_is_fault(array arg) Determines if an array value represents an XMLRPC fault (bool)
xmlrpc_parse_method_descriptions(string xml) Decodes XML into a list of method descriptions (array)
xmlrpc_server_add_introspection_data(resource server, array desc) Adds introspection documentation (int)
xmlrpc_server_call_method(resource server, string xml, mixed user_data, [array output_options]) Parses XML requests and call methods (string)
xmlrpc_server_create() Creates an xmlrpc server (resource)
xmlrpc_server_destroy(resource server) Destroys server resources (int)
xmlrpc_server_register_introspection_callback(resource server, string function) Register a PHP function to generate documentation (bool)
xmlrpc_server_register_method(resource server, string method_name, string function) Register a PHP function to resource method matching method_name (bool)
xmlrpc_set_type(string &value, string type) Sets xmlrpc type, base64 or datetime, for a PHP string value (bool)
>endAttribute() End attribute (XMLWriter: bool)
xmlwriter_end_attribute(resource xmlwriter) End attribute (bool)
>endCData() End current CDATA (XMLWriter: bool)
xmlwriter_end_cdata(resource xmlwriter) End current CDATA (bool)
>endComment() Create end comment (XMLWriter: bool)
xmlwriter_end_comment(resource xmlwriter) Create end comment (bool)
>endDocument() End current document (XMLWriter: bool)
xmlwriter_end_document(resource xmlwriter) End current document (bool)
>endDTDAttlist() End current DTD AttList (XMLWriter: bool)
xmlwriter_end_dtd_attlist(resource xmlwriter) End current DTD AttList (bool)
>endDTDElement() End current DTD element (XMLWriter: bool)
xmlwriter_end_dtd_element(resource xmlwriter) End current DTD element (bool)
>endDTDEntity() End current DTD Entity (XMLWriter: bool)
xmlwriter_end_dtd_entity(resource xmlwriter) End current DTD Entity (bool)
>endDTD() End current DTD (XMLWriter: bool)
xmlwriter_end_dtd(resource xmlwriter) End current DTD (bool)
>endElement() End current element (XMLWriter: bool)
xmlwriter_end_element(resource xmlwriter) End current element (bool)
>endPI() End current PI (XMLWriter: bool)
xmlwriter_end_pi(resource xmlwriter) End current PI (bool)
>flush([bool empty]) Flush current buffer (XMLWriter: mixed)
xmlwriter_flush(resource xmlwriter, [bool empty]) Flush current buffer (mixed)
>fullEndElement() End current element (XMLWriter: bool)
xmlwriter_full_end_element(resource xmlwriter) End current element (bool)
>openMemory() Create new xmlwriter using memory for string output (XMLWriter: bool)
xmlwriter_open_memory() Create new xmlwriter using memory for string output (resource)
>openURI(string uri) Create new xmlwriter using source uri for output (XMLWriter: bool)
xmlwriter_open_uri(string uri) Create new xmlwriter using source uri for output (resource)
>outputMemory([bool flush]) Returns current buffer (XMLWriter: string)
xmlwriter_output_memory(resource xmlwriter, [bool flush]) Returns current buffer (string)
>setIndentString(string indentString) Set string used for indenting (XMLWriter: bool)
xmlwriter_set_indent_string(resource xmlwriter, string indentString) Set string used for indenting (bool)
>setIndent(bool indent) Toggle indentation on/off (XMLWriter: bool)
xmlwriter_set_indent(resource xmlwriter, bool indent) Toggle indentation on/off (bool)
>startAttributeNS(string prefix, string name, string uri) Create start namespaced attribute (XMLWriter: bool)
xmlwriter_start_attribute_ns(resource xmlwriter, string prefix, string name, string uri) Create start namespaced attribute (bool)
>startAttribute(string name) Create start attribute (XMLWriter: bool)
xmlwriter_start_attribute(resource xmlwriter, string name) Create start attribute (bool)
>startCData() Create start CDATA tag (XMLWriter: bool)
xmlwriter_start_cdata(resource xmlwriter) Create start CDATA tag (bool)
>startComment() Create start comment (XMLWriter: bool)
xmlwriter_start_comment(resource xmlwriter) Create start comment (bool)
>startDocument([string version, [string encoding, [string standalone]]]) Create document tag (XMLWriter: bool)
xmlwriter_start_document(resource xmlwriter, [string version, [string encoding, [string standalone]]]) Create document tag (bool)
>startDTDAttlist(string name) Create start DTD AttList (XMLWriter: bool)
xmlwriter_start_dtd_attlist(resource xmlwriter, string name) Create start DTD AttList (bool)
>startDTDElement(string qualifiedName) Create start DTD element (XMLWriter: bool)
xmlwriter_start_dtd_element(resource xmlwriter, string qualifiedName) Create start DTD element (bool)
>startDTDEntity(string name, bool isparam) Create start DTD Entity (XMLWriter: bool)
xmlwriter_start_dtd_entity(resource xmlwriter, string name, bool isparam) Create start DTD Entity (bool)
>startDTD(string qualifiedName, [string publicId, [string systemId]]) Create start DTD tag (XMLWriter: bool)
xmlwriter_start_dtd(resource xmlwriter, string qualifiedName, [string publicId, [string systemId]]) Create start DTD tag (bool)
>startElementNS(string prefix, string name, string uri) Create start namespaced element tag (XMLWriter: bool)
xmlwriter_start_element_ns(resource xmlwriter, string prefix, string name, string uri) Create start namespaced element tag (bool)
>startElement(string name) Create start element tag (XMLWriter: bool)
xmlwriter_start_element(resource xmlwriter, string name) Create start element tag (bool)
>startPI(string target) Create start PI tag (XMLWriter: bool)
xmlwriter_start_pi(resource xmlwriter, string target) Create start PI tag (bool)
>text(string content) Write text (XMLWriter: bool)
xmlwriter_text(resource xmlwriter, string content) Write text (bool)
>writeAttributeNS(string prefix, string name, string uri, string content) Write full namespaced attribute (XMLWriter: bool)
xmlwriter_write_attribute_ns(resource xmlwriter, string prefix, string name, string uri, string content) Write full namespaced attribute (bool)
>writeAttribute(string name, string value) Write full attribute (XMLWriter: bool)
xmlwriter_write_attribute(resource xmlwriter, string name, string value) Write full attribute (bool)
>writeCData(string content) Write full CDATA tag (XMLWriter: bool)
xmlwriter_write_cdata(resource xmlwriter, string content) Write full CDATA tag (bool)
>writeComment(string content) Write full comment tag (XMLWriter: bool)
xmlwriter_write_comment(resource xmlwriter, string content) Write full comment tag (bool)
>writeDTDAttlist(string name, string content) Write full DTD AttList tag (XMLWriter: bool)
xmlwriter_write_dtd_attlist(resource xmlwriter, string name, string content) Write full DTD AttList tag (bool)
>writeDTDElement(string name, string content) Write full DTD element tag (XMLWriter: bool)
xmlwriter_write_dtd_element(resource xmlwriter, string name, string content) Write full DTD element tag (bool)
>writeDTDEntity(string name, string content, bool pe, string pubid, string sysid, string ndataid) Write full DTD Entity tag (XMLWriter: bool)
xmlwriter_write_dtd_entity(resource xmlwriter, string name, string content, bool pe, string pubid, string sysid, string ndataid) Write full DTD Entity tag (bool)
>writeDTD(string name, [string publicId, [string systemId, [string subset]]]) Write full DTD tag (XMLWriter: bool)
xmlwriter_write_dtd(resource xmlwriter, string name, [string publicId, [string systemId, [string subset]]]) Write full DTD tag (bool)
>writeElementNS(string prefix, string name, string uri, [string content]) Write full namespaced element tag (XMLWriter: bool)
xmlwriter_write_element_ns(resource xmlwriter, string prefix, string name, string uri, [string content]) Write full namespaced element tag (bool)
>writeElement(string name, [string content]) Write full element tag (XMLWriter: bool)
xmlwriter_write_element(resource xmlwriter, string name, [string content]) Write full element tag (bool)
>writePI(string target, string content) Writes a PI (XMLWriter: bool)
xmlwriter_write_pi(resource xmlwriter, string target, string content) Writes a PI (bool)
>writeRaw(string content) Write a raw XML text (XMLWriter: bool)
xmlwriter_write_raw(resource xmlwriter, string content) Write a raw XML text (bool)
XSLTProcessor() Creates a new XSLTProcessor object (new)
>getParameter(string namespaceURI, string localName) Get value of a parameter (XSLTProcessor: string)
>hasExsltSupport() Determine if PHP has EXSLT support (XSLTProcessor: bool)
>importStylesheet(DOMDocument stylesheet) Import stylesheet (XSLTProcessor: null)
>registerPHPFunctions([mixed restrict]) Enables the ability to use PHP functions as XSLT functions (XSLTProcessor: null)
>removeParameter(string namespaceURI, string localName) Remove parameter (XSLTProcessor: bool)
>setParameter(string namespace, string name, string value) Set value for a parameter (XSLTProcessor: bool)
>setParameter(string namespace, array options) Set value for a parameter (XSLTProcessor: bool)
>setProfiling(string filename) Sets profiling output file (XSLTProcessor: bool)
>transformToDoc(DOMNode doc) Transform to a DOMDocument (XSLTProcessor: DOMDocument)
>transformToURI(DOMDocument doc, string uri) Transform to URI (XSLTProcessor: int)
>transformToXML(DOMDocument doc) Transform to XML (XSLTProcessor: string)
xslt_backend_info() Returns the information on the compilation settings of the backend (string)
xslt_backend_name() Returns the name of the backend (string)
xslt_backend_version() Returns the version number of Sablotron (string)
xslt_create() Create a new XSLT processor (resource)
xslt_errno(resource xh) Returns an error number (int)
xslt_error(resource xh) Returns an error string (string)
xslt_free(resource xh) Free XSLT processor (null)
xslt_getopt(resource processor) Get options on a given xsl processor (int)
xslt_process(resource xh, string xmlcontainer, string xslcontainer, [string resultcontainer, [array arguments, [array parameters]]]) Perform an XSLT transformation (mixed)
xslt_set_base(resource xh, string uri) Set the base URI for all XSLT transformations (null)
xslt_set_encoding(resource xh, string encoding) Set the encoding for the parsing of XML documents (null)
xslt_set_error_handler(resource xh, mixed handler) Set an error handler for a XSLT processor (null)
xslt_set_log(resource xh, [mixed log]) Set the log file to write log messages to (null)
xslt_set_object(resource processor, object &obj) Sets the object in which to resolve callback functions (bool)
xslt_set_sax_handler(resource xh, array handlers) Set SAX handlers for a XSLT processor (null)
xslt_set_sax_handlers(resource processor, array handlers) Set the SAX handlers to be called when the XML document gets processed (null)
xslt_set_scheme_handler(resource xh, array handlers) Set Scheme handlers for a XSLT processor (null)
xslt_set_scheme_handlers(resource xh, array handlers) Set the scheme handlers for the XSLT processor (null)
xslt_setopt(resource processor, int newmask) Set options on a given xsl processor (mixed)
yaz_addinfo(resource id) Returns additional error information (string)
yaz_ccl_conf(resource id, array config) Configure CCL parser (null)
yaz_ccl_parse(resource id, string query, array &result) Invoke CCL Parser (bool)
yaz_close(resource id) Close YAZ connection (bool)
yaz_connect(string zurl, [mixed options]) Prepares for a connection to a Z39.50 server (mixed)
yaz_database(resource id, string databases) Specifies the databases within a session (bool)
yaz_element(resource id, string elementset) Specifies Element-Set Name for retrieval (bool)
yaz_errno(resource id) Returns error number (int)
yaz_error(resource id) Returns error description (string)
yaz_es_result(resource id) Inspects Extended Services Result (array)
yaz_es(resource id, string type, array args) Prepares for an Extended Service Request (null)
yaz_get_option(resource id, string name) Returns value of option for connection (string)
yaz_hits(resource id, [array &searchresult]) Returns number of hits for last search (int)
yaz_itemorder(resource id, array args) Prepares for Z39.50 Item Order with an ILL-Request package (null)
yaz_present(resource id) Prepares for retrieval (Z39.50 present) (bool)
yaz_range(resource id, int start, int number) Specifies a range of records to retrieve (null)
yaz_record(resource id, int pos, string type) Returns a record (string)
yaz_scan_result(resource id, [array &result]) Returns Scan Response result (array)
yaz_scan(resource id, string type, string startterm, [array flags]) Prepares for a scan (null)
yaz_schema(resource id, string schema) Specifies schema for retrieval (null)
yaz_search(resource id, string type, string query) Prepares for a search (bool)
yaz_set_option(resource id, string name, string value) Sets one or more options for connection (null)
yaz_set_option(resource id, array options) Sets one or more options for connection (null)
yaz_sort(resource id, string criteria) Sets sorting criteria (null)
yaz_syntax(resource id, string syntax) Specifies the preferred record syntax for retrieval (null)
yaz_wait([array &options]) Wait for Z39.50 requests to complete (mixed)
zip_close(resource zip) Close a ZIP file archive (null)
zip_entry_close(resource zip_entry) Close a directory entry (bool)
zip_entry_compressedsize(resource zip_entry) Retrieve the compressed size of a directory entry (int)
zip_entry_compressionmethod(resource zip_entry) Retrieve the compression method of a directory entry (string)
zip_entry_filesize(resource zip_entry) Retrieve the actual file size of a directory entry (int)
zip_entry_name(resource zip_entry) Retrieve the name of a directory entry (string)
zip_entry_open(resource zip, resource zip_entry, [string mode]) Open a directory entry for reading (bool)
zip_entry_read(resource zip_entry, [int length]) Read from an open directory entry (string)
zip_open(string filename) Open a ZIP file archive (mixed)
zip_read(resource zip) Read next entry in a ZIP file archive (mixed)
>addEmptyDir(string dirname) Add a new directory (ZipArchive: bool)
>addFile(string filename, [string localname]) Adds a file to a ZIP archive from the given path (ZipArchive: bool)
>addFromString(string localname, string contents) Add a file to a ZIP archive using its contents (ZipArchive: bool)
>close() Close the active archive (opened or newly created) (ZipArchive: bool)
>deleteIndex(int index) delete an entry in the archive using its index (ZipArchive: bool)
>deleteName(string name) delete an entry in the archive using its name (ZipArchive: bool)
>extractTo(string destination, [mixed entries]) Extract the archive contents (ZipArchive: bool)
>getArchiveComment() Returns the Zip archive comment (ZipArchive: string)
>getCommentIndex(int index, [int flags]) Returns the comment of an entry using the entry index (ZipArchive: string)
>getCommentName(string name, [int flags]) Returns the comment of an entry using the entry name (ZipArchive: string)
>getFromIndex(int index, [int flags]) Returns the entry contents using its index. (ZipArchive: mixed)
>getFromName(string name, [int flags]) Returns the entry contents using its name. (ZipArchive: mixed)
>getNameIndex(int index) Returns the name of an entry using its index (ZipArchive: string)
>getStatusString() Returns the status error message, system and/or zip messages. (ZipArchive: string)
>getStream(string name) Get a file handler to the entry defined by its name (read only). (ZipArchive: resource)
>locateName(string name, [int flags]) Returns the index of the entry in the archive (ZipArchive: mixed)
>open(string filename, [int flags]) Open a ZIP file archive (ZipArchive: mixed)
>renameIndex(int index, string newname) Renames an entry defined by its index (ZipArchive: bool)
>renameName(string name, string newname) Renames an entry defined by its name (ZipArchive: bool)
>setArchiveComment(string comment) Set the comment of a ZIP archive (ZipArchive: mixed)
>setCommentIndex(int index, string comment) Set the comment of an entry defined by its index (ZipArchive: mixed)
>setCommentName(string name, string comment) Set the comment of an entry defined by its name (ZipArchive: mixed)
>statIndex(int index, [int flags]) Get the details of an entry defined by its index. (ZipArchive: mixed)
>statName(name name, [int flags]) Get the details of an entry defined by its name. (ZipArchive: mixed)
>unchangeAll() Undo all changes done in the archive. (ZipArchive: mixed)
>unchangeArchive() Revert all global changes done in the archive. (ZipArchive: mixed)
>unchangeIndex(int index) Revert all changes done to an entry at the given index. (ZipArchive: mixed)
>unchangeName(string name) Revert all changes done to an entry with the given name. (ZipArchive: mixed)
gzclose(resource zp) Close an open gz-file pointer (bool)
gzcompress(string data, [int level]) Compress a string (string)
gzdeflate(string data, [int level]) Deflate a string (string)
gzencode(string data, [int level, [int encoding_mode]]) Create a gzip compressed string (string)
gzeof(resource zp) Test for EOF on a gz-file pointer (int)
gzfile(string filename, [int use_include_path]) Read entire gz-file into an array (array)
gzgetc(resource zp) Get character from gz-file pointer (string)
gzgets(resource zp, int length) Get line from file pointer (string)
gzgetss(resource zp, int length, [string allowable_tags]) Get line from gz-file pointer and strip HTML tags (string)
gzinflate(string data, [int length]) Inflate a deflated string (string)
gzopen(string filename, string mode, [int use_include_path]) Open gz-file (resource)
gzpassthru(resource zp) Output all remaining data on a gz-file pointer (int)
gzputs() Alias of gzwrite
gzread(resource zp, int length) Binary-safe gz-file read (string)
gzrewind(resource zp) Rewind the position of a gz-file pointer (bool)
gzseek(resource zp, int offset, [int whence]) Seek on a gz-file pointer (int)
gztell(resource zp) Tell gz-file pointer read/write position (int)
gzuncompress(string data, [int length]) Uncompress a compressed string (string)
gzwrite(resource zp, string string, [int length]) Binary-safe gz-file write (int)
readgzfile(string filename, [int use_include_path]) Output a gz-file (int)
zlib_get_coding_type() Returns the coding type used for output compression (string)
>__clone() Clone the exception (Exception: null)
Exception([string message, [int code, [Exception previous]]]) Construct the exception (new)
>getCode() Gets the Exception code (Exception: int)
>getFile() Gets the file in which the exception occurred (Exception: string)
>getLine() Gets the line in which the exception occurred (Exception: int)
>getMessage() Gets the Exception message (Exception: string)
>getPrevious() Returns previous Exception (Exception: Exception)
>getTrace() Gets the stack trace (Exception: array)
>getTraceAsString() Gets the stack trace as a string (Exception: string)
>__toString() String representation of the exception (Exception: string)
