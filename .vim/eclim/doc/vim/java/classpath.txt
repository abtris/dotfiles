*vim-java-classpath*


Eclipse Classpath Editing
*************************

Source code completion, searching, auto imports, all rely on a
properly configured classpath.  When you first create a project, a
.classpath file is created in the project's root directory.  If you
created the project on an existing code-base, eclim will attempt to
setup the .classpath file with any source code directories or
libraries in the project.

Regardless of the state of your project you will at some point need to
update the classpath.  The primary method of doing so, is to directly
edit the .classpath to add, update, or remove entries as needed. To
help you do this, eclim provides several commands to ease the creation
of new classpath entries and variables.

Note: All of the commands described below are only available while editing
  the .classpath file in vim.When you write the .classpath file, Vim
  will issue a command to the eclim server to update the project's
  classpath, and will report any errors via vim's location list (:help
  location-list).In addition to directly editing the .classpath file,
  you may also use maven's support (1.x
  (|guides-java-maven-maven-classpath|) or 2.x
  (|guides-java-maven-mvn-classpath|)) for maintaining the eclipse
  classpath.  For users who use ivy, eclim also provides a means to
  auto update the eclipse classpath (|guides-java-ivy-classpath|) when
  saving changes to your ivy.xml.

*:NewSrcEntry*

- :NewSrcEntry <dir> [<dir> ...] - Adds a new entry for one or more
  source code directories relative to the project's root directory.

  >
     <classpathentry kind="src" path="src/java"/>

  <

  This command supports command completion of directories relative to
  the .classpath file.

*:NewProjectEntry*

- :NewProjectEntry <project> [<project> ...] - Adds a new entry for
  one or more dependencies on other projects.

  >
     <classpathentry exported="true" kind="src" path="/a_project"/>

  <

  This command supports command completion of project names.

*:NewJarEntry*

- :NewJarEntry <file> [<file> ...] - Adds a new entry for one or more
  jar file dependencies.  If the jar file is not in a folder under the
  project root, you must use an absolute path (apparent limitation
  with Eclipse).  When adding the template, this command also adds the
  necessary (although commented out) elements and attributes to set
  the location of the jar's source code and javadocs.

  >
     <classpathentry exported="true" kind="lib" path="lib/hibernate-3.0.jar">
       <!--
         sourcepath="<path>">
       -->
       <!--
       <attributes>
         <attribute value="file:<javadoc>" name="javadoc_location"/>
       </attributes>
       -->
     </classpath>

  <

*:NewVarEntry*

- :NewVarEntry <VAR/file> [<VAR/file> ...] - Just like NewJarEntry
  except an Eclipse "var" entry is created.  When a jar entry
  references an absolute path, you should instead use a var entry.
  The var entry allows you to define a base dir as a variable (ex.
  USER_HOME = /home/username), and then reference files relative to
  that variable.

  >
     <classpathentry exported="true" kind="var" path="USER_HOME/lib/hibernate-3.0.jar">
       <!--
         sourcepath="<path>">
       -->
       <!--
       <attributes>
         <attribute value="http://<javadoc>" name="javadoc_location"/>
       </attributes>
       -->
     </classpath>

  <

  This allows you to share .classpath files with other developers
  without each having a local copy with environment specific paths.

  To add new base classpath variables, you can edit $ECLIPSE_HOME/plug
  ins/org.eclim_version/classpath_variables.properties

  By default, a USER_HOME variable is created that defaults to the
  java System property "user.home" and you can add more as needed.

  This command supports command completion of Eclipse variable names
  as well as the files and directories beneath the path the variable
  represents.

  To manage the classpath variables, eclim also provides the following
  commands.

  *:VariableList*
  - :VariableList - Lists all the currently available classpath
    variables and their corresponding values.

  *:VariableCreate*
  - :VariableCreate <name> <path> - Creates or updates the variable
    with the supplied name.

  *:VariableDelete*
  - :VariableDelete <name> - Deletes the variable with the supplied
    name.

vim:ft=eclimhelp