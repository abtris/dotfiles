# Command Enhancements

alias pwdc='pwd | pbcopy'
alias mysql='mysql -u root -p -h 127.0.0.1'
alias reload='source ~/bin/dotfiles/bash/aliases'
#alias ea='scite "-language=Shell" ~/bin/dotfiles/bash/aliases && reload' # Edit aliases
alias ea='v ~/bin/dotfiles/bash/aliases && reload' # Edit aliases
alias ee="v ~/bin/dotfiles/bash/env"
alias eh="sudo vim /etc/hosts"
# LMC
alias md="sudo sshfs prskavecl@vap01.devel.lmc.cz:/srv/dynamic/ /srv/dynamic/ -o uid=0,gid=33,allow_other"
alias mdd="sudo sshfs prskavecl@vap03.deploy.lmc.cz:/srv/dynamic/ /srv/dynamic/ -o uid=0,gid=33,allow_other"
alias mdp="sudo sshfs prskavecl@ap0208.preprod.lmc.cz:/srv/dynamic/ /srv/dynamic/ -o uid=0,gid=33,allow_other"
alias mnb="sudo sshfs abtris@10.1.2.14:/ /media/netbook/ -o uid=0,gid=33,allow_other"
alias rpmrepo="cadaver http://yumrepo.prod.lmc.cz/lmc/apps-deploy/"
alias sqlrepo="cadaver http://sqlrepo.prod.lmc.cz/webdav-sql/"
# Quicker cd
alias cr='cd ~/bin/dotfiles'
#alias cs='cd ~/src'
alias cz='cd ~/zend-ws'

function cs() {
    cd ~/Sites
    cd "$1"
}

# Aptitude
alias au='sudo aptitude update && sudo aptitude safe-upgrade'

function key() {
    # keyserver.ubuntu.com
    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $1
}


pman () {
    man -t "${1}" | open -f -a /Applications/Preview.app
}


# Common -- Some are from Damian Conway
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias lt="ls -lt" # sort time desc
alias ltr="lt -r"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() { 
    cd $1; ls 
}
alias cls='clear; ls'
alias hi='history'
alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first
alias s='cd ..'   # up one dir
alias sb='cd -'   # back to last dir

function take() { 
    mkdir -p "$1"
    cd "$1" 
}

alias e='exit'
alias k9="killall -9"
function killnamed () { 
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill 
}
function zipr() {
  zip -r $1.zip $1
}

# Nautilus
alias o='pcmanfm . &'
#alias ff='open -a Firefox'

# General code

alias checkphp="find . -name '.php' -exec php -l {} \;"


# From Chris Wanstrath
function pless() { 
    pygmentize $1 | less -r 
}

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

# SVN
alias unsvn="find . -name '.svn' -exec rm -rf {} \;"
alias sa="svn st | awk '{print $2 }' | xargs svn add"
alias s="svn st"

# Mercurial hg
#function new-hg() {
#    ssh hg@example.com "hg init $1"
#    hg clone ssh://hg@example.com/$1
#}


# HG
alias unhg="find . -name '.hg' -exec rm -rf {} \;"
alias h='hg status'
alias hp='hg push'
alias hl='hg pull'
alias hpf='hg push -f'
alias hd='hg diff'
alias lh='hg log --style compact | tac'
alias ht='hg log --style compact -vpr tip'

# hg add
function ha() {
    hg add "$*"
}
# hg commit
function hc() {
  hg commit -m "$1"
}
# hg remove
function hr() {
  hg remove "$*"
}
# Git
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias m='git checkout master'
# Commit pending changes and quote all args as message
function gg() { 
    git commit -v
}
alias gd='git diff --cached'
alias gdm='git diff master'
alias gl='git pull'
alias glr='git pull --rebase'
alias gnp="git-notpushed"
alias gp='git push'
alias gs='git show'
alias b='git branch -avv'
alias g='git status -sb'
alias eg='scite .git/config'
alias lg='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias lgp='git log --pretty=oneline'
alias gsf='git svn fetch'
alias gsr='git svn rebase'
alias gsd='git svn dcommit'

# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() { 
  git branch --track $2 $1/$2 && git checkout $2 
}
# Quickly clobber a file and checkout
function grf() { 
  rm $1
  git checkout $1 
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

# Text editing
# Emacs
#alias em="open -a Emacs"
#alias emm="open -a Emacs ."

# Regenerate TAGS file from file arguments
function ct() {
  rm -f TAGS
  etags --append --output=TAGS $*
}


# Scite
function sc() {
  scite $*
}


function v() {
 vim -p $1
}



# TextMate
alias et="mate"
alias ett="mate ."
#alias etr="mate app config lib db schema public spec test vendor/gems vendor/plugins Rakefile Capfile Vladfile Todofile README stories merb slices tasks features &"

# Ruby
#alias r="rake"

function markdown() { 
/Applications/TextMate.app/Contents/SharedSupport/Support/bin/Markdown.pl $1 > $1.html 
}

# Rails
#alias mr='mongrel_rails start'
#alias ms='mongrel_rails stop'
#alias rp='touch tmp/restart.txt'
#alias sc='./script/console'
#alias sg='./script/generate'
#alias sp='./script/plugin'
#alias ss='./script/server'
#alias tl='tail -f log/*.log'
#alias ts='thin start'

# TDD / BDD

#alias aa='autotest'
#alias aaf='autotest -f' # Don't run all at start
#alias aas="./script/autospec"

# Setup a tunnel
#function haproxyssh() { 
#  ssh -L7997:127.0.0.1:7997 deploy@$1.com 
#}

# Syntax check Javascript
function jsc() { 
  jsl -conf /etc/jsl/jsl.conf -process $1 
}

function aiff2mp3() { 
  lame -h -V 0 $1.aif $1.mp3 
}
function wav2mp3() { 
  lame -h -V 0 $1.wav $1.mp3 
}


# XCode
# Analyze release build
#alias sx="xcodebuild clean && ~/src/checker-0.146/scan-build -k -V xcodebuild"
# Analyze test build
#alias sxt="xcodebuild -target Test clean && ~/src/checker-0.146/scan-build -k -V xcodebuild -target Test"
# Call with -target Foo
#function sxx() { 
#  xcodebuild $* clean && ~/src/checker-0.146/scan-build -k -V xcodebuild $* 
#}

#alias ox="open *.xcodeproj"

# Nginx
#function nginx_stop() {
#    ps ax | grep nginx | cut -d " " -f 1 | xargs sudo kill -9
#}
#function nginx_start() {
#    sudo /opt/nginx/sbin/nginx
#}

# TaskPaper
function new-tp() {
    touch $1.taskpaper
    open $1.taskpaper
}


# From http://github.com/suztomo/dotfiles
function rmf(){
    for file in $*
    do
        __rm_single_file $file
    done
}

function __rm_single_file(){
    if ! [ -d ~/.Trash/ ]
    then
        command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e ~/.Trash/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 ~/.Trash/$NAME
    else
        echo "No such file or directory: $file"
    fi
}


# ZSH
alias dh='dirs -v'
