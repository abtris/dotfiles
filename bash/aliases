# Command Enhancements

#alias rake='noglob rake'
# alias python='python3'
# alias pip='pip3'
alias lessc='/usr/local/bin/lessc'
alias awk='gawk'
# VPN
alias vpnstop='brew services stop vpnconnect'
alias vpnls='brew services list'
alias vpn='brew services start vpnconnect'
# k8s section
alias k='kubectl'
alias kgp='kubectl get pods -o wide --all-namespaces=true'
alias kgn='kubectl get nodes -o wide --all-namespaces=true'
alias knodenames='kubectl get node -o jsonpath={.items[*].metadata.name}'
alias ks='kube-shell'

# https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-context-and-configuration
# kubectl config set-context CONTEXT_NAME -- namespace=NAMESPACE_NAME
function ksc() {
  kubectl config set-context $1 -- namespace=$2
}

function kcc() {
  kubectl config current-context
}

function kuc() {
  kubectl config use-context $1
}

alias subl="$HOME/bin/subl -n"
alias diff='colordiff'
alias pwdc='pwd | pbcopy'
alias reload='source ~/bin/dotfiles/bash/aliases'
alias ea='code ~/bin/dotfiles/bash/aliases && reload' # Edit aliases
alias ee="code ~/bin/dotfiles/bash/env"
alias eh="sudo -e ~/bin/dotfiles/hosts/hosts"
alias csub='cd "~/Library/Application Support/Sublime Text 3/Packages/User"'
# LMC
alias md="sudo sshfs -o allow_other,uid=70,gid=70 prskavecl@ap01.devel.lmc.cz:/srv/dynamic/ /srv/dynamic/"
alias mdd="sudo sshfs -o allow_other,uid=70,gid=70 prskavecl@ap01.dev3.lmc.cz:/srv/dynamic/ /srv/dynamic/"
alias rpmrepo="cadaver http://yumrepo.prod.lmc.cz/lmc/apps-deploy/"
alias sqlrepo="cadaver http://sqlrepo.prod.lmc.cz/webdav-sql/"
# Quicker cd
alias cr='cd ~/bin/dotfiles'
alias cdj='cd ~/Dropbox\ \(Personal\)/Apps/Deckset/jenkins/'
alias cs='cd ~/Sites'

alias ecr='eval $(aws ecr get-login --no-include-email)'

alias fixbrew='sudo chown -R $(whoami) /usr/local/bin /usr/local/lib'

function gpr() {
	hub pull-request
}

function hb() {
	hub browse
}

function project_aware_subl {
    project_file=$(ls *.sublime-project 2>/dev/null | head -n 1)
    subl ${*:-${project_file:-.}}
}
# https://superuser.com/questions/42843/finding-the-process-that-is-using-a-certain-port-in-linux/42849#42849
function whoseport {
  lsof -i tcp:$1
}

function j() {
  z $1
}

function e() {
  code $1
}

function gotest() {
  go test $* | sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' | GREP_COLOR="01;33" egrep --color=always '\s*[a-zA-Z0-9\-_.]+[:][0-9]+[:]|^'
}

function hkill() {
  APPNAME=$1
  heroku apps:join --app $APPNAME
  heroku apps:destroy --app $APPNAME --confirm $APPNAME
}

function docker-ip() {
	boot2docker ip 2> /dev/null
}

function gitcleanup() {
	git branch --merged | grep -v "\*" | xargs -n 1 git branch -d
}

function topten() {
	history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10
}

function switch() {
  sudo lmcswitch $1
}

function marked() {
  open -a "/Applications/Marked 2.app" $1
}

# Dig
function digall() {
	dig -t ANY $1
}

function key() {
    # keyserver.ubuntu.com
    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $1
}

function pman () {
    man -t "${1}" | open -f -a /Applications/Preview.app
}

# AWS

function getIp () {
  aws ec2 describe-instances --filters "Name=tag:Name,Values=${1}" | jq .Reservations[].Instances[].PublicIpAddress
}

# Common -- Some are from Damian Conway
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias ltd="ls -lt" # sort time desc
alias ltr="lt -r"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() {
    cd $1; ls
}
alias cls='clear; ls'
alias hi='history'
alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias s='cd ..'   # up one dir
alias sb='cd -'   # back to last dir

function take() {
    mkdir -p "$1"
    cd "$1"
}

alias k9="killall -9"
function killnamed () {
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill
}
function zipr() {
  zip -r $1.zip $1
}

# General code

alias checkphp="find . -name '.php' -exec php -l {} \;"

function genpass() {
  p=$(openssl rand -base64 24); while ! [[ "$p" =~ ^[a-zA-Z0-9]+$ ]]; do p=$(openssl rand -base64 24); done; echo $p;
}

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

# SVN
alias unsvn="find . -name '.svn' -exec rm -rf {} \;"

# Git
# alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias m='git checkout master'
# Git http://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option
function gmerge() {
    git merge --no-commit --no-ff $1
}

function gco() {
    git checkout $1
}

function gac() {
	git clone $1
	DIR=`echo $1 | cut -d'/' -f 2 | cut -d '.' -f 1`
	echo "cd $DIR"
	cd $DIR
	if [[ $1 =~ git@github.com:apiaryio ]]; then
		git config user.name "Ladislav Prskavec"
		git config user.email "ladislav@apiary.io"
	fi
}

alias ghp='git checkout gh-pages'
# Commit pending changes and quote all args as message
function gc() {
	git commit -v
}

function getGitBranch() {
  echo `git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
}

alias gpull='git pull origin `getGitBranch`'
alias gpush='git push origin `getGitBranch`'

alias gd='git diff | mate'
alias ga='git add'
alias gca="git commit -a -m"
alias gdm='git diff master'
alias gl='git pull --ff'
alias glup='git pull upstream master'
alias glr='git pull --rebase'
alias gcd='cd "`git rev-parse --show-toplevel`"'
alias gnp="git-notpushed"
alias gp='git push'
alias gs='git show'
alias b='git branch -avv'
alias bl='git branch -v'
alias g='git status -sb'
alias eg='vim .git/config'
alias lg='git log --graph --topo-order --pretty=format:"%Cred%h%Creset -%C(yellow)%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset %C(bold red)%d%Creset" --abbrev-commit --date=relative'
alias lgp='git log --pretty=oneline'
alias gsf='git svn fetch'
alias gsr='git svn rebase'
alias gsd='git svn dcommit'

alias last="git for-each-ref --sort=-committerdate refs/heads/ | head -n 40 | cut -d ' ' -f 2 | cut -c 19-"


function deleteGitTag() {
   git tag -d $1
   git push origin :refs/tags/$1
}


# Git clone from GitHub
function gch() {
  git clone git://github.com/abtris/$1.git
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() {
  git branch --track $2 $1/$2 && git checkout $2
}

# Scite

# ZSH
alias dh='dirs -v'

# CSV
function showCsv() {
  cat $1 | sed -e 's/,,/, ,/g' | column -s, -t | less -#5 -N -S
}
