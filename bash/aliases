# Detect arch (using m1 apple and i386 macs)
ARCH=`uname -m`

#alias rake='noglob rake'
alias tilt=/opt/homebrew/bin/tilt
alias git=/opt/homebrew/bin/git
alias python='python3'
alias pip='pip3'
alias tm='terramate'
alias tmux='zellij'
alias cdroot='cd $(git root)'
# alias lessc='/usr/local/bin/lessc'
if [[ $ARCH == "arm64" ]]; then
  # M1 gawk not work, system awk works
else
  alias awk='gawk'
fi
# https://github.com/BurntSushi/ripgrep
# brew install ripgrep
alias ack='rg'
alias cat='bat --paging=never --style=plain'
alias k='kubectl'
alias kgp='kubectl get pods -o wide --all-namespaces=true'
alias kgn='kubectl get nodes -o wide --all-namespaces=true'
alias ke="kubectl get events --all-namespaces --sort-by='.metadata.creationTimestamp\'"
alias kep='kubectl get events --all-namespaces --field-selector involvedObject.kind=Pod'
alias knodenames='kubectl get node -o jsonpath={.items[*].metadata.name}'
alias ks='kube-shell'
alias dig='dog'
alias ju='cd ~/Sites/abtris/cml && git add . && git commit -am "Update journal"'
alias vdev='source setvdev'

function jup() {
  cd ~/Sites/abtris/cml
  git add .
  commitUpdate=`git show --name-only --oneline HEAD | tail -n +2`
  echo "Update \n$commitUpdate" | git commit -n -F -
  git push
}
# Git stack - https://andrewlock.net/working-with-stacked-branches-in-git-is-easier-with-update-refs/
alias git-stack-push="git stack-branches | xargs -I {} git push --force-with-lease origin {}"

# switch command - https://github.com/danielfoehrKn/kubeswitch
alias swiref='rm -fr ~/.kube/switch-state/ ~/.kube/cache/ ~/.kube/switch_history;switch clean'

# Flux
function fflux() {
  selected=`printf "system\nall\nlogs" | fzf`
  echo "selected $selected";
  case $selected in
      "system")
        flux events --for Kustomization/flux-system
        ;;
      "all")
        flux events --all-namespaces --watch
        ;;
      "logs")
        flux logs --all-namespaces --level=error --since=10m
        ;;
  esac
}
# Makefile autocomplete
function _makefile_targets {
    local curr_arg;
    local targets;

    # Find makefile targets available in the current directory
    targets=''
    if [[ -e "$(pwd)/Makefile" ]]; then
        targets=$( \
            grep -oE '^[a-zA-Z0-9_-]+:' Makefile \
            | sed 's/://' \
            | tr '\n' ' ' \
        )
    fi

    # Filter targets based on user input to the bash completion
    curr_arg=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=( $(compgen -W "${targets[@]}" -- $curr_arg ) );
}
complete -F _makefile_targets make

function killnamespace() {
  kubectl proxy &
  kubectl get namespace $1 -o json |jq '.spec = {"finalizers":[]}' >temp.json
  curl -k -H "Content-Type: application/json" -X PUT --data-binary @temp.json 127.0.0.1:8001/api/v1/namespaces/$1/finalize
}


# Terraform

alias tp='terraform plan'
alias tioidc="terraform init -backend-config='resource_group_name=rg-terraform-state' -backend-config='storage_account_name=tfstatestgactstore' -backend-config='container_name=tfstate' -backend-config='subscription_id=caea5b7a-c6db-41e0-b2dc-f7e9b3381398'"
alias ti="terraform init"
alias tip="rm -rf .terraform && terraform init && terraform plan"
alias ta='terraform apply --auto-approve'

# Teleport
alias tshk='tsh kube login --set-context-name "{{.KubeName}}"'

# Temporal
function tw() {
  kubectl exec -n kds -it deployment/temporal-admin-tools -- tctl workflow list --pjson $1
}

function tcd() {
  kubectl exec -n kds -it deployment/temporal-admin-tools -- tctl workflow show  -w $1
}


function prepnamespace() {
  kubectl create namespace $1
  kubectl label namespaces $1 pds.portworx.com/available=true --overwrite=true
}

function getuuid {
    uuid=$(uuidgen | tr 'A-Z' 'a-z' | tr -d '\n')
    (osascript -e "display notification with title \"âŒ˜-V to paste\" subtitle \"$uuid\"" &) >/dev/null 2>&1
    echo -n "$uuid" | pbcopy
}

function now() {
  echo "$(date +'%Y-%m-%d')"
  return 0
}

function fixrenovate() {
  cp ~/bin/dotfiles/CODEOWNERS .
  cp ~/bin/dotfiles/renovate.json .
}

# alias ssh='/usr/local/bin/ssh'
# alias ssh-agent='/usr/local/bin/ssh-agent'
# alias ssh-add='/usr/local/bin/ssh-add'

# Yubikey handler
reload-ssh() {
   pkill -f ssh-agent
   eval `ssh-agent`
   ssh-add -e /usr/local/lib/opensc-pkcs11_hack.so >> /dev/null
   if [ $? -gt 0 ]; then
       echo "Failed to remove previous card"
   fi
   ssh-add -s /usr/local/lib/opensc-pkcs11_hack.so
}

# https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-context-and-configuration
# kubectl config set-context CONTEXT_NAME -- namespace=NAMESPACE_NAME
function ksc() {
  kubectl config set-context $1 -- namespace=$2
}

function kcc() {
  kubectl config current-context
}

function kuc() {
  kubectl config use-context $1
}

function setalias() {
  scutil --set ComputerName "$1"
  scutil --set LocalHostName "$1"
  scutil --set HostName "$1"
}

alias diff='colordiff'
alias pwdc='pwd | pbcopy'
alias reload='source ~/bin/dotfiles/bash/aliases'
alias ea='e ~/bin/dotfiles/bash/aliases && reload' # Edit aliases
alias ee="e ~/bin/dotfiles/bash/env"
alias eh="sudo -e ~/bin/dotfiles/hosts/hosts"

# Quicker cd
alias cr='cd ~/bin/dotfiles'
alias cs='cd ~/Sites'

alias ecr='eval $(aws ecr get-login --no-include-email)'

alias fixbrew='sudo chown -R $(whoami) /usr/local/bin /usr/local/lib'

function gpr() {
	gh pr create --fill
}

function ghl() {
  gh pr list
}

function hb() {
  gh pr view -w
}

function hbv() {
  gh repo view -w
}

function project_aware_subl {
    project_file=$(ls *.sublime-project 2>/dev/null | head -n 1)
    subl ${*:-${project_file:-.}}
}
# https://superuser.com/questions/42843/finding-the-process-that-is-using-a-certain-port-in-linux/42849#42849
function whoseport {
  lsof -i tcp:$1
}

export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
function j() {
  # Sites needs structure with account/repo
  DIR=`find ~/Sites -type d -maxdepth 2 -depth 2 -print | cut -d '/' -f5,6 | fzf -1 -q "$1"`
  cd ~/Sites/${DIR}
}

function ed() {
  code `git rev-parse --show-toplevel`
}

function e() {
  code $1
}


function et() {
  find ~/Sites -type d -maxdepth 2 -depth 2 -print | cut -d '/' -f5,6 | fzf --bind "enter:become(code ~/Sites/{1})"
}

function gotest() {
  go test $* | sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' | GREP_COLOR="01;33" egrep --color=always '\s*[a-zA-Z0-9\-_.]+[:][0-9]+[:]|^'
}

function hkill() {
  APPNAME=$1
  heroku apps:join --app $APPNAME
  heroku apps:destroy --app $APPNAME --confirm $APPNAME
}

function docker-ip() {
	boot2docker ip 2> /dev/null
}

function gitcleanup() {
	git branch --merged | grep -v "\*" | xargs -n 1 git branch -d
}

function topten() {
	history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10
}

# Dig
function digall() {
	dig -t ANY $1
}

function key() {
    # keyserver.ubuntu.com
    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $1
}

function pman () {
    man -t "${1}" | open -f -a /Applications/Preview.app
}

# AWS

function getIp () {
  aws ec2 describe-instances --filters "Name=tag:Name,Values=${1}" | jq .Reservations[].Instances[].PublicIpAddress
}


function curl_time() {
    curl -so /dev/null -w "\
   namelookup:  %{time_namelookup}s\n\
      connect:  %{time_connect}s\n\
   appconnect:  %{time_appconnect}s\n\
  pretransfer:  %{time_pretransfer}s\n\
     redirect:  %{time_redirect}s\n\
starttransfer:  %{time_starttransfer}s\n\
-------------------------\n\
        total:  %{time_total}s\n" "${1}"
}

# Common -- Some are from Damian Conway
alias ls="lsd"
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias ltd="ls -lt" # sort time desc
alias ltr="lt -r"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() {
    cd $1; ls
}
alias cls='clear; ls'
alias hi='history'
alias ll='lsd -lhG'  # -l long listing, human readable, no group info
alias s='cd ..'   # up one dir
alias sb='cd -'   # back to last dir

function take() {
    mkdir -p "$1"
    cd "$1"
}

alias k9="killall -9"
function killnamed () {
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill
}
function zipr() {
  zip -r $1.zip $1
}

# General code

alias checkphp="find . -name '.php' -exec php -l {} \;"

function genpass() {
  p=$(openssl rand -base64 24); while ! [[ "$p" =~ ^[a-zA-Z0-9]+$ ]]; do p=$(openssl rand -base64 24); done; echo $p;
}

# Processes
alias tu='top -o cpu' # cpu
alias tmem='top -o vsize' # memory

# SVN
alias unsvn="find . -name '.svn' -exec rm -rf {} \;"

# Git
# alias ungit="find . -name '.git' -exec rm -rf {} \;"

# Switch to master/main
function m() {
  DEFAULT_BRANCH=`git branch -l master main | tr -d ' *'`
  git checkout $DEFAULT_BRANCH
}

# Git http://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option
function gmerge() {
    git merge --no-commit --no-ff $1
}

function gco() {
    git checkout $*
}

function gcb() {
    git checkout -b abtris/$1
}


function gac() {
	git clone $1
	DIR=`echo $1 | cut -d'/' -f 2 | cut -d '.' -f 1`
	echo "cd $DIR"
	cd $DIR
}

alias ghp='git checkout gh-pages'
# Commit pending changes and quote all args as message
function gc() {
	git commit -v
}

function getGitBranch() {
  echo `git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
}

alias gpull='git pull origin `getGitBranch`'
alias gpush='git push --set-upstream origin `getGitBranch`'

alias gd='git diff | mate'
alias ga='git add'
alias gca="git commit -a -m"
alias gdm='git diff master'
alias gl='git pull --ff'
alias glup='git pull upstream master'
alias glr='git pull --rebase'
alias gcd='cd "`git rev-parse --show-toplevel`"'
alias gnp="git-notpushed"
alias gp='git push'
alias gpf='git push --force-with-lease'
alias gs='git show'
alias b='git branch -avv --sort=-committerdate'
alias bl='git branch -v'
alias g='git status -sb'
alias gf='git fuzzy status'
alias eg='vim .git/config'
alias lg='lazygit'
alias lgp='git log --pretty=oneline'
alias gsf='git svn fetch'
alias gsr='git svn rebase'
alias gsd='git svn dcommit'
alias kubectx='switch'
alias kctx='switch'



# alias last="git for-each-ref --sort=-committerdate refs/heads/ | head -n 40 | cut -d ' ' -f 2 | cut -c 19-"
# alias last="git branch --sort=-committerdate --format='%(color:green)%(objectname:short)%(color:reset) %(authordate:short) %(color:red)(%(refname:short))%(color:reset) %(color:blue)[%(committerdate:relative)]%(color:reset) %(color:reset)%(subject)%(color:reset)' | head -n 10"

function last() {
  last=`git branch --sort=-committerdate --format='%(color:green)%(objectname:short)%(color:reset) %(authordate:short) %(color:red)(%(refname:short))%(color:reset) %(color:blue)[%(committerdate:relative)]%(color:reset) %(color:reset)%(subject)%(color:reset)' | head -n 20 | fzf`
  branch=`echo "$last" | cut -d ' ' -f 3 | tr -d '()'`
  git checkout $branch
}


function deleteGitTag() {
   git tag -d $1
   git push origin :refs/tags/$1
}


# Git clone from GitHub
function gch() {
  git clone ssh://github.com/abtris/$1.git
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() {
  git branch --track $2 $1/$2 && git checkout $2
}

# Scite

# ZSH
alias dh='dirs -v'

# CSV
function showCsv() {
  cat $1 | sed -e 's/,,/, ,/g' | column -s, -t | less -#5 -N -S
}


# Azure
function azdev() {
  az account set --subscription 17f0aa1f-c47a-4404-9585-81cf47006863
}

function azqa() {
  az account set --subscription 0f0ca875-8a78-4d20-a69e-6b26aa2ade74
}

function azint() {
  az account set --subscription 207440d1-681b-4bb5-a7ba-a319cbae9168
}

function azpre() {
  az account set --subscription 0d05e6ca-16e7-4f82-892d-e0f5ccc37f47
}

function azprod() {
  az account set --subscription a3c04758-e98b-45dc-8061-815c74618a44
}

function azrelease() {
  az account set --subscription eb9ba9c4-d4be-4d67-8fce-fba389b13722
}

function azpentest() {
  az account set --subscription 6304a8ce-9c7f-4bb7-913d-1f2de708eac0
}

function azswitch() {
  selected=`printf "dev\nqa\ninteg\nrelease\npentest\npreprod\nprod" | fzf`
  echo "selected $selected";
  case $selected in
      "dev")
        azdev
        ;;
      "qa")
        azqa
        ;;
      "integ")
        azint
        ;;
      "release")
        azrelease
        ;;
      "pentest")
        azpentest
        ;;
      "preprod")
        azpre
        ;;
      "prod")
        azprod
        ;;
  esac
}

# Teleport
function integTunnel() {
  tsh ssh -D 9001 -N adminuser@jumphost-integ-uks
}

function integEus2Tunnel() {
  tsh ssh -D 9001 -N adminuser@jumphost-integ-eus2
}

function preprodTunnel() {
  tsh ssh -D 9001 -N adminuser@jumphost-preprod-eus
}

function prodTunnel() {
  tsh ssh -D 9001 -N adminuser@jumphost-prod-eus
}


function addSocks() {
  export HTTPS_PROXY=socks5://localhost:9001
  export NO_PROXY=".com,.net,.org,.local"
}

function removeSocks() {
  unset HTTPS_PROXY
  unset NO_PROXY
}
